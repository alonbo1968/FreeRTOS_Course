
FreeRTOS_ex5_queues_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080051dc  080051dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051dc  080051dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f48  20000068  0800524c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fb0  0800524c  00021fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158e8  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa2  00000000  00000000  000359c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00038968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eee  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003abbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146d5  00000000  00000000  0003d9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6dda  00000000  00000000  00052090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e4  00000000  00000000  00148e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050c0 	.word	0x080050c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080050c0 	.word	0x080050c0

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa87 	bl	8000736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f882 	bl	8000334 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fefa 	bl	8002028 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (8, sizeof(Data), &Queue1_attributes);
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <main+0x5c>)
 8000236:	2104      	movs	r1, #4
 8000238:	2008      	movs	r0, #8
 800023a:	f001 ffec 	bl	8002216 <osMessageQueueNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x60>)
 8000242:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0x64>)
 8000246:	2100      	movs	r1, #0
 8000248:	480f      	ldr	r0, [pc, #60]	; (8000288 <main+0x68>)
 800024a:	f001 ff37 	bl	80020bc <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x6c>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(StartReceive, NULL, &Receive_attributes);
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0x70>)
 8000256:	2100      	movs	r1, #0
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x74>)
 800025a:	f001 ff2f 	bl	80020bc <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0x78>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, NULL, &Sender2_attributes);
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <main+0x7c>)
 8000266:	2100      	movs	r1, #0
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <main+0x80>)
 800026a:	f001 ff27 	bl	80020bc <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000274:	f001 fefc 	bl	8002070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x58>
 800027a:	bf00      	nop
 800027c:	0800517c 	.word	0x0800517c
 8000280:	20000090 	.word	0x20000090
 8000284:	08005110 	.word	0x08005110
 8000288:	08000419 	.word	0x08000419
 800028c:	20000084 	.word	0x20000084
 8000290:	08005134 	.word	0x08005134
 8000294:	08000451 	.word	0x08000451
 8000298:	20000088 	.word	0x20000088
 800029c:	08005158 	.word	0x08005158
 80002a0:	080004ad 	.word	0x080004ad
 80002a4:	2000008c 	.word	0x2000008c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	; 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 fe18 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ce:	f000 fd41 	bl	8000d54 <HAL_PWREx_ControlVoltageScaling>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d8:	f000 f916 	bl	8000508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002dc:	2310      	movs	r3, #16
 80002de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e8:	2360      	movs	r3, #96	; 0x60
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	2300      	movs	r3, #0
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fd83 	bl	8000e00 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000300:	f000 f902 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	463b      	mov	r3, r7
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f94b 	bl	80015b8 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 f8ee 	bl	8000508 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3758      	adds	r7, #88	; 0x58
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_GPIO_Init+0xbc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a28      	ldr	r2, [pc, #160]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a22      	ldr	r2, [pc, #136]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_GPIO_Init+0xbc>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000380:	f043 0302 	orr.w	r3, r3, #2
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0302 	and.w	r3, r3, #2
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f000 fc91 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4619      	mov	r1, r3
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <MX_GPIO_Init+0xc0>)
 80003b6:	f000 fad9 	bl	800096c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003ba:	2320      	movs	r3, #32
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 faca 	bl	800096c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2105      	movs	r1, #5
 80003dc:	2028      	movs	r0, #40	; 0x28
 80003de:	f000 fa9b 	bl	8000918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f000 fab4 	bl	8000950 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e8:	bf00      	nop
 80003ea:	3720      	adds	r7, #32
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000800 	.word	0x48000800

080003f8 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee3 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 800040a:	200a      	movs	r0, #10
 800040c:	f7ff fee0 	bl	80001d0 <ITM_SendChar>
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	for(;;)
	{
	  task_action('s');
 8000420:	2073      	movs	r0, #115	; 0x73
 8000422:	f7ff ffe9 	bl	80003f8 <task_action>
	  r_state = osMessageQueuePut(Queue1Handle, &DataToSend1, 0, 200);
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <StartSender1+0x2c>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	23c8      	movs	r3, #200	; 0xc8
 800042c:	2200      	movs	r2, #0
 800042e:	4906      	ldr	r1, [pc, #24]	; (8000448 <StartSender1+0x30>)
 8000430:	f001 ff64 	bl	80022fc <osMessageQueuePut>
 8000434:	4603      	mov	r3, r0
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <StartSender1+0x34>)
 8000438:	6013      	str	r3, [r2, #0]
	  osDelay(2000);
 800043a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043e:	f001 fecf 	bl	80021e0 <osDelay>
	  task_action('s');
 8000442:	e7ed      	b.n	8000420 <StartSender1+0x8>
 8000444:	20000090 	.word	0x20000090
 8000448:	20000000 	.word	0x20000000
 800044c:	20000094 	.word	0x20000094

08000450 <StartReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceive */
void StartReceive(void *argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  Data retvalue;

  /* Infinite loop */
  for(;;)
  {
	task_action('R');
 8000458:	2052      	movs	r0, #82	; 0x52
 800045a:	f7ff ffcd 	bl	80003f8 <task_action>
	r_state = osMessageQueueGet(Queue1Handle, &retvalue, NULL, osWaitForever);
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <StartReceive+0x54>)
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	f107 010c 	add.w	r1, r7, #12
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
 800046a:	2200      	movs	r2, #0
 800046c:	f001 ffa6 	bl	80023bc <osMessageQueueGet>
 8000470:	4603      	mov	r3, r0
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <StartReceive+0x58>)
 8000474:	6013      	str	r3, [r2, #0]
	if(retvalue.source == 1)
 8000476:	7bbb      	ldrb	r3, [r7, #14]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d106      	bne.n	800048a <StartReceive+0x3a>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2120      	movs	r1, #32
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 fc1c 	bl	8000cc0 <HAL_GPIO_WritePin>
 8000488:	e005      	b.n	8000496 <StartReceive+0x46>
	}
	else
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2120      	movs	r1, #32
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	f000 fc15 	bl	8000cc0 <HAL_GPIO_WritePin>
	}
	task_action(retvalue.value);
 8000496:	89bb      	ldrh	r3, [r7, #12]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ffac 	bl	80003f8 <task_action>
	task_action('R');
 80004a0:	e7da      	b.n	8000458 <StartReceive+0x8>
 80004a2:	bf00      	nop
 80004a4:	20000090 	.word	0x20000090
 80004a8:	20000094 	.word	0x20000094

080004ac <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */

  /* Infinite loop */
  for(;;)
  {
	task_action('S');
 80004b4:	2053      	movs	r0, #83	; 0x53
 80004b6:	f7ff ff9f 	bl	80003f8 <task_action>
	r_state = osMessageQueuePut(Queue1Handle, &DataToSend2, 0, 200);
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <StartSender2+0x2c>)
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	23c8      	movs	r3, #200	; 0xc8
 80004c0:	2200      	movs	r2, #0
 80004c2:	4906      	ldr	r1, [pc, #24]	; (80004dc <StartSender2+0x30>)
 80004c4:	f001 ff1a 	bl	80022fc <osMessageQueuePut>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <StartSender2+0x34>)
 80004cc:	6013      	str	r3, [r2, #0]
    osDelay(2000);
 80004ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d2:	f001 fe85 	bl	80021e0 <osDelay>
	task_action('S');
 80004d6:	e7ed      	b.n	80004b4 <StartSender2+0x8>
 80004d8:	20000090 	.word	0x20000090
 80004dc:	20000004 	.word	0x20000004
 80004e0:	20000094 	.word	0x20000094

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f000 f937 	bl	8000768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40001000 	.word	0x40001000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <HAL_MspInit+0x64>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <HAL_MspInit+0x64>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	; 0x60
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <HAL_MspInit+0x64>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <HAL_MspInit+0x64>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <HAL_MspInit+0x64>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	; 0x58
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x64>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	f06f 0004 	mvn.w	r0, #4
 8000552:	f000 f9e1 	bl	8000918 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	f06f 0003 	mvn.w	r0, #3
 800055e:	f000 f9db 	bl	8000918 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	210f      	movs	r1, #15
 8000566:	f06f 0001 	mvn.w	r0, #1
 800056a:	f000 f9d5 	bl	8000918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <HAL_InitTick+0xe0>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058e:	4a33      	ldr	r2, [pc, #204]	; (800065c <HAL_InitTick+0xe0>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6593      	str	r3, [r2, #88]	; 0x58
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <HAL_InitTick+0xe0>)
 8000598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a2:	f107 0210 	add.w	r2, r7, #16
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f9b1 	bl	8001914 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d103      	bne.n	80005c4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005bc:	f001 f994 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80005c0:	6378      	str	r0, [r7, #52]	; 0x34
 80005c2:	e004      	b.n	80005ce <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005c4:	f001 f990 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80005c8:	4603      	mov	r3, r0
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d0:	4a23      	ldr	r2, [pc, #140]	; (8000660 <HAL_InitTick+0xe4>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	0c9b      	lsrs	r3, r3, #18
 80005d8:	3b01      	subs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <HAL_InitTick+0xe8>)
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <HAL_InitTick+0xec>)
 80005e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <HAL_InitTick+0xe8>)
 80005e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <HAL_InitTick+0xe8>)
 80005ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <HAL_InitTick+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_InitTick+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <HAL_InitTick+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000602:	4818      	ldr	r0, [pc, #96]	; (8000664 <HAL_InitTick+0xe8>)
 8000604:	f001 fa18 	bl	8001a38 <HAL_TIM_Base_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800060e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000612:	2b00      	cmp	r3, #0
 8000614:	d11b      	bne.n	800064e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000616:	4813      	ldr	r0, [pc, #76]	; (8000664 <HAL_InitTick+0xe8>)
 8000618:	f001 fa70 	bl	8001afc <HAL_TIM_Base_Start_IT>
 800061c:	4603      	mov	r3, r0
 800061e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000626:	2b00      	cmp	r3, #0
 8000628:	d111      	bne.n	800064e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800062a:	2036      	movs	r0, #54	; 0x36
 800062c:	f000 f990 	bl	8000950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b0f      	cmp	r3, #15
 8000634:	d808      	bhi.n	8000648 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000636:	2200      	movs	r2, #0
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	2036      	movs	r0, #54	; 0x36
 800063c:	f000 f96c 	bl	8000918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_InitTick+0xf0>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e002      	b.n	800064e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800064e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000652:	4618      	mov	r0, r3
 8000654:	3738      	adds	r7, #56	; 0x38
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	431bde83 	.word	0x431bde83
 8000664:	20000098 	.word	0x20000098
 8000668:	40001000 	.word	0x40001000
 800066c:	2000000c 	.word	0x2000000c

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80006a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a4:	f000 fb24 	bl	8000cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM6_DAC_IRQHandler+0x10>)
 80006b2:	f001 fa93 	bl	8001bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000098 	.word	0x20000098

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f004 fc49 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000716:	f7ff fd83 	bl	8000220 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800071c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000728:	080051e4 	.word	0x080051e4
  ldr r2, =_sbss
 800072c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000730:	20001fb0 	.word	0x20001fb0

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>

08000736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f8de 	bl	8000902 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff ff18 	bl	800057c <HAL_InitTick>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e001      	b.n	800075c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000758:	f7ff fedc 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075c:	79fb      	ldrb	r3, [r7, #7]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000010 	.word	0x20000010
 800078c:	200000e4 	.word	0x200000e4

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff4c 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800092a:	f7ff ff61 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 800092e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff ffb1 	bl	800089c <NVIC_EncodePriority>
 800093a:	4602      	mov	r2, r0
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff80 	bl	8000848 <__NVIC_SetPriority>
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff54 	bl	800080c <__NVIC_EnableIRQ>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097a:	e17f      	b.n	8000c7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8171 	beq.w	8000c76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	2b01      	cmp	r3, #1
 800099e:	d005      	beq.n	80009ac <HAL_GPIO_Init+0x40>
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d130      	bne.n	8000a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	f003 0201 	and.w	r2, r3, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d118      	bne.n	8000a4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a20:	2201      	movs	r2, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	f003 0201 	and.w	r2, r3, #1
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d017      	beq.n	8000a88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d123      	bne.n	8000adc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	08da      	lsrs	r2, r3, #3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	220f      	movs	r2, #15
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	691a      	ldr	r2, [r3, #16]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	6939      	ldr	r1, [r7, #16]
 8000ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0203 	and.w	r2, r3, #3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 80ac 	beq.w	8000c76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <HAL_GPIO_Init+0x330>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	4a5e      	ldr	r2, [pc, #376]	; (8000c9c <HAL_GPIO_Init+0x330>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <HAL_GPIO_Init+0x330>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b36:	4a5a      	ldr	r2, [pc, #360]	; (8000ca0 <HAL_GPIO_Init+0x334>)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b60:	d025      	beq.n	8000bae <HAL_GPIO_Init+0x242>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <HAL_GPIO_Init+0x338>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d01f      	beq.n	8000baa <HAL_GPIO_Init+0x23e>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ca8 <HAL_GPIO_Init+0x33c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d019      	beq.n	8000ba6 <HAL_GPIO_Init+0x23a>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <HAL_GPIO_Init+0x340>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_GPIO_Init+0x236>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <HAL_GPIO_Init+0x344>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d00d      	beq.n	8000b9e <HAL_GPIO_Init+0x232>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4b      	ldr	r2, [pc, #300]	; (8000cb4 <HAL_GPIO_Init+0x348>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d007      	beq.n	8000b9a <HAL_GPIO_Init+0x22e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4a      	ldr	r2, [pc, #296]	; (8000cb8 <HAL_GPIO_Init+0x34c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_GPIO_Init+0x22a>
 8000b92:	2306      	movs	r3, #6
 8000b94:	e00c      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000b96:	2307      	movs	r3, #7
 8000b98:	e00a      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	e008      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e004      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e002      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <HAL_GPIO_Init+0x244>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	f002 0203 	and.w	r2, r2, #3
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	4093      	lsls	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc0:	4937      	ldr	r1, [pc, #220]	; (8000ca0 <HAL_GPIO_Init+0x334>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bce:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c1c:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <HAL_GPIO_Init+0x350>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f ae78 	bne.w	800097c <HAL_GPIO_Init+0x10>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	371c      	adds	r7, #28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48001000 	.word	0x48001000
 8000cb4:	48001400 	.word	0x48001400
 8000cb8:	48001800 	.word	0x48001800
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f806 	bl	8000d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40007000 	.word	0x40007000

08000d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d62:	d130      	bne.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d70:	d038      	beq.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2232      	movs	r2, #50	; 0x32
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d98:	e002      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dac:	d102      	bne.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f2      	bne.n	8000d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d110      	bne.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e00f      	b.n	8000de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd2:	d007      	beq.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ddc:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40007000 	.word	0x40007000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	431bde83 	.word	0x431bde83

08000e00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e3ca      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e12:	4b97      	ldr	r3, [pc, #604]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e1c:	4b94      	ldr	r3, [pc, #592]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80e4 	beq.w	8000ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4a>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	f040 808b 	bne.w	8000f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 8087 	bne.w	8000f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x62>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e3a2      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	4b82      	ldr	r3, [pc, #520]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <HAL_RCC_OscConfig+0x7c>
 8000e72:	4b7f      	ldr	r3, [pc, #508]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e7a:	e005      	b.n	8000e88 <HAL_RCC_OscConfig+0x88>
 8000e7c:	4b7c      	ldr	r3, [pc, #496]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d223      	bcs.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fd71 	bl	8001978 <RCC_SetFlashLatencyFromMSIRange>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e383      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea0:	4b73      	ldr	r3, [pc, #460]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a72      	ldr	r2, [pc, #456]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	496d      	ldr	r1, [pc, #436]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ebe:	4b6c      	ldr	r3, [pc, #432]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4968      	ldr	r1, [pc, #416]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
 8000ed2:	e025      	b.n	8000f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed4:	4b66      	ldr	r3, [pc, #408]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a65      	ldr	r2, [pc, #404]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b63      	ldr	r3, [pc, #396]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4960      	ldr	r1, [pc, #384]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef2:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	495b      	ldr	r1, [pc, #364]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fd31 	bl	8001978 <RCC_SetFlashLatencyFromMSIRange>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e343      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f20:	f000 fc4a 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b52      	ldr	r3, [pc, #328]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	4950      	ldr	r1, [pc, #320]	; (8001074 <HAL_RCC_OscConfig+0x274>)
 8000f32:	5ccb      	ldrb	r3, [r1, r3]
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_RCC_OscConfig+0x278>)
 8000f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f40:	4b4e      	ldr	r3, [pc, #312]	; (800107c <HAL_RCC_OscConfig+0x27c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fb19 	bl	800057c <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d052      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	e327      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d032      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc10 	bl	8000790 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc0c 	bl	8000790 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e310      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4931      	ldr	r1, [pc, #196]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	492c      	ldr	r1, [pc, #176]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e01a      	b.n	8000ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fbdd 	bl	8000790 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fda:	f7ff fbd9 	bl	8000790 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e2dd      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x1da>
 8000ff8:	e000      	b.n	8000ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d074      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b08      	cmp	r3, #8
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x21a>
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d10e      	bne.n	8001032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d10b      	bne.n	8001032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d064      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d160      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e2ba      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103a:	d106      	bne.n	800104a <HAL_RCC_OscConfig+0x24a>
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e026      	b.n	8001098 <HAL_RCC_OscConfig+0x298>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001052:	d115      	bne.n	8001080 <HAL_RCC_OscConfig+0x280>
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 800105a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a02      	ldr	r2, [pc, #8]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x298>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	08005194 	.word	0x08005194
 8001078:	20000008 	.word	0x20000008
 800107c:	2000000c 	.word	0x2000000c
 8001080:	4ba0      	ldr	r3, [pc, #640]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a9f      	ldr	r2, [pc, #636]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a9c      	ldr	r2, [pc, #624]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb76 	bl	8000790 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fb72 	bl	8000790 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e276      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ba:	4b92      	ldr	r3, [pc, #584]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x2a8>
 80010c6:	e014      	b.n	80010f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb62 	bl	8000790 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fb5e 	bl	8000790 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e262      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2d0>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d060      	beq.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d005      	beq.n	8001110 <HAL_RCC_OscConfig+0x310>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d119      	bne.n	800113e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d116      	bne.n	800113e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001110:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_OscConfig+0x328>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e23f      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b76      	ldr	r3, [pc, #472]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	061b      	lsls	r3, r3, #24
 8001136:	4973      	ldr	r1, [pc, #460]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113c:	e040      	b.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d023      	beq.n	800118e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001146:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fb1d 	bl	8000790 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fb19 	bl	8000790 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e21d      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116c:	4b65      	ldr	r3, [pc, #404]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	495f      	ldr	r1, [pc, #380]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	e018      	b.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5c      	ldr	r2, [pc, #368]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff faf9 	bl	8000790 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a2:	f7ff faf5 	bl	8000790 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e1f9      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03c      	beq.n	8001246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01c      	beq.n	800120e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80011d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011da:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fad4 	bl	8000790 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fad0 	bl	8000790 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1d4      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ef      	beq.n	80011ec <HAL_RCC_OscConfig+0x3ec>
 800120c:	e01b      	b.n	8001246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001214:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fab7 	bl	8000790 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fab3 	bl	8000790 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1b7      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ef      	bne.n	8001226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a6 	beq.w	80013a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10d      	bne.n	8001280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6593      	str	r3, [r2, #88]	; 0x58
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127c:	2301      	movs	r3, #1
 800127e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_RCC_OscConfig+0x508>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d118      	bne.n	80012be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_RCC_OscConfig+0x508>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x508>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001298:	f7ff fa7a 	bl	8000790 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a0:	f7ff fa76 	bl	8000790 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e17a      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x508>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4d8>
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d6:	e029      	b.n	800132c <HAL_RCC_OscConfig+0x52c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d115      	bne.n	800130c <HAL_RCC_OscConfig+0x50c>
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001300:	e014      	b.n	800132c <HAL_RCC_OscConfig+0x52c>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000
 800130c:	4b9c      	ldr	r3, [pc, #624]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	4a9b      	ldr	r2, [pc, #620]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800131c:	4b98      	ldr	r3, [pc, #608]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a97      	ldr	r2, [pc, #604]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d016      	beq.n	8001362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fa2c 	bl	8000790 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fa28 	bl	8000790 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e12a      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ed      	beq.n	800133c <HAL_RCC_OscConfig+0x53c>
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff fa15 	bl	8000790 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fa11 	bl	8000790 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e113      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001380:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ed      	bne.n	800136a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4a79      	ldr	r2, [pc, #484]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80fe 	beq.w	80015a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	f040 80d0 	bne.w	8001554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013b4:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d130      	bne.n	800142a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	3b01      	subs	r3, #1
 80013d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d127      	bne.n	800142a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d11f      	bne.n	800142a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013f4:	2a07      	cmp	r2, #7
 80013f6:	bf14      	ite	ne
 80013f8:	2201      	movne	r2, #1
 80013fa:	2200      	moveq	r2, #0
 80013fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fe:	4293      	cmp	r3, r2
 8001400:	d113      	bne.n	800142a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	3b01      	subs	r3, #1
 8001410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d109      	bne.n	800142a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d06e      	beq.n	8001508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d069      	beq.n	8001504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0ad      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800144c:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001458:	f7ff f99a 	bl	8000790 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff f996 	bl	8000790 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e09a      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_RCC_OscConfig+0x784>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800148e:	3a01      	subs	r2, #1
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	4311      	orrs	r1, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001498:	0212      	lsls	r2, r2, #8
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014a0:	0852      	lsrs	r2, r2, #1
 80014a2:	3a01      	subs	r2, #1
 80014a4:	0552      	lsls	r2, r2, #21
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014ac:	0852      	lsrs	r2, r2, #1
 80014ae:	3a01      	subs	r2, #1
 80014b0:	0652      	lsls	r2, r2, #25
 80014b2:	4311      	orrs	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014b8:	0912      	lsrs	r2, r2, #4
 80014ba:	0452      	lsls	r2, r2, #17
 80014bc:	430a      	orrs	r2, r1
 80014be:	4930      	ldr	r1, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014c4:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014dc:	f7ff f958 	bl	8000790 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f954 	bl	8000790 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e058      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001502:	e050      	b.n	80015a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e04f      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d148      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800152c:	f7ff f930 	bl	8000790 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f92c 	bl	8000790 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e030      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x734>
 8001552:	e028      	b.n	80015a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d023      	beq.n	80015a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_RCC_OscConfig+0x780>)
 8001560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7ff f913 	bl	8000790 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156c:	e00c      	b.n	8001588 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff f90f 	bl	8000790 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d905      	bls.n	8001588 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
 8001580:	40021000 	.word	0x40021000
 8001584:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x7b0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ec      	bne.n	800156e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_OscConfig+0x7b0>)
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	4905      	ldr	r1, [pc, #20]	; (80015b0 <HAL_RCC_OscConfig+0x7b0>)
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x7b4>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
 80015a0:	e001      	b.n	80015a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	feeefffc 	.word	0xfeeefffc

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0e7      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 0207 	bic.w	r2, r3, #7
 80015e2:	4970      	ldr	r1, [pc, #448]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0cf      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d010      	beq.n	800162a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001614:	429a      	cmp	r2, r3
 8001616:	d908      	bls.n	800162a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4960      	ldr	r1, [pc, #384]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d04c      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0a6      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e09a      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166e:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e08e      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e086      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b46      	ldr	r3, [pc, #280]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4943      	ldr	r1, [pc, #268]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff f876 	bl	8000790 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff f872 	bl	8000790 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e06e      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d208      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	492b      	ldr	r1, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d210      	bcs.n	800172e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 0207 	bic.w	r2, r3, #7
 8001714:	4923      	ldr	r1, [pc, #140]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_ClockConfig+0x1ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e036      	b.n	800179c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4918      	ldr	r1, [pc, #96]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4910      	ldr	r1, [pc, #64]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176c:	f000 f824 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	490b      	ldr	r1, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1f4>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1fc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fef3 	bl	800057c <HAL_InitTick>
 8001796:	4603      	mov	r3, r0
 8001798:	72fb      	strb	r3, [r7, #11]

  return status;
 800179a:	7afb      	ldrb	r3, [r7, #11]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08005194 	.word	0x08005194
 80017b0:	20000008 	.word	0x20000008
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d121      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d11e      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f8:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e005      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d102      	bne.n	8001836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	e004      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d101      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_RCC_GetSysClockFreq+0x114>)
 800183e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d134      	bne.n	80018b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0xa6>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d003      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0xac>
 800185c:	e005      	b.n	800186a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001860:	617b      	str	r3, [r7, #20]
      break;
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001866:	617b      	str	r3, [r7, #20]
      break;
 8001868:	e002      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	617b      	str	r3, [r7, #20]
      break;
 800186e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	3301      	adds	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	0e5b      	lsrs	r3, r3, #25
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	3301      	adds	r3, #1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018b0:	69bb      	ldr	r3, [r7, #24]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	080051ac 	.word	0x080051ac
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	080051a4 	.word	0x080051a4

08001914 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	220f      	movs	r2, #15
 8001922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_GetClockConfig+0x60>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0207 	and.w	r2, r3, #7
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40022000 	.word	0x40022000

08001978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001990:	f7ff f9d2 	bl	8000d38 <HAL_PWREx_GetVoltageRange>
 8001994:	6178      	str	r0, [r7, #20]
 8001996:	e014      	b.n	80019c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019b0:	f7ff f9c2 	bl	8000d38 <HAL_PWREx_GetVoltageRange>
 80019b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d10b      	bne.n	80019e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d919      	bls.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2ba0      	cmp	r3, #160	; 0xa0
 80019d4:	d902      	bls.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d6:	2302      	movs	r3, #2
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e013      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019dc:	2301      	movs	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	e010      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d902      	bls.n	80019ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019e8:	2303      	movs	r3, #3
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	e00a      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b80      	cmp	r3, #128	; 0x80
 80019f2:	d102      	bne.n	80019fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f4:	2302      	movs	r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	e004      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b70      	cmp	r3, #112	; 0x70
 80019fe:	d101      	bne.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 0207 	bic.w	r2, r3, #7
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e049      	b.n	8001ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f841 	bl	8001ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9da 	bl	8001e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e04f      	b.n	8001bb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3e:	d018      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_TIM_Base_Start_IT+0x76>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d115      	bne.n	8001b9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d015      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0xb4>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d011      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9c:	e008      	b.n	8001bb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e000      	b.n	8001bb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	40000c00 	.word	0x40000c00
 8001bd0:	40013400 	.word	0x40013400
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	00010007 	.word	0x00010007

08001bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d020      	beq.n	8001c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01b      	beq.n	8001c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0202 	mvn.w	r2, #2
 8001c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8e4 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8d6 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8e7 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d020      	beq.n	8001c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0204 	mvn.w	r2, #4
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8be 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8b0 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8c1 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d020      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0208 	mvn.w	r2, #8
 8001ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f898 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f88a 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f89b 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d020      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0210 	mvn.w	r2, #16
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f872 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f864 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f875 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fbce 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f906 	bl	8001f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8fe 	bl	8001f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f834 	bl	8001e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0220 	mvn.w	r2, #32
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8c6 	bl	8001f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <TIM_Base_SetConfig+0x114>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <TIM_Base_SetConfig+0x40>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4e:	d00f      	beq.n	8001e70 <TIM_Base_SetConfig+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3d      	ldr	r2, [pc, #244]	; (8001f48 <TIM_Base_SetConfig+0x118>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00b      	beq.n	8001e70 <TIM_Base_SetConfig+0x40>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <TIM_Base_SetConfig+0x11c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <TIM_Base_SetConfig+0x40>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3b      	ldr	r2, [pc, #236]	; (8001f50 <TIM_Base_SetConfig+0x120>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3a      	ldr	r2, [pc, #232]	; (8001f54 <TIM_Base_SetConfig+0x124>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <TIM_Base_SetConfig+0x114>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d01b      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <TIM_Base_SetConfig+0x118>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d017      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <TIM_Base_SetConfig+0x11c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <TIM_Base_SetConfig+0x120>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00f      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <TIM_Base_SetConfig+0x124>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <TIM_Base_SetConfig+0x128>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <TIM_Base_SetConfig+0x12c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <TIM_Base_SetConfig+0x9a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <TIM_Base_SetConfig+0x130>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <TIM_Base_SetConfig+0x114>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00f      	beq.n	8001f28 <TIM_Base_SetConfig+0xf8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <TIM_Base_SetConfig+0x124>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0xf8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <TIM_Base_SetConfig+0x128>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0xf8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <TIM_Base_SetConfig+0x12c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0xf8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <TIM_Base_SetConfig+0x130>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d103      	bne.n	8001f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	615a      	str	r2, [r3, #20]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40000c00 	.word	0x40000c00
 8001f54:	40013400 	.word	0x40013400
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40014400 	.word	0x40014400
 8001f60:	40014800 	.word	0x40014800

08001f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <__NVIC_SetPriority>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Handler+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ffc:	f001 ff12 	bl	8003e24 <xTaskGetSchedulerState>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002006:	f002 fcf7 	bl	80049f8 <xPortSysTickHandler>
  }
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002018:	2100      	movs	r1, #0
 800201a:	f06f 0004 	mvn.w	r0, #4
 800201e:	f7ff ffbf 	bl	8001fa0 <__NVIC_SetPriority>
#endif
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800202e:	f3ef 8305 	mrs	r3, IPSR
 8002032:	603b      	str	r3, [r7, #0]
  return(result);
 8002034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800203a:	f06f 0305 	mvn.w	r3, #5
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e00c      	b.n	800205c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <osKernelInitialize+0x44>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <osKernelInitialize+0x44>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	e002      	b.n	800205c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200000e8 	.word	0x200000e8

08002070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002076:	f3ef 8305 	mrs	r3, IPSR
 800207a:	603b      	str	r3, [r7, #0]
  return(result);
 800207c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002082:	f06f 0305 	mvn.w	r3, #5
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	e010      	b.n	80020ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <osKernelStart+0x48>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d109      	bne.n	80020a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002092:	f7ff ffbf 	bl	8002014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <osKernelStart+0x48>)
 8002098:	2202      	movs	r2, #2
 800209a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800209c:	f001 fa66 	bl	800356c <vTaskStartScheduler>
      stat = osOK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	e002      	b.n	80020ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000e8 	.word	0x200000e8

080020bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af04      	add	r7, sp, #16
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020cc:	f3ef 8305 	mrs	r3, IPSR
 80020d0:	617b      	str	r3, [r7, #20]
  return(result);
 80020d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d17e      	bne.n	80021d6 <osThreadNew+0x11a>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07b      	beq.n	80021d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020e2:	2318      	movs	r3, #24
 80020e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d045      	beq.n	8002182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <osThreadNew+0x48>
        name = attr->name;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <osThreadNew+0x6e>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b38      	cmp	r3, #56	; 0x38
 800211c:	d805      	bhi.n	800212a <osThreadNew+0x6e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <osThreadNew+0x72>
        return (NULL);
 800212a:	2300      	movs	r3, #0
 800212c:	e054      	b.n	80021d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00e      	beq.n	8002164 <osThreadNew+0xa8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2ba7      	cmp	r3, #167	; 0xa7
 800214c:	d90a      	bls.n	8002164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <osThreadNew+0xa8>
        mem = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e010      	b.n	8002186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10c      	bne.n	8002186 <osThreadNew+0xca>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <osThreadNew+0xca>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <osThreadNew+0xca>
          mem = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e001      	b.n	8002186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d110      	bne.n	80021ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002194:	9202      	str	r2, [sp, #8]
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fff6 	bl	8003194 <xTaskCreateStatic>
 80021a8:	4603      	mov	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	e013      	b.n	80021d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d110      	bne.n	80021d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 f841 	bl	800324e <xTaskCreate>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <osThreadNew+0x11a>
            hTask = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021d6:	693b      	ldr	r3, [r7, #16]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e8:	f3ef 8305 	mrs	r3, IPSR
 80021ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <osDelay+0x1c>
    stat = osErrorISR;
 80021f4:	f06f 0305 	mvn.w	r3, #5
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e007      	b.n	800220c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f97c 	bl	8003504 <vTaskDelay>
    }
  }

  return (stat);
 800220c:	68fb      	ldr	r3, [r7, #12]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002216:	b580      	push	{r7, lr}
 8002218:	b08a      	sub	sp, #40	; 0x28
 800221a:	af02      	add	r7, sp, #8
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002226:	f3ef 8305 	mrs	r3, IPSR
 800222a:	613b      	str	r3, [r7, #16]
  return(result);
 800222c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800222e:	2b00      	cmp	r3, #0
 8002230:	d15f      	bne.n	80022f2 <osMessageQueueNew+0xdc>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05c      	beq.n	80022f2 <osMessageQueueNew+0xdc>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d059      	beq.n	80022f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d029      	beq.n	800229e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d012      	beq.n	8002278 <osMessageQueueNew+0x62>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b4f      	cmp	r3, #79	; 0x4f
 8002258:	d90e      	bls.n	8002278 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <osMessageQueueNew+0x62>
        mem = 1;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	e014      	b.n	80022a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d110      	bne.n	80022a2 <osMessageQueueNew+0x8c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d108      	bne.n	80022a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e001      	b.n	80022a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10b      	bne.n	80022c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2100      	movs	r1, #0
 80022b2:	9100      	str	r1, [sp, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa2e 	bl	8002718 <xQueueGenericCreateStatic>
 80022bc:	61f8      	str	r0, [r7, #28]
 80022be:	e008      	b.n	80022d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80022c6:	2200      	movs	r2, #0
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa9c 	bl	8002808 <xQueueGenericCreate>
 80022d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e001      	b.n	80022ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	69f8      	ldr	r0, [r7, #28]
 80022ee:	f000 fef3 	bl	80030d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80022f2:	69fb      	ldr	r3, [r7, #28]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002314:	f3ef 8305 	mrs	r3, IPSR
 8002318:	617b      	str	r3, [r7, #20]
  return(result);
 800231a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800231c:	2b00      	cmp	r3, #0
 800231e:	d028      	beq.n	8002372 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <osMessageQueuePut+0x36>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <osMessageQueuePut+0x36>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002332:	f06f 0303 	mvn.w	r3, #3
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e038      	b.n	80023ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800233e:	f107 0210 	add.w	r2, r7, #16
 8002342:	2300      	movs	r3, #0
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	69b8      	ldr	r0, [r7, #24]
 8002348:	f000 fbba 	bl	8002ac0 <xQueueGenericSendFromISR>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002352:	f06f 0302 	mvn.w	r3, #2
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e028      	b.n	80023ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d025      	beq.n	80023ac <osMessageQueuePut+0xb0>
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <osMessageQueuePut+0xbc>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	e01c      	b.n	80023ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <osMessageQueuePut+0x82>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800237e:	f06f 0303 	mvn.w	r3, #3
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	e012      	b.n	80023ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002386:	2300      	movs	r3, #0
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	69b8      	ldr	r0, [r7, #24]
 800238e:	f000 fa99 	bl	80028c4 <xQueueGenericSend>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d009      	beq.n	80023ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800239e:	f06f 0301 	mvn.w	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	e002      	b.n	80023ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80023a6:	f06f 0302 	mvn.w	r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80023ac:	69fb      	ldr	r3, [r7, #28]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023d2:	f3ef 8305 	mrs	r3, IPSR
 80023d6:	617b      	str	r3, [r7, #20]
  return(result);
 80023d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d028      	beq.n	8002430 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <osMessageQueueGet+0x34>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <osMessageQueueGet+0x34>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80023f0:	f06f 0303 	mvn.w	r3, #3
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e037      	b.n	8002468 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	461a      	mov	r2, r3
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	69b8      	ldr	r0, [r7, #24]
 8002406:	f000 fcd7 	bl	8002db8 <xQueueReceiveFromISR>
 800240a:	4603      	mov	r3, r0
 800240c:	2b01      	cmp	r3, #1
 800240e:	d003      	beq.n	8002418 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002410:	f06f 0302 	mvn.w	r3, #2
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e027      	b.n	8002468 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d024      	beq.n	8002468 <osMessageQueueGet+0xac>
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <osMessageQueueGet+0xb8>)
 8002420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	e01b      	b.n	8002468 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <osMessageQueueGet+0x80>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800243c:	f06f 0303 	mvn.w	r3, #3
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e011      	b.n	8002468 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f000 fbd5 	bl	8002bf8 <xQueueReceive>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d009      	beq.n	8002468 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800245a:	f06f 0301 	mvn.w	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	e002      	b.n	8002468 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002462:	f06f 0302 	mvn.w	r3, #2
 8002466:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002468:	69fb      	ldr	r3, [r7, #28]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <vApplicationGetIdleTaskMemory+0x30>)
 800248e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200000ec 	.word	0x200000ec
 80024a8:	20000194 	.word	0x20000194

080024ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80024bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <vApplicationGetTimerTaskMemory+0x30>)
 80024c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	20000394 	.word	0x20000394
 80024dc:	2000043c 	.word	0x2000043c

080024e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0208 	add.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 0208 	add.w	r2, r3, #8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0208 	add.w	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d103      	bne.n	80025a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e00c      	b.n	80025bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3308      	adds	r3, #8
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e002      	b.n	80025b0 <vListInsert+0x2e>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d2f6      	bcs.n	80025aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6852      	ldr	r2, [r2, #4]
 8002614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d103      	bne.n	8002628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002672:	f002 f92f 	bl	80048d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	441a      	add	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	3b01      	subs	r3, #1
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	441a      	add	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d114      	bne.n	80026f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01a      	beq.n	8002706 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3310      	adds	r3, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f9e3 	bl	8003aa0 <xTaskRemoveFromEventList>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <xQueueGenericReset+0xcc>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	e009      	b.n	8002706 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3310      	adds	r3, #16
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fef2 	bl	80024e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3324      	adds	r3, #36	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff feed 	bl	80024e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002706:	f002 f915 	bl	8004934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	e000ed04 	.word	0xe000ed04

08002718 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08e      	sub	sp, #56	; 0x38
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
}
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <xQueueGenericCreateStatic+0x52>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <xQueueGenericCreateStatic+0x56>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xQueueGenericCreateStatic+0x58>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	623b      	str	r3, [r7, #32]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <xQueueGenericCreateStatic+0x7e>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <xQueueGenericCreateStatic+0x82>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericCreateStatic+0x84>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	61fb      	str	r3, [r7, #28]
}
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027b6:	2350      	movs	r3, #80	; 0x50
 80027b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d00a      	beq.n	80027d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61bb      	str	r3, [r7, #24]
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80027d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f83f 	bl	800287c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002800:	4618      	mov	r0, r3
 8002802:	3730      	adds	r7, #48	; 0x30
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericCreate+0x2a>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	613b      	str	r3, [r7, #16]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3350      	adds	r3, #80	; 0x50
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f969 	bl	8004b18 <pvPortMalloc>
 8002846:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3350      	adds	r3, #80	; 0x50
 8002856:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002860:	79fa      	ldrb	r2, [r7, #7]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f805 	bl	800287c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002872:	69bb      	ldr	r3, [r7, #24]
	}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e002      	b.n	800289e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028aa:	2101      	movs	r1, #1
 80028ac:	69b8      	ldr	r0, [r7, #24]
 80028ae:	f7ff fecb 	bl	8002648 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028d2:	2300      	movs	r3, #0
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericSend+0x32>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <xQueueGenericSend+0x40>
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <xQueueGenericSend+0x44>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <xQueueGenericSend+0x46>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <xQueueGenericSend+0x60>
	__asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d103      	bne.n	8002932 <xQueueGenericSend+0x6e>
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <xQueueGenericSend+0x72>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <xQueueGenericSend+0x74>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xQueueGenericSend+0x8e>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	623b      	str	r3, [r7, #32]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002952:	f001 fa67 	bl	8003e24 <xTaskGetSchedulerState>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <xQueueGenericSend+0x9e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <xQueueGenericSend+0xa2>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <xQueueGenericSend+0xa4>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericSend+0xbe>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61fb      	str	r3, [r7, #28]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002982:	f001 ffa7 	bl	80048d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <xQueueGenericSend+0xd4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d129      	bne.n	80029ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299e:	f000 fa8b 	bl	8002eb8 <prvCopyDataToQueue>
 80029a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	3324      	adds	r3, #36	; 0x24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 f875 	bl	8003aa0 <xTaskRemoveFromEventList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029bc:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <xQueueGenericSend+0x1f8>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	e00a      	b.n	80029e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <xQueueGenericSend+0x1f8>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029e4:	f001 ffa6 	bl	8004934 <vPortExitCritical>
				return pdPASS;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e063      	b.n	8002ab4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029f2:	f001 ff9f 	bl	8004934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e05c      	b.n	8002ab4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f8af 	bl	8003b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a0e:	f001 ff91 	bl	8004934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a12:	f000 fe1b 	bl	800364c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a16:	f001 ff5d 	bl	80048d4 <vPortEnterCritical>
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <xQueueGenericSend+0x16c>
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d103      	bne.n	8002a46 <xQueueGenericSend+0x182>
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a46:	f001 ff75 	bl	8004934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a4a:	1d3a      	adds	r2, r7, #4
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f89e 	bl	8003b94 <xTaskCheckForTimeOut>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d124      	bne.n	8002aa8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a60:	f000 fb22 	bl	80030a8 <prvIsQueueFull>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 ffc4 	bl	8003a00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a7a:	f000 faad 	bl	8002fd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a7e:	f000 fdf3 	bl	8003668 <xTaskResumeAll>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f47f af7c 	bne.w	8002982 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <xQueueGenericSend+0x1f8>)
 8002a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	e772      	b.n	8002982 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9e:	f000 fa9b 	bl	8002fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aa2:	f000 fde1 	bl	8003668 <xTaskResumeAll>
 8002aa6:	e76c      	b.n	8002982 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aaa:	f000 fa95 	bl	8002fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aae:	f000 fddb 	bl	8003668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ab2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3738      	adds	r7, #56	; 0x38
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b090      	sub	sp, #64	; 0x40
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <xQueueGenericSendFromISR+0x3c>
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueGenericSendFromISR+0x40>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <xQueueGenericSendFromISR+0x42>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d103      	bne.n	8002b2a <xQueueGenericSendFromISR+0x6a>
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <xQueueGenericSendFromISR+0x6e>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericSendFromISR+0x70>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b4a:	f001 ffa5 	bl	8004a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b4e:	f3ef 8211 	mrs	r2, BASEPRI
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	61fa      	str	r2, [r7, #28]
 8002b64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <xQueueGenericSendFromISR+0xbc>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d12f      	bne.n	8002bdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b92:	f000 f991 	bl	8002eb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d112      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d016      	beq.n	8002bd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	3324      	adds	r3, #36	; 0x24
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 ff77 	bl	8003aa0 <xTaskRemoveFromEventList>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e007      	b.n	8002bd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	b25a      	sxtb	r2, r3
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002bda:	e001      	b.n	8002be0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3740      	adds	r7, #64	; 0x40
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <xQueueReceive+0x30>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	623b      	str	r3, [r7, #32]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <xQueueReceive+0x3e>
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <xQueueReceive+0x42>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueReceive+0x44>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueReceive+0x5e>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	61fb      	str	r3, [r7, #28]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c56:	f001 f8e5 	bl	8003e24 <xTaskGetSchedulerState>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <xQueueReceive+0x6e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueReceive+0x72>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueReceive+0x74>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueReceive+0x8e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61bb      	str	r3, [r7, #24]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c86:	f001 fe25 	bl	80048d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01f      	beq.n	8002cd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9a:	f000 f977 	bl	8002f8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00f      	beq.n	8002cce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fef4 	bl	8003aa0 <xTaskRemoveFromEventList>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <xQueueReceive+0x1bc>)
 8002cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cce:	f001 fe31 	bl	8004934 <vPortExitCritical>
				return pdPASS;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e069      	b.n	8002daa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cdc:	f001 fe2a 	bl	8004934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e062      	b.n	8002daa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 ff3a 	bl	8003b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cf8:	f001 fe1c 	bl	8004934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cfc:	f000 fca6 	bl	800364c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d00:	f001 fde8 	bl	80048d4 <vPortEnterCritical>
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d103      	bne.n	8002d1a <xQueueReceive+0x122>
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d103      	bne.n	8002d30 <xQueueReceive+0x138>
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d30:	f001 fe00 	bl	8004934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d34:	1d3a      	adds	r2, r7, #4
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ff29 	bl	8003b94 <xTaskCheckForTimeOut>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d123      	bne.n	8002d90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f997 	bl	800307c <prvIsQueueEmpty>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fe4f 	bl	8003a00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d64:	f000 f938 	bl	8002fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d68:	f000 fc7e 	bl	8003668 <xTaskResumeAll>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d189      	bne.n	8002c86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <xQueueReceive+0x1bc>)
 8002d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	e780      	b.n	8002c86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d86:	f000 f927 	bl	8002fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d8a:	f000 fc6d 	bl	8003668 <xTaskResumeAll>
 8002d8e:	e77a      	b.n	8002c86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d92:	f000 f921 	bl	8002fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d96:	f000 fc67 	bl	8003668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9c:	f000 f96e 	bl	800307c <prvIsQueueEmpty>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f43f af6f 	beq.w	8002c86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002da8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	623b      	str	r3, [r7, #32]
}
 8002de0:	bf00      	nop
 8002de2:	e7fe      	b.n	8002de2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <xQueueReceiveFromISR+0x3a>
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <xQueueReceiveFromISR+0x3e>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <xQueueReceiveFromISR+0x40>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61fb      	str	r3, [r7, #28]
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e12:	f001 fe41 	bl	8004a98 <vPortValidateInterruptPriority>
	__asm volatile
 8002e16:	f3ef 8211 	mrs	r2, BASEPRI
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	61ba      	str	r2, [r7, #24]
 8002e2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002e2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02f      	beq.n	8002e9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4c:	f000 f89e 	bl	8002f8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d112      	bne.n	8002e88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fe16 	bl	8003aa0 <xTaskRemoveFromEventList>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00e      	beq.n	8002e98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e007      	b.n	8002e98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	b25a      	sxtb	r2, r3
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9c:	e001      	b.n	8002ea2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
}
 8002eac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3738      	adds	r7, #56	; 0x38
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d14d      	bne.n	8002f7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffbc 	bl	8003e60 <xTaskPriorityDisinherit>
 8002ee8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e043      	b.n	8002f7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d119      	bne.n	8002f2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6858      	ldr	r0, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	461a      	mov	r2, r3
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	f002 f876 	bl	8004ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	441a      	add	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d32b      	bcc.n	8002f7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e026      	b.n	8002f7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68d8      	ldr	r0, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	461a      	mov	r2, r3
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	f002 f85c 	bl	8004ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	425b      	negs	r3, r3
 8002f46:	441a      	add	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d207      	bcs.n	8002f68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	425b      	negs	r3, r3
 8002f62:	441a      	add	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d105      	bne.n	8002f7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f82:	697b      	ldr	r3, [r7, #20]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d303      	bcc.n	8002fc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	f002 f812 	bl	8004ff4 <memcpy>
	}
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fe0:	f001 fc78 	bl	80048d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fec:	e011      	b.n	8003012 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3324      	adds	r3, #36	; 0x24
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fd50 	bl	8003aa0 <xTaskRemoveFromEventList>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003006:	f000 fe27 	bl	8003c58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	3b01      	subs	r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	dce9      	bgt.n	8002fee <prvUnlockQueue+0x16>
 800301a:	e000      	b.n	800301e <prvUnlockQueue+0x46>
					break;
 800301c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003026:	f001 fc85 	bl	8004934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800302a:	f001 fc53 	bl	80048d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003034:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003036:	e011      	b.n	800305c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3310      	adds	r3, #16
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd2b 	bl	8003aa0 <xTaskRemoveFromEventList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003050:	f000 fe02 	bl	8003c58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003054:	7bbb      	ldrb	r3, [r7, #14]
 8003056:	3b01      	subs	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800305c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003060:	2b00      	cmp	r3, #0
 8003062:	dce9      	bgt.n	8003038 <prvUnlockQueue+0x60>
 8003064:	e000      	b.n	8003068 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003066:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	22ff      	movs	r2, #255	; 0xff
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003070:	f001 fc60 	bl	8004934 <vPortExitCritical>
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003084:	f001 fc26 	bl	80048d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e001      	b.n	800309a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800309a:	f001 fc4b 	bl	8004934 <vPortExitCritical>

	return xReturn;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030b0:	f001 fc10 	bl	80048d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d102      	bne.n	80030c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e001      	b.n	80030ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ca:	f001 fc33 	bl	8004934 <vPortExitCritical>

	return xReturn;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e014      	b.n	8003112 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <vQueueAddToRegistry+0x50>)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <vQueueAddToRegistry+0x50>)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <vQueueAddToRegistry+0x50>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800310a:	e006      	b.n	800311a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3301      	adds	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b07      	cmp	r3, #7
 8003116:	d9e7      	bls.n	80030e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000083c 	.word	0x2000083c

0800312c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800313c:	f001 fbca 	bl	80048d4 <vPortEnterCritical>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003146:	b25b      	sxtb	r3, r3
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d103      	bne.n	8003156 <vQueueWaitForMessageRestricted+0x2a>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315c:	b25b      	sxtb	r3, r3
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d103      	bne.n	800316c <vQueueWaitForMessageRestricted+0x40>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800316c:	f001 fbe2 	bl	8004934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fc61 	bl	8003a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff26 	bl	8002fd8 <prvUnlockQueue>
	}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af04      	add	r7, sp, #16
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <xTaskCreateStatic+0x2a>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	623b      	str	r3, [r7, #32]
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <xTaskCreateStatic+0x46>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61fb      	str	r3, [r7, #28]
}
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031da:	23a8      	movs	r3, #168	; 0xa8
 80031dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2ba8      	cmp	r3, #168	; 0xa8
 80031e2:	d00a      	beq.n	80031fa <xTaskCreateStatic+0x66>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61bb      	str	r3, [r7, #24]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01e      	beq.n	8003240 <xTaskCreateStatic+0xac>
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01b      	beq.n	8003240 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2202      	movs	r2, #2
 8003216:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800321a:	2300      	movs	r3, #0
 800321c:	9303      	str	r3, [sp, #12]
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9302      	str	r3, [sp, #8]
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f850 	bl	80032d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800323a:	f000 f8f3 	bl	8003424 <prvAddNewTaskToReadyList>
 800323e:	e001      	b.n	8003244 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003244:	697b      	ldr	r3, [r7, #20]
	}
 8003246:	4618      	mov	r0, r3
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08c      	sub	sp, #48	; 0x30
 8003252:	af04      	add	r7, sp, #16
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f001 fc58 	bl	8004b18 <pvPortMalloc>
 8003268:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003270:	20a8      	movs	r0, #168	; 0xa8
 8003272:	f001 fc51 	bl	8004b18 <pvPortMalloc>
 8003276:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
 8003284:	e005      	b.n	8003292 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f001 fd12 	bl	8004cb0 <vPortFree>
 800328c:	e001      	b.n	8003292 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d017      	beq.n	80032c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9303      	str	r3, [sp, #12]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f80e 	bl	80032d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032bc:	69f8      	ldr	r0, [r7, #28]
 80032be:	f000 f8b1 	bl	8003424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e002      	b.n	80032ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032ce:	69bb      	ldr	r3, [r7, #24]
	}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	21a5      	movs	r1, #165	; 0xa5
 80032f2:	f001 fdfb 	bl	8004eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003300:	3b01      	subs	r3, #1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f023 0307 	bic.w	r3, r3, #7
 800330e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <prvInitialiseNewTask+0x58>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	617b      	str	r3, [r7, #20]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01f      	beq.n	8003376 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e012      	b.n	8003362 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	7819      	ldrb	r1, [r3, #0]
 8003344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	3334      	adds	r3, #52	; 0x34
 800334c:	460a      	mov	r2, r1
 800334e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3301      	adds	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d9e9      	bls.n	800333c <prvInitialiseNewTask+0x64>
 8003368:	e000      	b.n	800336c <prvInitialiseNewTask+0x94>
			{
				break;
 800336a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	e003      	b.n	800337e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	2b37      	cmp	r3, #55	; 0x37
 8003382:	d901      	bls.n	8003388 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003384:	2337      	movs	r3, #55	; 0x37
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003392:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f8be 	bl	8002520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	3318      	adds	r3, #24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f8b9 	bl	8002520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	3354      	adds	r3, #84	; 0x54
 80033d8:	224c      	movs	r2, #76	; 0x4c
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fd85 	bl	8004eec <memset>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <prvInitialiseNewTask+0x140>)
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <prvInitialiseNewTask+0x144>)
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <prvInitialiseNewTask+0x148>)
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	69b8      	ldr	r0, [r7, #24]
 80033fa:	f001 f941 	bl	8004680 <pxPortInitialiseStack>
 80033fe:	4602      	mov	r2, r0
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20001e70 	.word	0x20001e70
 800341c:	20001ed8 	.word	0x20001ed8
 8003420:	20001f40 	.word	0x20001f40

08003424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800342c:	f001 fa52 	bl	80048d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <prvAddNewTaskToReadyList+0xc4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <prvAddNewTaskToReadyList+0xc4>)
 8003438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <prvAddNewTaskToReadyList+0xc8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003442:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <prvAddNewTaskToReadyList+0xc8>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <prvAddNewTaskToReadyList+0xc4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d110      	bne.n	8003472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003450:	f000 fc26 	bl	8003ca0 <prvInitialiseTaskLists>
 8003454:	e00d      	b.n	8003472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <prvAddNewTaskToReadyList+0xcc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <prvAddNewTaskToReadyList+0xc8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d802      	bhi.n	8003472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <prvAddNewTaskToReadyList+0xc8>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <prvAddNewTaskToReadyList+0xd0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <prvAddNewTaskToReadyList+0xd0>)
 800347a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <prvAddNewTaskToReadyList+0xd0>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <prvAddNewTaskToReadyList+0xd4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <prvAddNewTaskToReadyList+0x74>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <prvAddNewTaskToReadyList+0xd4>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <prvAddNewTaskToReadyList+0xd8>)
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7ff f843 	bl	800253a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b4:	f001 fa3e 	bl	8004934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <prvAddNewTaskToReadyList+0xcc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <prvAddNewTaskToReadyList+0xc8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d207      	bcs.n	80034de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <prvAddNewTaskToReadyList+0xdc>)
 80034d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000d50 	.word	0x20000d50
 80034ec:	2000087c 	.word	0x2000087c
 80034f0:	20000d5c 	.word	0x20000d5c
 80034f4:	20000d6c 	.word	0x20000d6c
 80034f8:	20000d58 	.word	0x20000d58
 80034fc:	20000880 	.word	0x20000880
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <vTaskDelay+0x60>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <vTaskDelay+0x30>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
}
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003534:	f000 f88a 	bl	800364c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003538:	2100      	movs	r1, #0
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fcfe 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003540:	f000 f892 	bl	8003668 <xTaskResumeAll>
 8003544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <vTaskDelay+0x64>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000d78 	.word	0x20000d78
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800357a:	463a      	mov	r2, r7
 800357c:	1d39      	adds	r1, r7, #4
 800357e:	f107 0308 	add.w	r3, r7, #8
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff78 	bl	8002478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	9202      	str	r2, [sp, #8]
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2300      	movs	r3, #0
 8003598:	460a      	mov	r2, r1
 800359a:	4924      	ldr	r1, [pc, #144]	; (800362c <vTaskStartScheduler+0xc0>)
 800359c:	4824      	ldr	r0, [pc, #144]	; (8003630 <vTaskStartScheduler+0xc4>)
 800359e:	f7ff fdf9 	bl	8003194 <xTaskCreateStatic>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <vTaskStartScheduler+0xc8>)
 80035a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <vTaskStartScheduler+0xc8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035b0:	2301      	movs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e001      	b.n	80035ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035c0:	f000 fd10 	bl	8003fe4 <xTimerCreateTimerTask>
 80035c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d11b      	bne.n	8003604 <vTaskStartScheduler+0x98>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	613b      	str	r3, [r7, #16]
}
 80035de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <vTaskStartScheduler+0xcc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3354      	adds	r3, #84	; 0x54
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <vTaskStartScheduler+0xd0>)
 80035e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <vTaskStartScheduler+0xd4>)
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <vTaskStartScheduler+0xd8>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <vTaskStartScheduler+0xdc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035fe:	f001 f8c7 	bl	8004790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003602:	e00e      	b.n	8003622 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d10a      	bne.n	8003622 <vTaskStartScheduler+0xb6>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60fb      	str	r3, [r7, #12]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <vTaskStartScheduler+0xb4>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	080050f8 	.word	0x080050f8
 8003630:	08003c71 	.word	0x08003c71
 8003634:	20000d74 	.word	0x20000d74
 8003638:	2000087c 	.word	0x2000087c
 800363c:	20000064 	.word	0x20000064
 8003640:	20000d70 	.word	0x20000d70
 8003644:	20000d5c 	.word	0x20000d5c
 8003648:	20000d54 	.word	0x20000d54

0800364c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <vTaskSuspendAll+0x18>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a03      	ldr	r2, [pc, #12]	; (8003664 <vTaskSuspendAll+0x18>)
 8003658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20000d78 	.word	0x20000d78

08003668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <xTaskResumeAll+0x118>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <xTaskResumeAll+0x2c>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	603b      	str	r3, [r7, #0]
}
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003694:	f001 f91e 	bl	80048d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003698:	4b39      	ldr	r3, [pc, #228]	; (8003780 <xTaskResumeAll+0x118>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	4a38      	ldr	r2, [pc, #224]	; (8003780 <xTaskResumeAll+0x118>)
 80036a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <xTaskResumeAll+0x118>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d162      	bne.n	8003770 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <xTaskResumeAll+0x11c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d05e      	beq.n	8003770 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b2:	e02f      	b.n	8003714 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b4:	4b34      	ldr	r3, [pc, #208]	; (8003788 <xTaskResumeAll+0x120>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3318      	adds	r3, #24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe ff97 	bl	80025f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe ff92 	bl	80025f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <xTaskResumeAll+0x124>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d903      	bls.n	80036e4 <xTaskResumeAll+0x7c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <xTaskResumeAll+0x124>)
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <xTaskResumeAll+0x128>)
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f7fe ff1d 	bl	800253a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <xTaskResumeAll+0x12c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800370e:	4b22      	ldr	r3, [pc, #136]	; (8003798 <xTaskResumeAll+0x130>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <xTaskResumeAll+0x120>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1cb      	bne.n	80036b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003722:	f000 fb5f 	bl	8003de4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <xTaskResumeAll+0x134>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003732:	f000 f847 	bl	80037c4 <xTaskIncrementTick>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <xTaskResumeAll+0x130>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3b01      	subs	r3, #1
 8003746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f1      	bne.n	8003732 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <xTaskResumeAll+0x134>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <xTaskResumeAll+0x130>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <xTaskResumeAll+0x138>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003770:	f001 f8e0 	bl	8004934 <vPortExitCritical>

	return xAlreadyYielded;
 8003774:	68bb      	ldr	r3, [r7, #8]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000d78 	.word	0x20000d78
 8003784:	20000d50 	.word	0x20000d50
 8003788:	20000d10 	.word	0x20000d10
 800378c:	20000d58 	.word	0x20000d58
 8003790:	20000880 	.word	0x20000880
 8003794:	2000087c 	.word	0x2000087c
 8003798:	20000d64 	.word	0x20000d64
 800379c:	20000d60 	.word	0x20000d60
 80037a0:	e000ed04 	.word	0xe000ed04

080037a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <xTaskGetTickCount+0x1c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000d54 	.word	0x20000d54

080037c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ce:	4b4f      	ldr	r3, [pc, #316]	; (800390c <xTaskIncrementTick+0x148>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 808f 	bne.w	80038f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <xTaskIncrementTick+0x14c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037e0:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <xTaskIncrementTick+0x14c>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d120      	bne.n	800382e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037ec:	4b49      	ldr	r3, [pc, #292]	; (8003914 <xTaskIncrementTick+0x150>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <xTaskIncrementTick+0x48>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	603b      	str	r3, [r7, #0]
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xTaskIncrementTick+0x46>
 800380c:	4b41      	ldr	r3, [pc, #260]	; (8003914 <xTaskIncrementTick+0x150>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <xTaskIncrementTick+0x154>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <xTaskIncrementTick+0x150>)
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <xTaskIncrementTick+0x154>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <xTaskIncrementTick+0x158>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <xTaskIncrementTick+0x158>)
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	f000 fadb 	bl	8003de4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800382e:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d349      	bcc.n	80038cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <xTaskIncrementTick+0x150>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	601a      	str	r2, [r3, #0]
					break;
 800384a:	e03f      	b.n	80038cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <xTaskIncrementTick+0x150>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d203      	bcs.n	800386c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003864:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800386a:	e02f      	b.n	80038cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3304      	adds	r3, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe febf 	bl	80025f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3318      	adds	r3, #24
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe feb6 	bl	80025f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <xTaskIncrementTick+0x160>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d903      	bls.n	800389c <xTaskIncrementTick+0xd8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4a22      	ldr	r2, [pc, #136]	; (8003924 <xTaskIncrementTick+0x160>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <xTaskIncrementTick+0x164>)
 80038aa:	441a      	add	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fe fe41 	bl	800253a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <xTaskIncrementTick+0x168>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3b8      	bcc.n	8003838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ca:	e7b5      	b.n	8003838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <xTaskIncrementTick+0x168>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d2:	4915      	ldr	r1, [pc, #84]	; (8003928 <xTaskIncrementTick+0x164>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d901      	bls.n	80038e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <xTaskIncrementTick+0x16c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e004      	b.n	8003900 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <xTaskIncrementTick+0x170>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <xTaskIncrementTick+0x170>)
 80038fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003900:	697b      	ldr	r3, [r7, #20]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000d78 	.word	0x20000d78
 8003910:	20000d54 	.word	0x20000d54
 8003914:	20000d08 	.word	0x20000d08
 8003918:	20000d0c 	.word	0x20000d0c
 800391c:	20000d68 	.word	0x20000d68
 8003920:	20000d70 	.word	0x20000d70
 8003924:	20000d58 	.word	0x20000d58
 8003928:	20000880 	.word	0x20000880
 800392c:	2000087c 	.word	0x2000087c
 8003930:	20000d64 	.word	0x20000d64
 8003934:	20000d60 	.word	0x20000d60

08003938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <vTaskSwitchContext+0xb0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <vTaskSwitchContext+0xb4>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800394c:	e046      	b.n	80039dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <vTaskSwitchContext+0xb4>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <vTaskSwitchContext+0xb8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e010      	b.n	800397e <vTaskSwitchContext+0x46>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <vTaskSwitchContext+0x40>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	607b      	str	r3, [r7, #4]
}
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <vTaskSwitchContext+0x3e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b01      	subs	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	491d      	ldr	r1, [pc, #116]	; (80039f4 <vTaskSwitchContext+0xbc>)
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0e4      	beq.n	800395c <vTaskSwitchContext+0x24>
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <vTaskSwitchContext+0xbc>)
 800399e:	4413      	add	r3, r2
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3308      	adds	r3, #8
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d104      	bne.n	80039c2 <vTaskSwitchContext+0x8a>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <vTaskSwitchContext+0xc0>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <vTaskSwitchContext+0xb8>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <vTaskSwitchContext+0xc0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3354      	adds	r3, #84	; 0x54
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <vTaskSwitchContext+0xc4>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000d78 	.word	0x20000d78
 80039ec:	20000d64 	.word	0x20000d64
 80039f0:	20000d58 	.word	0x20000d58
 80039f4:	20000880 	.word	0x20000880
 80039f8:	2000087c 	.word	0x2000087c
 80039fc:	20000064 	.word	0x20000064

08003a00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60fb      	str	r3, [r7, #12]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <vTaskPlaceOnEventList+0x44>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe fda7 	bl	8002582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a34:	2101      	movs	r1, #1
 8003a36:	6838      	ldr	r0, [r7, #0]
 8003a38:	f000 fa80 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000087c 	.word	0x2000087c

08003a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	617b      	str	r3, [r7, #20]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3318      	adds	r3, #24
 8003a76:	4619      	mov	r1, r3
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7fe fd5e 	bl	800253a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68b8      	ldr	r0, [r7, #8]
 8003a8e:	f000 fa55 	bl	8003f3c <prvAddCurrentTaskToDelayedList>
	}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000087c 	.word	0x2000087c

08003aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	60fb      	str	r3, [r7, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fd8f 	bl	80025f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <xTaskRemoveFromEventList+0xb0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11d      	bne.n	8003b1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fd86 	bl	80025f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <xTaskRemoveFromEventList+0xb4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d903      	bls.n	8003afc <xTaskRemoveFromEventList+0x5c>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <xTaskRemoveFromEventList+0xb4>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <xTaskRemoveFromEventList+0xb8>)
 8003b0a:	441a      	add	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f7fe fd11 	bl	800253a <vListInsertEnd>
 8003b18:	e005      	b.n	8003b26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3318      	adds	r3, #24
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480e      	ldr	r0, [pc, #56]	; (8003b5c <xTaskRemoveFromEventList+0xbc>)
 8003b22:	f7fe fd0a 	bl	800253a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <xTaskRemoveFromEventList+0xc0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d905      	bls.n	8003b40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <xTaskRemoveFromEventList+0xc4>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e001      	b.n	8003b44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b44:	697b      	ldr	r3, [r7, #20]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000d78 	.word	0x20000d78
 8003b54:	20000d58 	.word	0x20000d58
 8003b58:	20000880 	.word	0x20000880
 8003b5c:	20000d10 	.word	0x20000d10
 8003b60:	2000087c 	.word	0x2000087c
 8003b64:	20000d64 	.word	0x20000d64

08003b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <vTaskInternalSetTimeOutState+0x24>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <vTaskInternalSetTimeOutState+0x28>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20000d68 	.word	0x20000d68
 8003b90:	20000d54 	.word	0x20000d54

08003b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	613b      	str	r3, [r7, #16]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60fb      	str	r3, [r7, #12]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bd6:	f000 fe7d 	bl	80048d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <xTaskCheckForTimeOut+0xbc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d102      	bne.n	8003bfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	e023      	b.n	8003c42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <xTaskCheckForTimeOut+0xc0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d007      	beq.n	8003c16 <xTaskCheckForTimeOut+0x82>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d302      	bcc.n	8003c16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e015      	b.n	8003c42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d20b      	bcs.n	8003c38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff9b 	bl	8003b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e004      	b.n	8003c42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c42:	f000 fe77 	bl	8004934 <vPortExitCritical>

	return xReturn;
 8003c46:	69fb      	ldr	r3, [r7, #28]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000d54 	.word	0x20000d54
 8003c54:	20000d68 	.word	0x20000d68

08003c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <vTaskMissedYield+0x14>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000d64 	.word	0x20000d64

08003c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c78:	f000 f852 	bl	8003d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <prvIdleTask+0x28>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d9f9      	bls.n	8003c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <prvIdleTask+0x2c>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c94:	e7f0      	b.n	8003c78 <prvIdleTask+0x8>
 8003c96:	bf00      	nop
 8003c98:	20000880 	.word	0x20000880
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	e00c      	b.n	8003cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <prvInitialiseTaskLists+0x60>)
 8003cb8:	4413      	add	r3, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fc10 	bl	80024e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b37      	cmp	r3, #55	; 0x37
 8003cca:	d9ef      	bls.n	8003cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ccc:	480d      	ldr	r0, [pc, #52]	; (8003d04 <prvInitialiseTaskLists+0x64>)
 8003cce:	f7fe fc07 	bl	80024e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cd2:	480d      	ldr	r0, [pc, #52]	; (8003d08 <prvInitialiseTaskLists+0x68>)
 8003cd4:	f7fe fc04 	bl	80024e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cd8:	480c      	ldr	r0, [pc, #48]	; (8003d0c <prvInitialiseTaskLists+0x6c>)
 8003cda:	f7fe fc01 	bl	80024e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cde:	480c      	ldr	r0, [pc, #48]	; (8003d10 <prvInitialiseTaskLists+0x70>)
 8003ce0:	f7fe fbfe 	bl	80024e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <prvInitialiseTaskLists+0x74>)
 8003ce6:	f7fe fbfb 	bl	80024e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <prvInitialiseTaskLists+0x78>)
 8003cec:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <prvInitialiseTaskLists+0x64>)
 8003cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <prvInitialiseTaskLists+0x7c>)
 8003cf2:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <prvInitialiseTaskLists+0x68>)
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000880 	.word	0x20000880
 8003d04:	20000ce0 	.word	0x20000ce0
 8003d08:	20000cf4 	.word	0x20000cf4
 8003d0c:	20000d10 	.word	0x20000d10
 8003d10:	20000d24 	.word	0x20000d24
 8003d14:	20000d3c 	.word	0x20000d3c
 8003d18:	20000d08 	.word	0x20000d08
 8003d1c:	20000d0c 	.word	0x20000d0c

08003d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d26:	e019      	b.n	8003d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d28:	f000 fdd4 	bl	80048d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <prvCheckTasksWaitingTermination+0x50>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fc5b 	bl	80025f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <prvCheckTasksWaitingTermination+0x54>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <prvCheckTasksWaitingTermination+0x54>)
 8003d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <prvCheckTasksWaitingTermination+0x58>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <prvCheckTasksWaitingTermination+0x58>)
 8003d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d52:	f000 fdef 	bl	8004934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f810 	bl	8003d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <prvCheckTasksWaitingTermination+0x58>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e1      	bne.n	8003d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000d24 	.word	0x20000d24
 8003d74:	20000d50 	.word	0x20000d50
 8003d78:	20000d38 	.word	0x20000d38

08003d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3354      	adds	r3, #84	; 0x54
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f8b7 	bl	8004efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ff87 	bl	8004cb0 <vPortFree>
				vPortFree( pxTCB );
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 ff84 	bl	8004cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003da8:	e018      	b.n	8003ddc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d103      	bne.n	8003dbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 ff7b 	bl	8004cb0 <vPortFree>
	}
 8003dba:	e00f      	b.n	8003ddc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d00a      	beq.n	8003ddc <prvDeleteTCB+0x60>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <prvDeleteTCB+0x5e>
	}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <prvResetNextTaskUnblockTime+0x38>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvResetNextTaskUnblockTime+0x3c>)
 8003df6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dfc:	e008      	b.n	8003e10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <prvResetNextTaskUnblockTime+0x38>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <prvResetNextTaskUnblockTime+0x3c>)
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	20000d08 	.word	0x20000d08
 8003e20:	20000d70 	.word	0x20000d70

08003e24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <xTaskGetSchedulerState+0x34>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e32:	2301      	movs	r3, #1
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e008      	b.n	8003e4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <xTaskGetSchedulerState+0x38>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e40:	2302      	movs	r3, #2
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	e001      	b.n	8003e4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e4a:	687b      	ldr	r3, [r7, #4]
	}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000d5c 	.word	0x20000d5c
 8003e5c:	20000d78 	.word	0x20000d78

08003e60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d056      	beq.n	8003f24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <xTaskPriorityDisinherit+0xd0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d00a      	beq.n	8003e96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	60bb      	str	r3, [r7, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d02c      	beq.n	8003f24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d128      	bne.n	8003f24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fb8c 	bl	80025f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <xTaskPriorityDisinherit+0xd4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d903      	bls.n	8003f04 <xTaskPriorityDisinherit+0xa4>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <xTaskPriorityDisinherit+0xd4>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <xTaskPriorityDisinherit+0xd8>)
 8003f12:	441a      	add	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fe fb0d 	bl	800253a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f24:	697b      	ldr	r3, [r7, #20]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000087c 	.word	0x2000087c
 8003f34:	20000d58 	.word	0x20000d58
 8003f38:	20000880 	.word	0x20000880

08003f3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x90>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fb4e 	bl	80025f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d10a      	bne.n	8003f76 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4819      	ldr	r0, [pc, #100]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f70:	f7fe fae3 	bl	800253a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f74:	e026      	b.n	8003fc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d209      	bcs.n	8003fa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f7fe faf1 	bl	8002582 <vListInsert>
}
 8003fa0:	e010      	b.n	8003fc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7fe fae7 	bl	8002582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d202      	bcs.n	8003fc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000d54 	.word	0x20000d54
 8003fd0:	2000087c 	.word	0x2000087c
 8003fd4:	20000d3c 	.word	0x20000d3c
 8003fd8:	20000d0c 	.word	0x20000d0c
 8003fdc:	20000d08 	.word	0x20000d08
 8003fe0:	20000d70 	.word	0x20000d70

08003fe4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fee:	f000 fb07 	bl	8004600 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <xTimerCreateTimerTask+0x80>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004002:	1d3a      	adds	r2, r7, #4
 8004004:	f107 0108 	add.w	r1, r7, #8
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fa4d 	bl	80024ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	9202      	str	r2, [sp, #8]
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	2302      	movs	r3, #2
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	460a      	mov	r2, r1
 8004024:	4910      	ldr	r1, [pc, #64]	; (8004068 <xTimerCreateTimerTask+0x84>)
 8004026:	4811      	ldr	r0, [pc, #68]	; (800406c <xTimerCreateTimerTask+0x88>)
 8004028:	f7ff f8b4 	bl	8003194 <xTaskCreateStatic>
 800402c:	4603      	mov	r3, r0
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <xTimerCreateTimerTask+0x8c>)
 8004030:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xTimerCreateTimerTask+0x8c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	613b      	str	r3, [r7, #16]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800405a:	697b      	ldr	r3, [r7, #20]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000dac 	.word	0x20000dac
 8004068:	08005100 	.word	0x08005100
 800406c:	080041a9 	.word	0x080041a9
 8004070:	20000db0 	.word	0x20000db0

08004074 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	623b      	str	r3, [r7, #32]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <xTimerGenericCommand+0x98>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02a      	beq.n	8004100 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	dc18      	bgt.n	80040ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040bc:	f7ff feb2 	bl	8003e24 <xTaskGetSchedulerState>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d109      	bne.n	80040da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <xTimerGenericCommand+0x98>)
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f107 0110 	add.w	r1, r7, #16
 80040ce:	2300      	movs	r3, #0
 80040d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d2:	f7fe fbf7 	bl	80028c4 <xQueueGenericSend>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24
 80040d8:	e012      	b.n	8004100 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <xTimerGenericCommand+0x98>)
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f107 0110 	add.w	r1, r7, #16
 80040e2:	2300      	movs	r3, #0
 80040e4:	2200      	movs	r2, #0
 80040e6:	f7fe fbed 	bl	80028c4 <xQueueGenericSend>
 80040ea:	6278      	str	r0, [r7, #36]	; 0x24
 80040ec:	e008      	b.n	8004100 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <xTimerGenericCommand+0x98>)
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	f107 0110 	add.w	r1, r7, #16
 80040f6:	2300      	movs	r3, #0
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	f7fe fce1 	bl	8002ac0 <xQueueGenericSendFromISR>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004102:	4618      	mov	r0, r3
 8004104:	3728      	adds	r7, #40	; 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000dac 	.word	0x20000dac

08004110 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <prvProcessExpiredTimer+0x94>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3304      	adds	r3, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fa63 	bl	80025f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d022      	beq.n	8004182 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	18d1      	adds	r1, r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f000 f8d1 	bl	80042f0 <prvInsertTimerInActiveList>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01f      	beq.n	8004194 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	2100      	movs	r1, #0
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff88 	bl	8004074 <xTimerGenericCommand>
 8004164:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d113      	bne.n	8004194 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	6978      	ldr	r0, [r7, #20]
 800419a:	4798      	blx	r3
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000da4 	.word	0x20000da4

080041a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f857 	bl	8004268 <prvGetNextExpireTime>
 80041ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f803 	bl	80041cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041c6:	f000 f8d5 	bl	8004374 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ca:	e7f1      	b.n	80041b0 <prvTimerTask+0x8>

080041cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041d6:	f7ff fa39 	bl	800364c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f866 	bl	80042b0 <prvSampleTimeNow>
 80041e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d130      	bne.n	800424e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <prvProcessTimerOrBlockTask+0x3c>
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d806      	bhi.n	8004208 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041fa:	f7ff fa35 	bl	8003668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff85 	bl	8004110 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004206:	e024      	b.n	8004252 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <prvProcessTimerOrBlockTask+0x90>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <prvProcessTimerOrBlockTask+0x50>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <prvProcessTimerOrBlockTask+0x52>
 800421c:	2300      	movs	r3, #0
 800421e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <prvProcessTimerOrBlockTask+0x94>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4619      	mov	r1, r3
 800422e:	f7fe ff7d 	bl	800312c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004232:	f7ff fa19 	bl	8003668 <xTaskResumeAll>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <prvProcessTimerOrBlockTask+0x98>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
}
 800424c:	e001      	b.n	8004252 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800424e:	f7ff fa0b 	bl	8003668 <xTaskResumeAll>
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000da8 	.word	0x20000da8
 8004260:	20000dac 	.word	0x20000dac
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <prvGetNextExpireTime+0x44>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <prvGetNextExpireTime+0x16>
 800427a:	2201      	movs	r2, #1
 800427c:	e000      	b.n	8004280 <prvGetNextExpireTime+0x18>
 800427e:	2200      	movs	r2, #0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <prvGetNextExpireTime+0x44>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e001      	b.n	800429c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000da4 	.word	0x20000da4

080042b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042b8:	f7ff fa74 	bl	80037a4 <xTaskGetTickCount>
 80042bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <prvSampleTimeNow+0x3c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d205      	bcs.n	80042d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042c8:	f000 f936 	bl	8004538 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e002      	b.n	80042da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042da:	4a04      	ldr	r2, [pc, #16]	; (80042ec <prvSampleTimeNow+0x3c>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000db4 	.word	0x20000db4

080042f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d812      	bhi.n	800433c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e01b      	b.n	8004362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <prvInsertTimerInActiveList+0x7c>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fe f924 	bl	8002582 <vListInsert>
 800433a:	e012      	b.n	8004362 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d206      	bcs.n	8004352 <prvInsertTimerInActiveList+0x62>
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e007      	b.n	8004362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <prvInsertTimerInActiveList+0x80>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe f910 	bl	8002582 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004362:	697b      	ldr	r3, [r7, #20]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000da8 	.word	0x20000da8
 8004370:	20000da4 	.word	0x20000da4

08004374 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800437a:	e0ca      	b.n	8004512 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da18      	bge.n	80043b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	3304      	adds	r3, #4
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	61fb      	str	r3, [r7, #28]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043aa:	6850      	ldr	r0, [r2, #4]
 80043ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ae:	6892      	ldr	r2, [r2, #8]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f2c0 80ab 	blt.w	8004512 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe f911 	bl	80025f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043d2:	463b      	mov	r3, r7
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff6b 	bl	80042b0 <prvSampleTimeNow>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b09      	cmp	r3, #9
 80043e0:	f200 8096 	bhi.w	8004510 <prvProcessReceivedCommands+0x19c>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <prvProcessReceivedCommands+0x78>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004415 	.word	0x08004415
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004415 	.word	0x08004415
 80043f8:	08004489 	.word	0x08004489
 80043fc:	0800449d 	.word	0x0800449d
 8004400:	080044e7 	.word	0x080044e7
 8004404:	08004415 	.word	0x08004415
 8004408:	08004415 	.word	0x08004415
 800440c:	08004489 	.word	0x08004489
 8004410:	0800449d 	.word	0x0800449d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	18d1      	adds	r1, r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004434:	f7ff ff5c 	bl	80042f0 <prvInsertTimerInActiveList>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d069      	beq.n	8004512 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004444:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05e      	beq.n	8004512 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	441a      	add	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	2100      	movs	r1, #0
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f7ff fe05 	bl	8004074 <xTimerGenericCommand>
 800446a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14f      	bne.n	8004512 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61bb      	str	r3, [r7, #24]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800449a:	e03a      	b.n	8004512 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	617b      	str	r3, [r7, #20]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	18d1      	adds	r1, r2, r3
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e0:	f7ff ff06 	bl	80042f0 <prvInsertTimerInActiveList>
					break;
 80044e4:	e015      	b.n	8004512 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f6:	f000 fbdb 	bl	8004cb0 <vPortFree>
 80044fa:	e00a      	b.n	8004512 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800450e:	e000      	b.n	8004512 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004510:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <prvProcessReceivedCommands+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1d39      	adds	r1, r7, #4
 8004518:	2200      	movs	r2, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fb6c 	bl	8002bf8 <xQueueReceive>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f47f af2a 	bne.w	800437c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	3730      	adds	r7, #48	; 0x30
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000dac 	.word	0x20000dac

08004538 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800453e:	e048      	b.n	80045d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004540:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe f84b 	bl	80025f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d02e      	beq.n	80045d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	d90e      	bls.n	80045a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7fd fff0 	bl	8002582 <vListInsert>
 80045a2:	e016      	b.n	80045d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a4:	2300      	movs	r3, #0
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	2100      	movs	r1, #0
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fd60 	bl	8004074 <xTimerGenericCommand>
 80045b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	603b      	str	r3, [r7, #0]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1b1      	bne.n	8004540 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <prvSwitchTimerLists+0xc4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <prvSwitchTimerLists+0xc0>)
 80045e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <prvSwitchTimerLists+0xc4>)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000da4 	.word	0x20000da4
 80045fc:	20000da8 	.word	0x20000da8

08004600 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004606:	f000 f965 	bl	80048d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <prvCheckForValidListAndQueue+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d120      	bne.n	8004654 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004612:	4814      	ldr	r0, [pc, #80]	; (8004664 <prvCheckForValidListAndQueue+0x64>)
 8004614:	f7fd ff64 	bl	80024e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004618:	4813      	ldr	r0, [pc, #76]	; (8004668 <prvCheckForValidListAndQueue+0x68>)
 800461a:	f7fd ff61 	bl	80024e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <prvCheckForValidListAndQueue+0x6c>)
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <prvCheckForValidListAndQueue+0x64>)
 8004622:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <prvCheckForValidListAndQueue+0x70>)
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <prvCheckForValidListAndQueue+0x68>)
 8004628:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800462a:	2300      	movs	r3, #0
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <prvCheckForValidListAndQueue+0x74>)
 8004630:	4a11      	ldr	r2, [pc, #68]	; (8004678 <prvCheckForValidListAndQueue+0x78>)
 8004632:	2110      	movs	r1, #16
 8004634:	200a      	movs	r0, #10
 8004636:	f7fe f86f 	bl	8002718 <xQueueGenericCreateStatic>
 800463a:	4603      	mov	r3, r0
 800463c:	4a08      	ldr	r2, [pc, #32]	; (8004660 <prvCheckForValidListAndQueue+0x60>)
 800463e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <prvCheckForValidListAndQueue+0x60>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <prvCheckForValidListAndQueue+0x60>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	490b      	ldr	r1, [pc, #44]	; (800467c <prvCheckForValidListAndQueue+0x7c>)
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fd42 	bl	80030d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004654:	f000 f96e 	bl	8004934 <vPortExitCritical>
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000dac 	.word	0x20000dac
 8004664:	20000d7c 	.word	0x20000d7c
 8004668:	20000d90 	.word	0x20000d90
 800466c:	20000da4 	.word	0x20000da4
 8004670:	20000da8 	.word	0x20000da8
 8004674:	20000e58 	.word	0x20000e58
 8004678:	20000db8 	.word	0x20000db8
 800467c:	08005108 	.word	0x08005108

08004680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b04      	subs	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b04      	subs	r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <pxPortInitialiseStack+0x64>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b14      	subs	r3, #20
 80046ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b04      	subs	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f06f 0202 	mvn.w	r2, #2
 80046ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b20      	subs	r3, #32
 80046d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	080046e9 	.word	0x080046e9

080046e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <prvTaskExitError+0x54>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d00a      	beq.n	8004712 <prvTaskExitError+0x2a>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <prvTaskExitError+0x28>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60bb      	str	r3, [r7, #8]
}
 8004724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004726:	bf00      	nop
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0fc      	beq.n	8004728 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000014 	.word	0x20000014

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	4770      	bx	lr
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst2>:
 8004760:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <prvPortStartFirstTask+0x24>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8814 	msr	CONTROL, r0
 800477a:	b662      	cpsie	i
 800477c:	b661      	cpsie	f
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	df00      	svc	0
 8004788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800478a:	bf00      	nop
 800478c:	e000ed08 	.word	0xe000ed08

08004790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <xPortStartScheduler+0x120>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a46      	ldr	r2, [pc, #280]	; (80048b4 <xPortStartScheduler+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10a      	bne.n	80047b6 <xPortStartScheduler+0x26>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047b6:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <xPortStartScheduler+0x120>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <xPortStartScheduler+0x128>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10a      	bne.n	80047d6 <xPortStartScheduler+0x46>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60fb      	str	r3, [r7, #12]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <xPortStartScheduler+0x12c>)
 80047d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <xPortStartScheduler+0x130>)
 80047fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <xPortStartScheduler+0x134>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004804:	e009      	b.n	800481a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <xPortStartScheduler+0x134>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <xPortStartScheduler+0x134>)
 800480e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d0ef      	beq.n	8004806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <xPortStartScheduler+0x134>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1c3 0307 	rsb	r3, r3, #7
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00a      	beq.n	8004848 <xPortStartScheduler+0xb8>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60bb      	str	r3, [r7, #8]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <xPortStartScheduler+0x134>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <xPortStartScheduler+0x134>)
 8004850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <xPortStartScheduler+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800485a:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <xPortStartScheduler+0x134>)
 800485c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <xPortStartScheduler+0x138>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <xPortStartScheduler+0x138>)
 800486c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <xPortStartScheduler+0x138>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <xPortStartScheduler+0x138>)
 8004878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800487c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800487e:	f000 f8dd 	bl	8004a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <xPortStartScheduler+0x13c>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004888:	f000 f8fc 	bl	8004a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xPortStartScheduler+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <xPortStartScheduler+0x140>)
 8004892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004898:	f7ff ff66 	bl	8004768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800489c:	f7ff f84c 	bl	8003938 <vTaskSwitchContext>
	prvTaskExitError();
 80048a0:	f7ff ff22 	bl	80046e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000ed00 	.word	0xe000ed00
 80048b4:	410fc271 	.word	0x410fc271
 80048b8:	410fc270 	.word	0x410fc270
 80048bc:	e000e400 	.word	0xe000e400
 80048c0:	20000ea8 	.word	0x20000ea8
 80048c4:	20000eac 	.word	0x20000eac
 80048c8:	e000ed20 	.word	0xe000ed20
 80048cc:	20000014 	.word	0x20000014
 80048d0:	e000ef34 	.word	0xe000ef34

080048d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	607b      	str	r3, [r7, #4]
}
 80048ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <vPortEnterCritical+0x58>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a0d      	ldr	r2, [pc, #52]	; (800492c <vPortEnterCritical+0x58>)
 80048f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <vPortEnterCritical+0x58>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10f      	bne.n	8004920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortEnterCritical+0x5c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <vPortEnterCritical+0x4c>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	603b      	str	r3, [r7, #0]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vPortEnterCritical+0x4a>
	}
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000014 	.word	0x20000014
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <vPortExitCritical+0x50>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <vPortExitCritical+0x24>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vPortExitCritical+0x50>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <vPortExitCritical+0x50>)
 8004960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <vPortExitCritical+0x50>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <vPortExitCritical+0x42>
 800496a:	2300      	movs	r3, #0
 800496c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f383 8811 	msr	BASEPRI, r3
}
 8004974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000014 	.word	0x20000014
	...

08004990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004990:	f3ef 8009 	mrs	r0, PSP
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <pxCurrentTCBConst>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f01e 0f10 	tst.w	lr, #16
 80049a0:	bf08      	it	eq
 80049a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6010      	str	r0, [r2, #0]
 80049ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049b4:	f380 8811 	msr	BASEPRI, r0
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f7fe ffba 	bl	8003938 <vTaskSwitchContext>
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f380 8811 	msr	BASEPRI, r0
 80049cc:	bc09      	pop	{r0, r3}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d6:	f01e 0f10 	tst.w	lr, #16
 80049da:	bf08      	it	eq
 80049dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049e0:	f380 8809 	msr	PSP, r0
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst>:
 80049f0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a12:	f7fe fed7 	bl	80037c4 <xTaskIncrementTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <xPortSysTickHandler+0x40>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
}
 8004a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <vPortSetupTimerInterrupt+0x38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <vPortSetupTimerInterrupt+0x3c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <vPortSetupTimerInterrupt+0x40>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <vPortSetupTimerInterrupt+0x44>)
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010
 8004a74:	e000e018 	.word	0xe000e018
 8004a78:	20000008 	.word	0x20000008
 8004a7c:	10624dd3 	.word	0x10624dd3
 8004a80:	e000e014 	.word	0xe000e014

08004a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a94 <vPortEnableVFP+0x10>
 8004a88:	6801      	ldr	r1, [r0, #0]
 8004a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a8e:	6001      	str	r1, [r0, #0]
 8004a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a92:	bf00      	nop
 8004a94:	e000ed88 	.word	0xe000ed88

08004a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d914      	bls.n	8004ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <vPortValidateInterruptPriority+0x70>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <vPortValidateInterruptPriority+0x74>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	7afa      	ldrb	r2, [r7, #11]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20a      	bcs.n	8004ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <vPortValidateInterruptPriority+0x78>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <vPortValidateInterruptPriority+0x7c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d90a      	bls.n	8004afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	603b      	str	r3, [r7, #0]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <vPortValidateInterruptPriority+0x60>
	}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e3f0 	.word	0xe000e3f0
 8004b0c:	20000ea8 	.word	0x20000ea8
 8004b10:	e000ed0c 	.word	0xe000ed0c
 8004b14:	20000eac 	.word	0x20000eac

08004b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b24:	f7fe fd92 	bl	800364c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b28:	4b5b      	ldr	r3, [pc, #364]	; (8004c98 <pvPortMalloc+0x180>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b30:	f000 f920 	bl	8004d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <pvPortMalloc+0x184>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 8093 	bne.w	8004c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01d      	beq.n	8004b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b48:	2208      	movs	r2, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f023 0307 	bic.w	r3, r3, #7
 8004b60:	3308      	adds	r3, #8
 8004b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <pvPortMalloc+0x6c>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	617b      	str	r3, [r7, #20]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06e      	beq.n	8004c68 <pvPortMalloc+0x150>
 8004b8a:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <pvPortMalloc+0x188>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d869      	bhi.n	8004c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <pvPortMalloc+0x18c>)
 8004b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <pvPortMalloc+0x18c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b9e:	e004      	b.n	8004baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d903      	bls.n	8004bbc <pvPortMalloc+0xa4>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f1      	bne.n	8004ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <pvPortMalloc+0x180>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d050      	beq.n	8004c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	4413      	add	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	2308      	movs	r3, #8
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d91f      	bls.n	8004c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <pvPortMalloc+0xf8>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	613b      	str	r3, [r7, #16]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c22:	69b8      	ldr	r0, [r7, #24]
 8004c24:	f000 f908 	bl	8004e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <pvPortMalloc+0x190>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d203      	bcs.n	8004c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <pvPortMalloc+0x190>)
 8004c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <pvPortMalloc+0x184>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <pvPortMalloc+0x194>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <pvPortMalloc+0x194>)
 8004c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c68:	f7fe fcfe 	bl	8003668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <pvPortMalloc+0x174>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <pvPortMalloc+0x172>
	return pvReturn;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20001e58 	.word	0x20001e58
 8004c9c:	20001e6c 	.word	0x20001e6c
 8004ca0:	20001e5c 	.word	0x20001e5c
 8004ca4:	20001e50 	.word	0x20001e50
 8004ca8:	20001e60 	.word	0x20001e60
 8004cac:	20001e64 	.word	0x20001e64

08004cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04d      	beq.n	8004d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <vPortFree+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <vPortFree+0x44>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60fb      	str	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <vPortFree+0x62>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60bb      	str	r3, [r7, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <vPortFree+0xb8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01e      	beq.n	8004d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11a      	bne.n	8004d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <vPortFree+0xb8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d38:	f7fe fc88 	bl	800364c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <vPortFree+0xbc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <vPortFree+0xbc>)
 8004d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d4a:	6938      	ldr	r0, [r7, #16]
 8004d4c:	f000 f874 	bl	8004e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <vPortFree+0xc0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <vPortFree+0xc0>)
 8004d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d5a:	f7fe fc85 	bl	8003668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20001e6c 	.word	0x20001e6c
 8004d6c:	20001e5c 	.word	0x20001e5c
 8004d70:	20001e68 	.word	0x20001e68

08004d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d7a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d80:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <prvHeapInit+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3307      	adds	r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0307 	bic.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <prvHeapInit+0xac>)
 8004da4:	4413      	add	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dac:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <prvHeapInit+0xb0>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <prvHeapInit+0xb0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <prvHeapInit+0xb4>)
 8004dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <prvHeapInit+0xb4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dde:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <prvHeapInit+0xb4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvHeapInit+0xb4>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <prvHeapInit+0xb8>)
 8004e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <prvHeapInit+0xbc>)
 8004e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <prvHeapInit+0xc0>)
 8004e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000eb0 	.word	0x20000eb0
 8004e24:	20001e50 	.word	0x20001e50
 8004e28:	20001e58 	.word	0x20001e58
 8004e2c:	20001e60 	.word	0x20001e60
 8004e30:	20001e5c 	.word	0x20001e5c
 8004e34:	20001e6c 	.word	0x20001e6c

08004e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <prvInsertBlockIntoFreeList+0xac>)
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e002      	b.n	8004e4c <prvInsertBlockIntoFreeList+0x14>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d8f7      	bhi.n	8004e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	4413      	add	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d108      	bne.n	8004e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d118      	bne.n	8004ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d00d      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e008      	b.n	8004ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d002      	beq.n	8004ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20001e50 	.word	0x20001e50
 8004ee8:	20001e58 	.word	0x20001e58

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_reclaim_reent>:
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <_reclaim_reent+0xa8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4283      	cmp	r3, r0
 8004f02:	b570      	push	{r4, r5, r6, lr}
 8004f04:	4604      	mov	r4, r0
 8004f06:	d04b      	beq.n	8004fa0 <_reclaim_reent+0xa4>
 8004f08:	69c3      	ldr	r3, [r0, #28]
 8004f0a:	b143      	cbz	r3, 8004f1e <_reclaim_reent+0x22>
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d144      	bne.n	8004f9c <_reclaim_reent+0xa0>
 8004f12:	69e3      	ldr	r3, [r4, #28]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x22>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f879 	bl	8005010 <_free_r>
 8004f1e:	6961      	ldr	r1, [r4, #20]
 8004f20:	b111      	cbz	r1, 8004f28 <_reclaim_reent+0x2c>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f874 	bl	8005010 <_free_r>
 8004f28:	69e1      	ldr	r1, [r4, #28]
 8004f2a:	b111      	cbz	r1, 8004f32 <_reclaim_reent+0x36>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f86f 	bl	8005010 <_free_r>
 8004f32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f34:	b111      	cbz	r1, 8004f3c <_reclaim_reent+0x40>
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f86a 	bl	8005010 <_free_r>
 8004f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3e:	b111      	cbz	r1, 8004f46 <_reclaim_reent+0x4a>
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 f865 	bl	8005010 <_free_r>
 8004f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f48:	b111      	cbz	r1, 8004f50 <_reclaim_reent+0x54>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f860 	bl	8005010 <_free_r>
 8004f50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f52:	b111      	cbz	r1, 8004f5a <_reclaim_reent+0x5e>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f85b 	bl	8005010 <_free_r>
 8004f5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f5c:	b111      	cbz	r1, 8004f64 <_reclaim_reent+0x68>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f856 	bl	8005010 <_free_r>
 8004f64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f66:	b111      	cbz	r1, 8004f6e <_reclaim_reent+0x72>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f851 	bl	8005010 <_free_r>
 8004f6e:	6a23      	ldr	r3, [r4, #32]
 8004f70:	b1b3      	cbz	r3, 8004fa0 <_reclaim_reent+0xa4>
 8004f72:	4620      	mov	r0, r4
 8004f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f78:	4718      	bx	r3
 8004f7a:	5949      	ldr	r1, [r1, r5]
 8004f7c:	b941      	cbnz	r1, 8004f90 <_reclaim_reent+0x94>
 8004f7e:	3504      	adds	r5, #4
 8004f80:	69e3      	ldr	r3, [r4, #28]
 8004f82:	2d80      	cmp	r5, #128	; 0x80
 8004f84:	68d9      	ldr	r1, [r3, #12]
 8004f86:	d1f8      	bne.n	8004f7a <_reclaim_reent+0x7e>
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f841 	bl	8005010 <_free_r>
 8004f8e:	e7c0      	b.n	8004f12 <_reclaim_reent+0x16>
 8004f90:	680e      	ldr	r6, [r1, #0]
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f83c 	bl	8005010 <_free_r>
 8004f98:	4631      	mov	r1, r6
 8004f9a:	e7ef      	b.n	8004f7c <_reclaim_reent+0x80>
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	e7ef      	b.n	8004f80 <_reclaim_reent+0x84>
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000064 	.word	0x20000064

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4d0d      	ldr	r5, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1b64      	subs	r4, r4, r5
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4d0b      	ldr	r5, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 f880 	bl	80050c0 <_init>
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	080051dc 	.word	0x080051dc
 8004fe4:	080051dc 	.word	0x080051dc
 8004fe8:	080051dc 	.word	0x080051dc
 8004fec:	080051e0 	.word	0x080051e0

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <memcpy>:
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffc:	d100      	bne.n	8005000 <memcpy+0xc>
 8004ffe:	4770      	bx	lr
 8005000:	b510      	push	{r4, lr}
 8005002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500a:	4291      	cmp	r1, r2
 800500c:	d1f9      	bne.n	8005002 <memcpy+0xe>
 800500e:	bd10      	pop	{r4, pc}

08005010 <_free_r>:
 8005010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005012:	2900      	cmp	r1, #0
 8005014:	d044      	beq.n	80050a0 <_free_r+0x90>
 8005016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800501a:	9001      	str	r0, [sp, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f1a1 0404 	sub.w	r4, r1, #4
 8005022:	bfb8      	it	lt
 8005024:	18e4      	addlt	r4, r4, r3
 8005026:	f000 f83f 	bl	80050a8 <__malloc_lock>
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <_free_r+0x94>)
 800502c:	9801      	ldr	r0, [sp, #4]
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	b933      	cbnz	r3, 8005040 <_free_r+0x30>
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	b003      	add	sp, #12
 8005038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800503c:	f000 b83a 	b.w	80050b4 <__malloc_unlock>
 8005040:	42a3      	cmp	r3, r4
 8005042:	d908      	bls.n	8005056 <_free_r+0x46>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	1961      	adds	r1, r4, r5
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1949      	addeq	r1, r1, r5
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	e7ed      	b.n	8005032 <_free_r+0x22>
 8005056:	461a      	mov	r2, r3
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b10b      	cbz	r3, 8005060 <_free_r+0x50>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x46>
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	1855      	adds	r5, r2, r1
 8005064:	42a5      	cmp	r5, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x70>
 8005068:	6824      	ldr	r4, [r4, #0]
 800506a:	4421      	add	r1, r4
 800506c:	1854      	adds	r4, r2, r1
 800506e:	42a3      	cmp	r3, r4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	d1e0      	bne.n	8005036 <_free_r+0x26>
 8005074:	681c      	ldr	r4, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6053      	str	r3, [r2, #4]
 800507a:	440c      	add	r4, r1
 800507c:	6014      	str	r4, [r2, #0]
 800507e:	e7da      	b.n	8005036 <_free_r+0x26>
 8005080:	d902      	bls.n	8005088 <_free_r+0x78>
 8005082:	230c      	movs	r3, #12
 8005084:	6003      	str	r3, [r0, #0]
 8005086:	e7d6      	b.n	8005036 <_free_r+0x26>
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	1961      	adds	r1, r4, r5
 800508c:	428b      	cmp	r3, r1
 800508e:	bf04      	itt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	bf04      	itt	eq
 8005098:	1949      	addeq	r1, r1, r5
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6054      	str	r4, [r2, #4]
 800509e:	e7ca      	b.n	8005036 <_free_r+0x26>
 80050a0:	b003      	add	sp, #12
 80050a2:	bd30      	pop	{r4, r5, pc}
 80050a4:	20001fac 	.word	0x20001fac

080050a8 <__malloc_lock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_lock+0x8>)
 80050aa:	f7ff bfa1 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	20001fa8 	.word	0x20001fa8

080050b4 <__malloc_unlock>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__malloc_unlock+0x8>)
 80050b6:	f7ff bf9c 	b.w	8004ff2 <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	20001fa8 	.word	0x20001fa8

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
