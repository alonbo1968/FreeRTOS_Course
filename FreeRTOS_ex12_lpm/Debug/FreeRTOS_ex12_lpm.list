
FreeRTOS_ex12_lpm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006580  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800679c  0800679c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800679c  0800679c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080067a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f80  20000060  08006804  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fe0  08006804  00021fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a0a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf1  00000000  00000000  00039add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011bc  00000000  00000000  0003ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a13  00000000  00000000  0003ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f52  00000000  00000000  000689b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9f27  00000000  00000000  00081909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062d4  00000000  00000000  0017b830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00181b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066f8 	.word	0x080066f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080066f8 	.word	0x080066f8

080001d0 <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
/* place for user code */
	HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 0xFFFF, ulExpectedIdleTime);
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <PreSleepProcessing+0x20>)
 80001e0:	f000 fed4 	bl	8000f8c <HAL_LPTIM_TimeOut_Start_IT>
	HAL_SuspendTick();
 80001e4:	f000 fa86 	bl	80006f4 <HAL_SuspendTick>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	2000007c 	.word	0x2000007c

080001f4 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
/* place for user code */
	HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <PostSleepProcessing+0x1c>)
 80001fe:	f000 ff43 	bl	8001088 <HAL_LPTIM_TimeOut_Stop_IT>
	HAL_ResumeTick();
 8000202:	f000 fa89 	bl	8000718 <HAL_ResumeTick>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	2000007c 	.word	0x2000007c

08000214 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800021c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000220:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d013      	beq.n	8000254 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800022c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000230:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000234:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000238:	2b00      	cmp	r3, #0
 800023a:	d00b      	beq.n	8000254 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800023c:	e000      	b.n	8000240 <ITM_SendChar+0x2c>
    {
      __NOP();
 800023e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800024a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
	...

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fad5 	bl	8000816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f820 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f8a2 	bl	80003b8 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8000274:	f000 f872 	bl	800035c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000278:	f002 ffbc 	bl	80031f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800027c:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <main+0x3c>)
 800027e:	2100      	movs	r1, #0
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x40>)
 8000282:	f003 f801 	bl	8003288 <osThreadNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <main+0x44>)
 800028a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  EventGroup1 = osEventFlagsNew(NULL);
 800028c:	2000      	movs	r0, #0
 800028e:	f003 f8f6 	bl	800347e <osEventFlagsNew>
 8000292:	4603      	mov	r3, r0
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <main+0x48>)
 8000296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f002 ffd0 	bl	800323c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x38>
 800029e:	bf00      	nop
 80002a0:	08006730 	.word	0x08006730
 80002a4:	080004c5 	.word	0x080004c5
 80002a8:	200000b4 	.word	0x200000b4
 80002ac:	200000b8 	.word	0x200000b8

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b096      	sub	sp, #88	; 0x58
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	2244      	movs	r2, #68	; 0x44
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f006 f930 	bl	8006524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	463b      	mov	r3, r7
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002d6:	f001 f957 	bl	8001588 <HAL_PWREx_ControlVoltageScaling>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002e0:	f000 f912 	bl	8000508 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002e4:	f001 f932 	bl	800154c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <SystemClock_Config+0xa8>)
 80002ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <SystemClock_Config+0xa8>)
 80002f0:	f023 0318 	bic.w	r3, r3, #24
 80002f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002f8:	2314      	movs	r3, #20
 80002fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000308:	2360      	movs	r3, #96	; 0x60
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030c:	2300      	movs	r3, #0
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	4618      	mov	r0, r3
 8000316:	f001 f98d 	bl	8001634 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000320:	f000 f8f2 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	463b      	mov	r3, r7
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fd55 	bl	8001dec <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000348:	f000 f8de 	bl	8000508 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800034c:	f002 fa78 	bl	8002840 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000350:	bf00      	nop
 8000352:	3758      	adds	r7, #88	; 0x58
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000

0800035c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <MX_LPTIM1_Init+0x58>)
 8000364:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 800036e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000372:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800037a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 800038a:	2200      	movs	r2, #0
 800038c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000390:	2200      	movs	r2, #0
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 8000396:	2200      	movs	r2, #0
 8000398:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_LPTIM1_Init+0x54>)
 800039c:	f000 fd54 	bl	8000e48 <HAL_LPTIM_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80003a6:	f000 f8af 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000007c 	.word	0x2000007c
 80003b4:	40007c00 	.word	0x40007c00

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b29      	ldr	r3, [pc, #164]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	4a28      	ldr	r2, [pc, #160]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	f003 0304 	and.w	r3, r3, #4
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a22      	ldr	r2, [pc, #136]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_GPIO_Init+0xbc>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_GPIO_Init+0xbc>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_GPIO_Init+0xbc>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_GPIO_Init+0xbc>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2120      	movs	r1, #32
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fce3 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000428:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	4619      	mov	r1, r3
 8000438:	480f      	ldr	r0, [pc, #60]	; (8000478 <MX_GPIO_Init+0xc0>)
 800043a:	f000 fb2b 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800043e:	2320      	movs	r3, #32
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fb1c 	bl	8000a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2105      	movs	r1, #5
 8000460:	2028      	movs	r0, #40	; 0x28
 8000462:	f000 faed 	bl	8000a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000466:	2028      	movs	r0, #40	; 0x28
 8000468:	f000 fb06 	bl	8000a78 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	48000800 	.word	0x48000800

0800047c <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fec3 	bl	8000214 <ITM_SendChar>
	ITM_SendChar('\n');
 800048e:	200a      	movs	r0, #10
 8000490:	f7ff fec0 	bl	8000214 <ITM_SendChar>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(Task1Handle, 1);
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2101      	movs	r1, #1
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 ff7d 	bl	80033ac <osThreadFlagsSet>
	task_action('!');
 80004b2:	2021      	movs	r0, #33	; 0x21
 80004b4:	f7ff ffe2 	bl	800047c <task_action>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200000b4 	.word	0x200000b4

080004c4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);
 80004cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80004d0:	f002 ffba 	bl	8003448 <osDelay>
	  task_action('1');
 80004d4:	2031      	movs	r0, #49	; 0x31
 80004d6:	f7ff ffd1 	bl	800047c <task_action>
	  HAL_Delay(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f000 f9d3 	bl	8000888 <HAL_Delay>
	  osDelay(5000);
 80004e2:	e7f3      	b.n	80004cc <StartTask1+0x8>

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f000 f9a7 	bl	8000848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40001000 	.word	0x40001000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_MspInit+0x70>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	4a19      	ldr	r2, [pc, #100]	; (8000584 <HAL_MspInit+0x70>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	; 0x60
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <HAL_MspInit+0x70>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_MspInit+0x70>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <HAL_MspInit+0x70>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	; 0x58
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_MspInit+0x70>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	f06f 000b 	mvn.w	r0, #11
 8000552:	f000 fa75 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	f06f 0004 	mvn.w	r0, #4
 800055e:	f000 fa6f 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	f06f 0003 	mvn.w	r0, #3
 800056a:	f000 fa69 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 fa63 	bl	8000a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0a6      	sub	sp, #152	; 0x98
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2288      	movs	r2, #136	; 0x88
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f005 ffc3 	bl	8006524 <memset>
  if(hlptim->Instance==LPTIM1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_LPTIM_MspInit+0x70>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d123      	bne.n	80005f0 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80005a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80005ae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80005b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fe57 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80005c4:	f7ff ffa0 	bl	8000508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_LPTIM_MspInit+0x74>)
 80005ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <HAL_LPTIM_MspInit+0x74>)
 80005ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d2:	6593      	str	r3, [r2, #88]	; 0x58
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_LPTIM_MspInit+0x74>)
 80005d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2105      	movs	r1, #5
 80005e4:	2041      	movs	r0, #65	; 0x41
 80005e6:	f000 fa2b 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80005ea:	2041      	movs	r0, #65	; 0x41
 80005ec:	f000 fa44 	bl	8000a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3798      	adds	r7, #152	; 0x98
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40007c00 	.word	0x40007c00
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <HAL_InitTick+0xe0>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	4a33      	ldr	r2, [pc, #204]	; (80006e0 <HAL_InitTick+0xe0>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6593      	str	r3, [r2, #88]	; 0x58
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <HAL_InitTick+0xe0>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000626:	f107 0210 	add.w	r2, r7, #16
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fd89 	bl	8002148 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000640:	f001 fd6c 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8000644:	6378      	str	r0, [r7, #52]	; 0x34
 8000646:	e004      	b.n	8000652 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000648:	f001 fd68 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 800064c:	4603      	mov	r3, r0
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000654:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <HAL_InitTick+0xe4>)
 8000656:	fba2 2303 	umull	r2, r3, r2, r3
 800065a:	0c9b      	lsrs	r3, r3, #18
 800065c:	3b01      	subs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <HAL_InitTick+0xe8>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <HAL_InitTick+0xec>)
 8000664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <HAL_InitTick+0xe8>)
 8000668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800066c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <HAL_InitTick+0xe8>)
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_InitTick+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_InitTick+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <HAL_InitTick+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <HAL_InitTick+0xe8>)
 8000688:	f002 fabc 	bl	8002c04 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000696:	2b00      	cmp	r3, #0
 8000698:	d11b      	bne.n	80006d2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <HAL_InitTick+0xe8>)
 800069c:	f002 fb14 	bl	8002cc8 <HAL_TIM_Base_Start_IT>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d111      	bne.n	80006d2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f000 f9e2 	bl	8000a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d808      	bhi.n	80006cc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006ba:	2200      	movs	r2, #0
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 f9be 	bl	8000a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_InitTick+0xf0>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e002      	b.n	80006d2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3738      	adds	r7, #56	; 0x38
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	431bde83 	.word	0x431bde83
 80006e8:	200000bc 	.word	0x200000bc
 80006ec:	40001000 	.word	0x40001000
 80006f0:	20000004 	.word	0x20000004

080006f4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SuspendTick+0x20>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_SuspendTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f022 0201 	bic.w	r2, r2, #1
 8000706:	60da      	str	r2, [r3, #12]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000bc 	.word	0x200000bc

08000718 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_ResumeTick+0x20>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68da      	ldr	r2, [r3, #12]
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_ResumeTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f042 0201 	orr.w	r2, r2, #1
 800072a:	60da      	str	r2, [r3, #12]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200000bc 	.word	0x200000bc

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800076c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000770:	f000 fb52 	bl	8000e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <TIM6_DAC_IRQHandler+0x10>)
 800077e:	f002 fb13 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000bc 	.word	0x200000bc

0800078c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <LPTIM1_IRQHandler+0x10>)
 8000792:	f000 fcbb 	bl	800110c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000007c 	.word	0x2000007c

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f005 fef5 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fd35 	bl	8000264 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000808:	080067a4 	.word	0x080067a4
  ldr r2, =_sbss
 800080c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000810:	20001fe0 	.word	0x20001fe0

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>

08000816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f902 	bl	8000a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000826:	200f      	movs	r0, #15
 8000828:	f7ff feea 	bl	8000600 <HAL_InitTick>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	e001      	b.n	800083c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000838:	f7ff fe6c 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	20000108 	.word	0x20000108

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000108 	.word	0x20000108

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff ffee 	bl	8000870 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffde 	bl	8000870 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008

080008d0 <__NVIC_SetPriorityGrouping>:
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff4c 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a52:	f7ff ff61 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	6978      	ldr	r0, [r7, #20]
 8000a5e:	f7ff ffb1 	bl	80009c4 <NVIC_EncodePriority>
 8000a62:	4602      	mov	r2, r0
 8000a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff80 	bl	8000970 <__NVIC_SetPriority>
}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff54 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e17f      	b.n	8000da4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8171 	beq.w	8000d9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <HAL_GPIO_Init+0x40>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d118      	bne.n	8000b74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d017      	beq.n	8000bb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d123      	bne.n	8000c04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691a      	ldr	r2, [r3, #16]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	08da      	lsrs	r2, r3, #3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3208      	adds	r2, #8
 8000bfe:	6939      	ldr	r1, [r7, #16]
 8000c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0203 	and.w	r2, r3, #3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80ac 	beq.w	8000d9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a5e      	ldr	r2, [pc, #376]	; (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b5c      	ldr	r3, [pc, #368]	; (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5e:	4a5a      	ldr	r2, [pc, #360]	; (8000dc8 <HAL_GPIO_Init+0x334>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c88:	d025      	beq.n	8000cd6 <HAL_GPIO_Init+0x242>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_GPIO_Init+0x338>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01f      	beq.n	8000cd2 <HAL_GPIO_Init+0x23e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4e      	ldr	r2, [pc, #312]	; (8000dd0 <HAL_GPIO_Init+0x33c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x23a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4d      	ldr	r2, [pc, #308]	; (8000dd4 <HAL_GPIO_Init+0x340>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x236>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <HAL_GPIO_Init+0x344>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x232>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4b      	ldr	r2, [pc, #300]	; (8000ddc <HAL_GPIO_Init+0x348>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x22e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4a      	ldr	r2, [pc, #296]	; (8000de0 <HAL_GPIO_Init+0x34c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x22a>
 8000cba:	2306      	movs	r3, #6
 8000cbc:	e00c      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	e00a      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e008      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	f002 0203 	and.w	r2, r2, #3
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce8:	4937      	ldr	r1, [pc, #220]	; (8000dc8 <HAL_GPIO_Init+0x334>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d1a:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d44:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HAL_GPIO_Init+0x350>)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f ae78 	bne.w	8000aa4 <HAL_GPIO_Init+0x10>
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	48001400 	.word	0x48001400
 8000de0:	48001800 	.word	0x48001800
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb30 	bl	800049c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e08f      	b.n	8000f7a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d106      	bne.n	8000e7a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fb87 	bl	8000588 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d004      	beq.n	8000e9c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e9a:	d103      	bne.n	8000ea4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 031e 	bic.w	r3, r3, #30
 8000ea2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d005      	beq.n	8000ebc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000eba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_LPTIM_Init+0x13c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000ecc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8000ed2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8000ed8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8000ede:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d107      	bne.n	8000efe <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d004      	beq.n	8000f10 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000f0e:	d107      	bne.n	8000f20 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00a      	beq.n	8000f42 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000f34:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8000f3a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_LPTIM_Init+0x140>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d108      	bne.n	8000f66 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	621a      	str	r2, [r3, #32]
 8000f64:	e004      	b.n	8000f70 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f6e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	ff19f1fe 	.word	0xff19f1fe
 8000f88:	40007c00 	.word	0x40007c00

08000f8c <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a36      	ldr	r2, [pc, #216]	; (8001080 <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a35      	ldr	r2, [pc, #212]	; (8001084 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	e005      	b.n	8000fc4 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a31      	ldr	r2, [pc, #196]	; (8001084 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2210      	movs	r2, #16
 8000fea:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f978 	bl	80012ec <LPTIM_WaitForFlag>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d101      	bne.n	8001006 <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e038      	b.n	8001078 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2208      	movs	r2, #8
 800100c:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001016:	2108      	movs	r1, #8
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f967 	bl	80012ec <LPTIM_WaitForFlag>
 800101e:	4603      	mov	r3, r0
 8001020:	2b03      	cmp	r3, #3
 8001022:	d101      	bne.n	8001028 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e027      	b.n	8001078 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 f98f 	bl	800134c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f94d 	bl	80012ce <HAL_LPTIM_GetState>
 8001034:	4603      	mov	r3, r0
 8001036:	2b03      	cmp	r3, #3
 8001038:	d101      	bne.n	800103e <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e01c      	b.n	8001078 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0204 	orr.w	r2, r2, #4
 800106c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40007c00 	.word	0x40007c00
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_LPTIM_TimeOut_Stop_IT+0x7c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d106      	bne.n	80010a8 <HAL_LPTIM_TimeOut_Stop_IT+0x20>
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	e005      	b.n	80010b4 <HAL_LPTIM_TimeOut_Stop_IT+0x2c>
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2202      	movs	r2, #2
 80010b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f945 	bl	800134c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f903 	bl	80012ce <HAL_LPTIM_GetState>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d101      	bne.n	80010d2 <HAL_LPTIM_TimeOut_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e014      	b.n	80010fc <HAL_LPTIM_TimeOut_Stop_IT+0x74>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80010e0:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40007c00 	.word	0x40007c00
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10d      	bne.n	800113e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f882 	bl	8001242 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b02      	cmp	r3, #2
 800114a:	d10d      	bne.n	8001168 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d106      	bne.n	8001168 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2202      	movs	r2, #2
 8001160:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f877 	bl	8001256 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b04      	cmp	r3, #4
 8001174:	d10d      	bne.n	8001192 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b04      	cmp	r3, #4
 8001182:	d106      	bne.n	8001192 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2204      	movs	r2, #4
 800118a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f86c 	bl	800126a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b08      	cmp	r3, #8
 800119e:	d10d      	bne.n	80011bc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d106      	bne.n	80011bc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2208      	movs	r2, #8
 80011b4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f861 	bl	800127e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d10d      	bne.n	80011e6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	d106      	bne.n	80011e6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2210      	movs	r2, #16
 80011de:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f856 	bl	8001292 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b20      	cmp	r3, #32
 80011f2:	d10d      	bne.n	8001210 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d106      	bne.n	8001210 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2220      	movs	r2, #32
 8001208:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f84b 	bl	80012a6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	2b40      	cmp	r3, #64	; 0x40
 800121c:	d10d      	bne.n	800123a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	d106      	bne.n	800123a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f840 	bl	80012ba <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80012dc:	b2db      	uxtb	r3, r3
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <LPTIM_WaitForFlag+0x58>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <LPTIM_WaitForFlag+0x5c>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0b9b      	lsrs	r3, r3, #14
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	4013      	ands	r3, r2
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d002      	beq.n	8001336 <LPTIM_WaitForFlag+0x4a>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ec      	bne.n	8001310 <LPTIM_WaitForFlag+0x24>

  return result;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000
 8001348:	d1b71759 	.word	0xd1b71759

0800134c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001358:	f3ef 8310 	mrs	r3, PRIMASK
 800135c:	60fb      	str	r3, [r7, #12]
  return(result);
 800135e:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f383 8810 	msr	PRIMASK, r3
}
 800136c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <LPTIM_Disable+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d003      	beq.n	8001380 <LPTIM_Disable+0x34>
 8001378:	4a72      	ldr	r2, [pc, #456]	; (8001544 <LPTIM_Disable+0x1f8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800137e:	e00d      	b.n	800139c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <LPTIM_Disable+0x1fc>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800138c:	e006      	b.n	800139c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800138e:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <LPTIM_Disable+0x1fc>)
 8001390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001394:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800139a:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <LPTIM_Disable+0x1f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d003      	beq.n	80013d6 <LPTIM_Disable+0x8a>
 80013ce:	4a5d      	ldr	r2, [pc, #372]	; (8001544 <LPTIM_Disable+0x1f8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00d      	beq.n	80013f0 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80013d4:	e019      	b.n	800140a <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80013d6:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	4a5b      	ldr	r2, [pc, #364]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013e0:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80013e2:	4b59      	ldr	r3, [pc, #356]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	4a58      	ldr	r2, [pc, #352]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013ec:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 80013ee:	e00c      	b.n	800140a <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	4a54      	ldr	r2, [pc, #336]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <LPTIM_Disable+0x1fc>)
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <LPTIM_Disable+0x1fc>)
 8001402:	f023 0320 	bic.w	r3, r3, #32
 8001406:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8001408:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <LPTIM_Disable+0xca>
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a49      	ldr	r2, [pc, #292]	; (8001540 <LPTIM_Disable+0x1f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d003      	beq.n	8001428 <LPTIM_Disable+0xdc>
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <LPTIM_Disable+0x1f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d009      	beq.n	800143a <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001426:	e011      	b.n	800144c <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001428:	4b47      	ldr	r3, [pc, #284]	; (8001548 <LPTIM_Disable+0x1fc>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a46      	ldr	r2, [pc, #280]	; (8001548 <LPTIM_Disable+0x1fc>)
 8001430:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001438:	e008      	b.n	800144c <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <LPTIM_Disable+0x1fc>)
 800143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001440:	4a41      	ldr	r2, [pc, #260]	; (8001548 <LPTIM_Disable+0x1fc>)
 8001442:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 800144a:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800146a:	2108      	movs	r1, #8
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff3d 	bl	80012ec <LPTIM_WaitForFlag>
 8001472:	4603      	mov	r3, r0
 8001474:	2b03      	cmp	r3, #3
 8001476:	d103      	bne.n	8001480 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01a      	beq.n	80014c4 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0201 	orr.w	r2, r2, #1
 800149c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80014a6:	2110      	movs	r1, #16
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff1f 	bl	80012ec <LPTIM_WaitForFlag>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d103      	bne.n	80014bc <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2210      	movs	r2, #16
 80014c2:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <LPTIM_Disable+0x1f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d003      	beq.n	80014d6 <LPTIM_Disable+0x18a>
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <LPTIM_Disable+0x1f8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00b      	beq.n	80014ec <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80014d4:	e015      	b.n	8001502 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <LPTIM_Disable+0x1fc>)
 80014d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80014e0:	4919      	ldr	r1, [pc, #100]	; (8001548 <LPTIM_Disable+0x1fc>)
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	4313      	orrs	r3, r2
 80014e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80014ea:	e00a      	b.n	8001502 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <LPTIM_Disable+0x1fc>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80014f6:	4914      	ldr	r1, [pc, #80]	; (8001548 <LPTIM_Disable+0x1fc>)
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001500:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	621a      	str	r2, [r3, #32]
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f383 8810 	msr	PRIMASK, r3
}
 8001534:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40007c00 	.word	0x40007c00
 8001544:	40009400 	.word	0x40009400
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_PWREx_GetVoltageRange+0x18>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40007000 	.word	0x40007000

08001588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001596:	d130      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d038      	beq.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2232      	movs	r2, #50	; 0x32
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015cc:	e002      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	d102      	bne.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f2      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f4:	d110      	bne.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e00f      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001606:	d007      	beq.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000
 800162c:	20000000 	.word	0x20000000
 8001630:	431bde83 	.word	0x431bde83

08001634 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3ca      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b97      	ldr	r3, [pc, #604]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001650:	4b94      	ldr	r3, [pc, #592]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80e4 	beq.w	8001830 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_RCC_OscConfig+0x4a>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b0c      	cmp	r3, #12
 8001672:	f040 808b 	bne.w	800178c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	f040 8087 	bne.w	800178c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x62>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e3a2      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <HAL_RCC_OscConfig+0x7c>
 80016a6:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ae:	e005      	b.n	80016bc <HAL_RCC_OscConfig+0x88>
 80016b0:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016bc:	4293      	cmp	r3, r2
 80016be:	d223      	bcs.n	8001708 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fd71 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e383      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d4:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a72      	ldr	r2, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	496d      	ldr	r1, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f2:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4968      	ldr	r1, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
 8001706:	e025      	b.n	8001754 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4960      	ldr	r1, [pc, #384]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	495b      	ldr	r1, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fd31 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e343      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001754:	f000 fc4a 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001758:	4602      	mov	r2, r0
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	4950      	ldr	r1, [pc, #320]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 8001766:	5ccb      	ldrb	r3, [r1, r3]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <HAL_RCC_OscConfig+0x278>)
 8001772:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001774:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe ff41 	bl	8000600 <HAL_InitTick>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d052      	beq.n	800182e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	e327      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d032      	beq.n	80017fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a0:	f7ff f866 	bl	8000870 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a8:	f7ff f862 	bl	8000870 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e310      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4931      	ldr	r1, [pc, #196]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	492c      	ldr	r1, [pc, #176]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e01a      	b.n	8001830 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001806:	f7ff f833 	bl	8000870 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800180e:	f7ff f82f 	bl	8000870 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e2dd      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x1da>
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800182e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d074      	beq.n	8001926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x21a>
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d10e      	bne.n	8001866 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d10b      	bne.n	8001866 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d064      	beq.n	8001924 <HAL_RCC_OscConfig+0x2f0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d160      	bne.n	8001924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e2ba      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x24a>
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e026      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001886:	d115      	bne.n	80018b4 <HAL_RCC_OscConfig+0x280>
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800188e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a02      	ldr	r2, [pc, #8]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08006754 	.word	0x08006754
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004
 80018b4:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a9f      	ldr	r2, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9c      	ldr	r2, [pc, #624]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7fe ffcc 	bl	8000870 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7fe ffc8 	bl	8000870 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e276      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x2a8>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7fe ffb8 	bl	8000870 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7fe ffb4 	bl	8000870 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e262      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x2d0>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d060      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x310>
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d119      	bne.n	8001972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d116      	bne.n	8001972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x328>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e23f      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	4973      	ldr	r1, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	e040      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d023      	beq.n	80019c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7fe ff73 	bl	8000870 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7fe ff6f 	bl	8000870 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e21d      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	495f      	ldr	r1, [pc, #380]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e018      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7fe ff4f 	bl	8000870 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7fe ff4b 	bl	8000870 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1f9      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7fe ff2a 	bl	8000870 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7fe ff26 	bl	8000870 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d4      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3ec>
 8001a40:	e01b      	b.n	8001a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a48:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7fe ff0d 	bl	8000870 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7fe ff09 	bl	8000870 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1b7      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a6 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10d      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d118      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001acc:	f7fe fed0 	bl	8000870 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7fe fecc 	bl	8000870 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e17a      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0a:	e029      	b.n	8001b60 <HAL_RCC_OscConfig+0x52c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d115      	bne.n	8001b40 <HAL_RCC_OscConfig+0x50c>
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x52c>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a9b      	ldr	r2, [pc, #620]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b98      	ldr	r3, [pc, #608]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a97      	ldr	r2, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe fe82 	bl	8000870 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7fe fe7e 	bl	8000870 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e12a      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ed      	beq.n	8001b70 <HAL_RCC_OscConfig+0x53c>
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7fe fe6b 	bl	8000870 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7fe fe67 	bl	8000870 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e113      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ed      	bne.n	8001b9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80fe 	beq.w	8001dda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	f040 80d0 	bne.w	8001d88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be8:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d130      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	3b01      	subs	r3, #1
 8001c08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d127      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d11f      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c28:	2a07      	cmp	r2, #7
 8001c2a:	bf14      	ite	ne
 8001c2c:	2201      	movne	r2, #1
 8001c2e:	2200      	moveq	r2, #0
 8001c30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d113      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d06e      	beq.n	8001d3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d069      	beq.n	8001d38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0ad      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8c:	f7fe fdf0 	bl	8000870 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fdec 	bl	8000870 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e09a      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca6:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x784>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc2:	3a01      	subs	r2, #1
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ccc:	0212      	lsls	r2, r2, #8
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd4:	0852      	lsrs	r2, r2, #1
 8001cd6:	3a01      	subs	r2, #1
 8001cd8:	0552      	lsls	r2, r2, #21
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce0:	0852      	lsrs	r2, r2, #1
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	0652      	lsls	r2, r2, #25
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cec:	0912      	lsrs	r2, r2, #4
 8001cee:	0452      	lsls	r2, r2, #17
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4930      	ldr	r1, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7fe fdae 	bl	8000870 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe fdaa 	bl	8000870 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e058      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d36:	e050      	b.n	8001dda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04f      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d148      	bne.n	8001dda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d60:	f7fe fd86 	bl	8000870 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fd82 	bl	8000870 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e030      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x734>
 8001d86:	e028      	b.n	8001dda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d023      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_RCC_OscConfig+0x780>)
 8001d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fd69 	bl	8000870 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	e00c      	b.n	8001dbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7fe fd65 	bl	8000870 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d905      	bls.n	8001dbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e013      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x7b0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ec      	bne.n	8001da2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x7b0>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x7b0>)
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x7b4>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	feeefffc 	.word	0xfeeefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e7      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4970      	ldr	r1, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cf      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4960      	ldr	r1, [pc, #384]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04c      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0a6      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e09a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e086      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4943      	ldr	r1, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7fe fccc 	bl	8000870 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe fcc8 	bl	8000870 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e06e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d208      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d210      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e036      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa0:	f000 f824 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fb1b 	bl	8000600 <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08006754 	.word	0x08006754
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x34>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d121      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e004      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 8002072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d134      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0xa6>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xac>
 8002090:	e005      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002094:	617b      	str	r3, [r7, #20]
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 800209a:	617b      	str	r3, [r7, #20]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0e5b      	lsrs	r3, r3, #25
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	0800676c 	.word	0x0800676c
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08006764 	.word	0x08006764

08002148 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	220f      	movs	r2, #15
 8002156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_RCC_GetClockConfig+0x60>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0207 	and.w	r2, r3, #7
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40022000 	.word	0x40022000

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f9d2 	bl	800156c <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f9c2 	bl	800156c <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	; 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002274:	2300      	movs	r3, #0
 8002276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2300      	movs	r3, #0
 800227a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d041      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002290:	d02a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002296:	d824      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800229e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022a2:	d81e      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ae:	e018      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b0:	4b86      	ldr	r3, [pc, #536]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a85      	ldr	r2, [pc, #532]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022bc:	e015      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 facb 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ce:	e00c      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3320      	adds	r3, #32
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fbb6 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e0:	e003      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	74fb      	strb	r3, [r7, #19]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fe:	4973      	ldr	r1, [pc, #460]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002306:	e001      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d041      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800231c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002320:	d02a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002326:	d824      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800232e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002332:	d81e      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800233e:	e018      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a61      	ldr	r2, [pc, #388]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234c:	e015      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fa83 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800235e:	e00c      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3320      	adds	r3, #32
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fb6e 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002370:	e003      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	74fb      	strb	r3, [r7, #19]
      break;
 8002376:	e000      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002380:	4b52      	ldr	r3, [pc, #328]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800238e:	494f      	ldr	r1, [pc, #316]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a40      	ldr	r2, [pc, #256]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fa40 	bl	8000870 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f2:	e009      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe fa3c 	bl	8000870 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	74fb      	strb	r3, [r7, #19]
        break;
 8002406:	e005      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ef      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d019      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe f9fb 	bl	8000870 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247c:	e00b      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe f9f7 	bl	8000870 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d902      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	74fb      	strb	r3, [r7, #19]
            break;
 8002494:	e006      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ec      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ba:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
 80024c8:	e006      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7c7b      	ldrb	r3, [r7, #17]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a9d      	ldr	r2, [pc, #628]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f6:	4b98      	ldr	r3, [pc, #608]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	4994      	ldr	r1, [pc, #592]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 020c 	bic.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	498c      	ldr	r1, [pc, #560]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253a:	4b87      	ldr	r3, [pc, #540]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4983      	ldr	r1, [pc, #524]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255c:	4b7e      	ldr	r3, [pc, #504]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	497b      	ldr	r1, [pc, #492]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	4972      	ldr	r1, [pc, #456]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	496a      	ldr	r1, [pc, #424]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	4961      	ldr	r1, [pc, #388]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e4:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4959      	ldr	r1, [pc, #356]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002606:	4b54      	ldr	r3, [pc, #336]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	4950      	ldr	r1, [pc, #320]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	4948      	ldr	r1, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	493f      	ldr	r1, [pc, #252]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d028      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	4937      	ldr	r1, [pc, #220]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d106      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a31      	ldr	r2, [pc, #196]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e011      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a2:	d10c      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8d8 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	491f      	ldr	r1, [pc, #124]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	e011      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f8a9 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02b      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002746:	d109      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a02      	ldr	r2, [pc, #8]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002752:	60d3      	str	r3, [r2, #12]
 8002754:	e014      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f877 	bl	8002860 <RCCEx_PLLSAI1_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279a:	4928      	ldr	r1, [pc, #160]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f854 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	74bb      	strb	r3, [r7, #18]
 80027c6:	e011      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3320      	adds	r3, #32
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f935 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002806:	490d      	ldr	r1, [pc, #52]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002832:	7cbb      	ldrb	r3, [r7, #18]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000

08002860 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800286e:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287a:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
       ||
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002892:	4b6c      	ldr	r3, [pc, #432]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
       ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d047      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e044      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d018      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0x86>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d825      	bhi.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d002      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x62>
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d009      	beq.n	80028d4 <RCCEx_PLLSAI1_Config+0x74>
 80028c0:	e020      	b.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d2:	e01a      	b.n	800290a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d4:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d116      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e013      	b.n	800290e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002902:	e006      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e004      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290a:	bf00      	nop
 800290c:	e002      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002912:	bf00      	nop
    }

    if(status == HAL_OK)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6819      	ldr	r1, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	430b      	orrs	r3, r1
 8002930:	4944      	ldr	r1, [pc, #272]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d17d      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fd ff92 	bl	8000870 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294e:	e009      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002950:	f7fd ff8e 	bl	8000870 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
        break;
 8002962:	e005      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002964:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ef      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d160      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	0211      	lsls	r1, r2, #8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	0912      	lsrs	r2, r2, #4
 8002994:	0452      	lsls	r2, r2, #17
 8002996:	430a      	orrs	r2, r1
 8002998:	492a      	ldr	r1, [pc, #168]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
 800299e:	e027      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d112      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	0211      	lsls	r1, r2, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6912      	ldr	r2, [r2, #16]
 80029bc:	0852      	lsrs	r2, r2, #1
 80029be:	3a01      	subs	r2, #1
 80029c0:	0552      	lsls	r2, r2, #21
 80029c2:	430a      	orrs	r2, r1
 80029c4:	491f      	ldr	r1, [pc, #124]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
 80029ca:	e011      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6892      	ldr	r2, [r2, #8]
 80029dc:	0211      	lsls	r1, r2, #8
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6952      	ldr	r2, [r2, #20]
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0652      	lsls	r2, r2, #25
 80029e8:	430a      	orrs	r2, r1
 80029ea:	4916      	ldr	r1, [pc, #88]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fd ff38 	bl	8000870 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a02:	e009      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a04:	f7fd ff34 	bl	8000870 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	73fb      	strb	r3, [r7, #15]
          break;
 8002a16:	e005      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	4904      	ldr	r1, [pc, #16]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a56:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a62:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
       ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
       ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d047      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e044      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d018      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x86>
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d825      	bhi.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d002      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0x62>
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d009      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x74>
 8002aa8:	e020      	b.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aaa:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11d      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aba:	e01a      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e013      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aea:	e006      	b.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e004      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	430b      	orrs	r3, r1
 8002b18:	4939      	ldr	r1, [pc, #228]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d167      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fd fe9e 	bl	8000870 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b38:	f7fd fe9a 	bl	8000870 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ef      	bne.n	8002b38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14a      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d111      	bne.n	8002b88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	0211      	lsls	r1, r2, #8
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	0912      	lsrs	r2, r2, #4
 8002b7c:	0452      	lsls	r2, r2, #17
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	491f      	ldr	r1, [pc, #124]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	614b      	str	r3, [r1, #20]
 8002b86:	e011      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	0211      	lsls	r1, r2, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6912      	ldr	r2, [r2, #16]
 8002b9e:	0852      	lsrs	r2, r2, #1
 8002ba0:	3a01      	subs	r2, #1
 8002ba2:	0652      	lsls	r2, r2, #25
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4916      	ldr	r1, [pc, #88]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fd fe5a 	bl	8000870 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bbe:	e009      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc0:	f7fd fe56 	bl	8000870 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd2:	e005      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ef      	beq.n	8002bc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4904      	ldr	r1, [pc, #16]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e049      	b.n	8002caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f841 	bl	8002cb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 f9da 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04f      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_TIM_Base_Start_IT+0xc4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01d      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d018      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d115      	bne.n	8002d6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d015      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d011      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	e008      	b.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e000      	b.n	8002d7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40013400 	.word	0x40013400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	00010007 	.word	0x00010007

08002da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d020      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0202 	mvn.w	r2, #2
 8002ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8e4 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8d6 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8e7 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d020      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0204 	mvn.w	r2, #4
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8be 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8b0 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8c1 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d020      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0208 	mvn.w	r2, #8
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f898 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f88a 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f89b 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d020      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0210 	mvn.w	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f872 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f864 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f875 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0201 	mvn.w	r2, #1
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fae8 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f906 	bl	8003144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8fe 	bl	8003158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f834 	bl	8002fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0220 	mvn.w	r2, #32
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8c6 	bl	8003130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d01b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d017      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <TIM_Base_SetConfig+0x124>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <TIM_Base_SetConfig+0x130>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00f      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <TIM_Base_SetConfig+0x124>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <TIM_Base_SetConfig+0x128>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <TIM_Base_SetConfig+0x130>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d103      	bne.n	80030fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	615a      	str	r2, [r3, #20]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40013400 	.word	0x40013400
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800

08003130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <__NVIC_SetPriority>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	; (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Handler+0x1c>)
 80031c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031c8:	f001 febe 	bl	8004f48 <xTaskGetSchedulerState>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031d2:	f002 fe49 	bl	8005e68 <xPortSysTickHandler>
  }
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031e4:	2100      	movs	r1, #0
 80031e6:	f06f 0004 	mvn.w	r0, #4
 80031ea:	f7ff ffbf 	bl	800316c <__NVIC_SetPriority>
#endif
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031fa:	f3ef 8305 	mrs	r3, IPSR
 80031fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003206:	f06f 0305 	mvn.w	r3, #5
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	e00c      	b.n	8003228 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <osKernelInitialize+0x44>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <osKernelInitialize+0x44>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800321c:	2300      	movs	r3, #0
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e002      	b.n	8003228 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003228:	687b      	ldr	r3, [r7, #4]
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000010c 	.word	0x2000010c

0800323c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003242:	f3ef 8305 	mrs	r3, IPSR
 8003246:	603b      	str	r3, [r7, #0]
  return(result);
 8003248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <osKernelStart+0x1a>
    stat = osErrorISR;
 800324e:	f06f 0305 	mvn.w	r3, #5
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	e010      	b.n	8003278 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <osKernelStart+0x48>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d109      	bne.n	8003272 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800325e:	f7ff ffbf 	bl	80031e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <osKernelStart+0x48>)
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003268:	f001 f95a 	bl	8004520 <vTaskStartScheduler>
      stat = osOK;
 800326c:	2300      	movs	r3, #0
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e002      	b.n	8003278 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000010c 	.word	0x2000010c

08003288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af04      	add	r7, sp, #16
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003298:	f3ef 8305 	mrs	r3, IPSR
 800329c:	617b      	str	r3, [r7, #20]
  return(result);
 800329e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d17e      	bne.n	80033a2 <osThreadNew+0x11a>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d07b      	beq.n	80033a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032ae:	2318      	movs	r3, #24
 80032b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d045      	beq.n	800334e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <osThreadNew+0x48>
        name = attr->name;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <osThreadNew+0x6e>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b38      	cmp	r3, #56	; 0x38
 80032e8:	d805      	bhi.n	80032f6 <osThreadNew+0x6e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <osThreadNew+0x72>
        return (NULL);
 80032f6:	2300      	movs	r3, #0
 80032f8:	e054      	b.n	80033a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <osThreadNew+0xa8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2ba7      	cmp	r3, #167	; 0xa7
 8003318:	d90a      	bls.n	8003330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <osThreadNew+0xa8>
        mem = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e010      	b.n	8003352 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10c      	bne.n	8003352 <osThreadNew+0xca>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <osThreadNew+0xca>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <osThreadNew+0xca>
          mem = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e001      	b.n	8003352 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d110      	bne.n	800337a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 feea 	bl	8004148 <xTaskCreateStatic>
 8003374:	4603      	mov	r3, r0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e013      	b.n	80033a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d110      	bne.n	80033a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	b29a      	uxth	r2, r3
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 ff35 	bl	8004202 <xTaskCreate>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <osThreadNew+0x11a>
            hTask = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033a2:	693b      	ldr	r3, [r7, #16]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <osThreadFlagsSet+0x1a>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da03      	bge.n	80033ce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80033c6:	f06f 0303 	mvn.w	r3, #3
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e035      	b.n	800343a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d4:	f3ef 8305 	mrs	r3, IPSR
 80033d8:	613b      	str	r3, [r7, #16]
  return(result);
 80033da:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2201      	movs	r2, #1
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	6978      	ldr	r0, [r7, #20]
 80033f2:	f001 fef5 	bl	80051e0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	2200      	movs	r2, #0
 80033fc:	9200      	str	r2, [sp, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f001 feec 	bl	80051e0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d015      	beq.n	800343a <osThreadFlagsSet+0x8e>
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <osThreadFlagsSet+0x98>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	e00c      	b.n	800343a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003420:	2300      	movs	r3, #0
 8003422:	2201      	movs	r2, #1
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f001 fe1a 	bl	8005060 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2200      	movs	r2, #0
 8003432:	2100      	movs	r1, #0
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f001 fe13 	bl	8005060 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003450:	f3ef 8305 	mrs	r3, IPSR
 8003454:	60bb      	str	r3, [r7, #8]
  return(result);
 8003456:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <osDelay+0x1c>
    stat = osErrorISR;
 800345c:	f06f 0305 	mvn.w	r3, #5
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e007      	b.n	8003474 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <osDelay+0x2c>
      vTaskDelay(ticks);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f001 f822 	bl	80044b8 <vTaskDelay>
    }
  }

  return (stat);
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800348a:	f3ef 8305 	mrs	r3, IPSR
 800348e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003490:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12d      	bne.n	80034f2 <osEventFlagsNew+0x74>
    mem = -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <osEventFlagsNew+0x3a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b1f      	cmp	r3, #31
 80034b0:	d902      	bls.n	80034b8 <osEventFlagsNew+0x3a>
        mem = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e00c      	b.n	80034d2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <osEventFlagsNew+0x54>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <osEventFlagsNew+0x54>
          mem = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e001      	b.n	80034d2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f841 	bl	8003564 <xEventGroupCreateStatic>
 80034e2:	6178      	str	r0, [r7, #20]
 80034e4:	e005      	b.n	80034f2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80034ec:	f000 f871 	bl	80035d2 <xEventGroupCreate>
 80034f0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80034f2:	697b      	ldr	r3, [r7, #20]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <vApplicationGetIdleTaskMemory+0x2c>)
 800350c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a06      	ldr	r2, [pc, #24]	; (800352c <vApplicationGetIdleTaskMemory+0x30>)
 8003512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000110 	.word	0x20000110
 800352c:	200001b8 	.word	0x200001b8

08003530 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <vApplicationGetTimerTaskMemory+0x2c>)
 8003540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4a06      	ldr	r2, [pc, #24]	; (8003560 <vApplicationGetTimerTaskMemory+0x30>)
 8003546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	200003b8 	.word	0x200003b8
 8003560:	20000460 	.word	0x20000460

08003564 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003588:	2320      	movs	r3, #32
 800358a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d00a      	beq.n	80035a8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60fb      	str	r3, [r7, #12]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f822 	bl	8003606 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80035c8:	697b      	ldr	r3, [r7, #20]
	}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80035d8:	2020      	movs	r0, #32
 80035da:	f002 fdb9 	bl	8006150 <pvPortMalloc>
 80035de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f808 	bl	8003606 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80035fc:	687b      	ldr	r3, [r7, #4]
	}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f103 0208 	add.w	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 0208 	add.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f103 0208 	add.w	r2, r3, #8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d103      	bne.n	80036c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e00c      	b.n	80036e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3308      	adds	r3, #8
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e002      	b.n	80036d6 <vListInsert+0x2e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d2f6      	bcs.n	80036d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d103      	bne.n	800374e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1e5a      	subs	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericReset+0x2a>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	60bb      	str	r3, [r7, #8]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800379a:	f002 fad3 	bl	8005d44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	3b01      	subs	r3, #1
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d114      	bne.n	800381a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3310      	adds	r3, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f989 	bl	8004b14 <xTaskRemoveFromEventList>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <xQueueGenericReset+0xcc>)
 800380a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	e009      	b.n	800382e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3310      	adds	r3, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fef1 	bl	8003606 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff feec 	bl	8003606 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800382e:	f002 fab9 	bl	8005da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08e      	sub	sp, #56	; 0x38
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <xQueueGenericCreateStatic+0x52>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <xQueueGenericCreateStatic+0x56>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <xQueueGenericCreateStatic+0x58>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	623b      	str	r3, [r7, #32]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueGenericCreateStatic+0x7e>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericCreateStatic+0x82>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericCreateStatic+0x84>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038de:	2350      	movs	r3, #80	; 0x50
 80038e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b50      	cmp	r3, #80	; 0x50
 80038e6:	d00a      	beq.n	80038fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	61bb      	str	r3, [r7, #24]
}
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003912:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f805 	bl	8003930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e002      	b.n	8003952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800395e:	2101      	movs	r1, #1
 8003960:	69b8      	ldr	r0, [r7, #24]
 8003962:	f7ff ff05 	bl	8003770 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	; 0x38
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003986:	2300      	movs	r3, #0
 8003988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSend+0x32>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <xQueueGenericSend+0x40>
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <xQueueGenericSend+0x44>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <xQueueGenericSend+0x46>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xQueueGenericSend+0x60>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x6e>
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x72>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x74>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueGenericSend+0x8e>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a06:	f001 fa9f 	bl	8004f48 <xTaskGetSchedulerState>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <xQueueGenericSend+0x9e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0xa2>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericSend+0xa4>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61fb      	str	r3, [r7, #28]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a36:	f002 f985 	bl	8005d44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <xQueueGenericSend+0xd4>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d129      	bne.n	8003aa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa0b 	bl	8003e6c <prvCopyDataToQueue>
 8003a56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f855 	bl	8004b14 <xTaskRemoveFromEventList>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a70:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <xQueueGenericSend+0x1f8>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	e00a      	b.n	8003a98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a88:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <xQueueGenericSend+0x1f8>)
 8003a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a98:	f002 f984 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e063      	b.n	8003b68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aa6:	f002 f97d 	bl	8005da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e05c      	b.n	8003b68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f891 	bl	8004be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac2:	f002 f96f 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac6:	f000 fd9b 	bl	8004600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aca:	f002 f93b 	bl	8005d44 <vPortEnterCritical>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d103      	bne.n	8003ae4 <xQueueGenericSend+0x16c>
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aea:	b25b      	sxtb	r3, r3
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d103      	bne.n	8003afa <xQueueGenericSend+0x182>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afa:	f002 f953 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003afe:	1d3a      	adds	r2, r7, #4
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f880 	bl	8004c0c <xTaskCheckForTimeOut>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d124      	bne.n	8003b5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b14:	f000 faa2 	bl	800405c <prvIsQueueFull>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d018      	beq.n	8003b50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	3310      	adds	r3, #16
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ffa4 	bl	8004a74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 fa2d 	bl	8003f8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b32:	f000 fdab 	bl	800468c <xTaskResumeAll>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f af7c 	bne.w	8003a36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <xQueueGenericSend+0x1f8>)
 8003b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	e772      	b.n	8003a36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 fa1b 	bl	8003f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b56:	f000 fd99 	bl	800468c <xTaskResumeAll>
 8003b5a:	e76c      	b.n	8003a36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5e:	f000 fa15 	bl	8003f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b62:	f000 fd93 	bl	800468c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3738      	adds	r7, #56	; 0x38
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b090      	sub	sp, #64	; 0x40
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <xQueueGenericSendFromISR+0x3c>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <xQueueGenericSendFromISR+0x40>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <xQueueGenericSendFromISR+0x42>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d103      	bne.n	8003bde <xQueueGenericSendFromISR+0x6a>
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <xQueueGenericSendFromISR+0x6e>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <xQueueGenericSendFromISR+0x70>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	623b      	str	r3, [r7, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bfe:	f002 fa67 	bl	80060d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c02:	f3ef 8211 	mrs	r2, BASEPRI
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	61fa      	str	r2, [r7, #28]
 8003c18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <xQueueGenericSendFromISR+0xbc>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d12f      	bne.n	8003c90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c46:	f000 f911 	bl	8003e6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d112      	bne.n	8003c7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	3324      	adds	r3, #36	; 0x24
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 ff57 	bl	8004b14 <xTaskRemoveFromEventList>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e007      	b.n	8003c8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	b25a      	sxtb	r2, r3
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c8e:	e001      	b.n	8003c94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3740      	adds	r7, #64	; 0x40
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	; 0x30
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <xQueueReceive+0x30>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	623b      	str	r3, [r7, #32]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <xQueueReceive+0x3e>
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <xQueueReceive+0x42>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <xQueueReceive+0x44>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <xQueueReceive+0x5e>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61fb      	str	r3, [r7, #28]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d0a:	f001 f91d 	bl	8004f48 <xTaskGetSchedulerState>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <xQueueReceive+0x6e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xQueueReceive+0x72>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xQueueReceive+0x74>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xQueueReceive+0x8e>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	61bb      	str	r3, [r7, #24]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d3a:	f002 f803 	bl	8005d44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01f      	beq.n	8003d8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4e:	f000 f8f7 	bl	8003f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00f      	beq.n	8003d82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	3310      	adds	r3, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fed4 	bl	8004b14 <xTaskRemoveFromEventList>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <xQueueReceive+0x1bc>)
 8003d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d82:	f002 f80f 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e069      	b.n	8003e5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d90:	f002 f808 	bl	8005da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e062      	b.n	8003e5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9e:	f107 0310 	add.w	r3, r7, #16
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff1c 	bl	8004be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dac:	f001 fffa 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003db0:	f000 fc26 	bl	8004600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db4:	f001 ffc6 	bl	8005d44 <vPortEnterCritical>
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d103      	bne.n	8003dce <xQueueReceive+0x122>
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d103      	bne.n	8003de4 <xQueueReceive+0x138>
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de4:	f001 ffde 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de8:	1d3a      	adds	r2, r7, #4
 8003dea:	f107 0310 	add.w	r3, r7, #16
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 ff0b 	bl	8004c0c <xTaskCheckForTimeOut>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d123      	bne.n	8003e44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfe:	f000 f917 	bl	8004030 <prvIsQueueEmpty>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	3324      	adds	r3, #36	; 0x24
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fe2f 	bl	8004a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e18:	f000 f8b8 	bl	8003f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e1c:	f000 fc36 	bl	800468c <xTaskResumeAll>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d189      	bne.n	8003d3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <xQueueReceive+0x1bc>)
 8003e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	e780      	b.n	8003d3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3a:	f000 f8a7 	bl	8003f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e3e:	f000 fc25 	bl	800468c <xTaskResumeAll>
 8003e42:	e77a      	b.n	8003d3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e46:	f000 f8a1 	bl	8003f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e4a:	f000 fc1f 	bl	800468c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e50:	f000 f8ee 	bl	8004030 <prvIsQueueEmpty>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f43f af6f 	beq.w	8003d3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	; 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d14d      	bne.n	8003f2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f874 	bl	8004f84 <xTaskPriorityDisinherit>
 8003e9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e043      	b.n	8003f2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d119      	bne.n	8003ee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6858      	ldr	r0, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	f002 fbb8 	bl	800662c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d32b      	bcc.n	8003f2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e026      	b.n	8003f2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68d8      	ldr	r0, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	f002 fb9e 	bl	800662c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	425b      	negs	r3, r3
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d207      	bcs.n	8003f1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	425b      	negs	r3, r3
 8003f16:	441a      	add	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d105      	bne.n	8003f2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f36:	697b      	ldr	r3, [r7, #20]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d018      	beq.n	8003f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d303      	bcc.n	8003f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68d9      	ldr	r1, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f002 fb54 	bl	800662c <memcpy>
	}
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f94:	f001 fed6 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fa0:	e011      	b.n	8003fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d012      	beq.n	8003fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fdb0 	bl	8004b14 <xTaskRemoveFromEventList>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fba:	f000 fe89 	bl	8004cd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dce9      	bgt.n	8003fa2 <prvUnlockQueue+0x16>
 8003fce:	e000      	b.n	8003fd2 <prvUnlockQueue+0x46>
					break;
 8003fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fda:	f001 fee3 	bl	8005da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fde:	f001 feb1 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fea:	e011      	b.n	8004010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d012      	beq.n	800401a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3310      	adds	r3, #16
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fd8b 	bl	8004b14 <xTaskRemoveFromEventList>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004004:	f000 fe64 	bl	8004cd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	3b01      	subs	r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004014:	2b00      	cmp	r3, #0
 8004016:	dce9      	bgt.n	8003fec <prvUnlockQueue+0x60>
 8004018:	e000      	b.n	800401c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800401a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	22ff      	movs	r2, #255	; 0xff
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004024:	f001 febe 	bl	8005da4 <vPortExitCritical>
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004038:	f001 fe84 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e001      	b.n	800404e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800404e:	f001 fea9 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004064:	f001 fe6e 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	429a      	cmp	r2, r3
 8004072:	d102      	bne.n	800407a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e001      	b.n	800407e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800407e:	f001 fe91 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004082:	68fb      	ldr	r3, [r7, #12]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e014      	b.n	80040c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800409c:	4a0f      	ldr	r2, [pc, #60]	; (80040dc <vQueueAddToRegistry+0x50>)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040a8:	490c      	ldr	r1, [pc, #48]	; (80040dc <vQueueAddToRegistry+0x50>)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <vQueueAddToRegistry+0x50>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040be:	e006      	b.n	80040ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	d9e7      	bls.n	800409c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000860 	.word	0x20000860

080040e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040f0:	f001 fe28 	bl	8005d44 <vPortEnterCritical>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d103      	bne.n	800410a <vQueueWaitForMessageRestricted+0x2a>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004110:	b25b      	sxtb	r3, r3
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d103      	bne.n	8004120 <vQueueWaitForMessageRestricted+0x40>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004120:	f001 fe40 	bl	8005da4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3324      	adds	r3, #36	; 0x24
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fcc1 	bl	8004abc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	f7ff ff26 	bl	8003f8c <prvUnlockQueue>
	}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08e      	sub	sp, #56	; 0x38
 800414c:	af04      	add	r7, sp, #16
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	623b      	str	r3, [r7, #32]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <xTaskCreateStatic+0x46>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	61fb      	str	r3, [r7, #28]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800418e:	23a8      	movs	r3, #168	; 0xa8
 8004190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2ba8      	cmp	r3, #168	; 0xa8
 8004196:	d00a      	beq.n	80041ae <xTaskCreateStatic+0x66>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61bb      	str	r3, [r7, #24]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01e      	beq.n	80041f4 <xTaskCreateStatic+0xac>
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041ce:	2300      	movs	r3, #0
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f850 	bl	800428c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ee:	f000 f8f3 	bl	80043d8 <prvAddNewTaskToReadyList>
 80041f2:	e001      	b.n	80041f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041f8:	697b      	ldr	r3, [r7, #20]
	}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3728      	adds	r7, #40	; 0x28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08c      	sub	sp, #48	; 0x30
 8004206:	af04      	add	r7, sp, #16
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f001 ff9a 	bl	8006150 <pvPortMalloc>
 800421c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004224:	20a8      	movs	r0, #168	; 0xa8
 8004226:	f001 ff93 	bl	8006150 <pvPortMalloc>
 800422a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
 8004238:	e005      	b.n	8004246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f002 f854 	bl	80062e8 <vPortFree>
 8004240:	e001      	b.n	8004246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d017      	beq.n	800427c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	2300      	movs	r3, #0
 8004258:	9303      	str	r3, [sp, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f80e 	bl	800428c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004270:	69f8      	ldr	r0, [r7, #28]
 8004272:	f000 f8b1 	bl	80043d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e002      	b.n	8004282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004282:	69bb      	ldr	r3, [r7, #24]
	}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	21a5      	movs	r1, #165	; 0xa5
 80042a6:	f002 f93d 	bl	8006524 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042b4:	3b01      	subs	r3, #1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	617b      	str	r3, [r7, #20]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01f      	beq.n	800432a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e012      	b.n	8004316 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	7819      	ldrb	r1, [r3, #0]
 80042f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	3334      	adds	r3, #52	; 0x34
 8004300:	460a      	mov	r2, r1
 8004302:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d9e9      	bls.n	80042f0 <prvInitialiseNewTask+0x64>
 800431c:	e000      	b.n	8004320 <prvInitialiseNewTask+0x94>
			{
				break;
 800431e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004328:	e003      	b.n	8004332 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b37      	cmp	r3, #55	; 0x37
 8004336:	d901      	bls.n	800433c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004338:	2337      	movs	r3, #55	; 0x37
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f977 	bl	8003646 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	3318      	adds	r3, #24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f972 	bl	8003646 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	3354      	adds	r3, #84	; 0x54
 800438c:	224c      	movs	r2, #76	; 0x4c
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f002 f8c7 	bl	8006524 <memset>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <prvInitialiseNewTask+0x140>)
 800439a:	659a      	str	r2, [r3, #88]	; 0x58
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <prvInitialiseNewTask+0x144>)
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <prvInitialiseNewTask+0x148>)
 80043a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	69b8      	ldr	r0, [r7, #24]
 80043ae:	f001 fb9d 	bl	8005aec <pxPortInitialiseStack>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20001ea0 	.word	0x20001ea0
 80043d0:	20001f08 	.word	0x20001f08
 80043d4:	20001f70 	.word	0x20001f70

080043d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043e0:	f001 fcb0 	bl	8005d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f6:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d110      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004404:	f000 fcde 	bl	8004dc4 <prvInitialiseTaskLists>
 8004408:	e00d      	b.n	8004426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800440a:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	d802      	bhi.n	8004426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 800442e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <prvAddNewTaskToReadyList+0xd4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d903      	bls.n	800444c <prvAddNewTaskToReadyList+0x74>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <prvAddNewTaskToReadyList+0xd4>)
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <prvAddNewTaskToReadyList+0xd8>)
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7ff f8fc 	bl	8003660 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004468:	f001 fc9c 	bl	8005da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d207      	bcs.n	8004492 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <prvAddNewTaskToReadyList+0xdc>)
 8004484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000d74 	.word	0x20000d74
 80044a0:	200008a0 	.word	0x200008a0
 80044a4:	20000d80 	.word	0x20000d80
 80044a8:	20000d90 	.word	0x20000d90
 80044ac:	20000d7c 	.word	0x20000d7c
 80044b0:	200008a4 	.word	0x200008a4
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <vTaskDelay+0x60>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <vTaskDelay+0x30>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60bb      	str	r3, [r7, #8]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044e8:	f000 f88a 	bl	8004600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ec:	2100      	movs	r1, #0
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 ff5a 	bl	80053a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044f4:	f000 f8ca 	bl	800468c <xTaskResumeAll>
 80044f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <vTaskDelay+0x64>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000d9c 	.word	0x20000d9c
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800452e:	463a      	mov	r2, r7
 8004530:	1d39      	adds	r1, r7, #4
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe ffe0 	bl	80034fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	9202      	str	r2, [sp, #8]
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2300      	movs	r3, #0
 800454c:	460a      	mov	r2, r1
 800454e:	4924      	ldr	r1, [pc, #144]	; (80045e0 <vTaskStartScheduler+0xc0>)
 8004550:	4824      	ldr	r0, [pc, #144]	; (80045e4 <vTaskStartScheduler+0xc4>)
 8004552:	f7ff fdf9 	bl	8004148 <xTaskCreateStatic>
 8004556:	4603      	mov	r3, r0
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <vTaskStartScheduler+0xc8>)
 800455a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800455c:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <vTaskStartScheduler+0xc8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004564:	2301      	movs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e001      	b.n	800456e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004574:	f000 ff6c 	bl	8005450 <xTimerCreateTimerTask>
 8004578:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d11b      	bne.n	80045b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
}
 8004592:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <vTaskStartScheduler+0xcc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3354      	adds	r3, #84	; 0x54
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <vTaskStartScheduler+0xd0>)
 800459c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <vTaskStartScheduler+0xd4>)
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <vTaskStartScheduler+0xd8>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <vTaskStartScheduler+0xdc>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045b2:	f001 fb25 	bl	8005c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045b6:	e00e      	b.n	80045d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d10a      	bne.n	80045d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60fb      	str	r3, [r7, #12]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <vTaskStartScheduler+0xb4>
}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08006718 	.word	0x08006718
 80045e4:	08004ce9 	.word	0x08004ce9
 80045e8:	20000d98 	.word	0x20000d98
 80045ec:	200008a0 	.word	0x200008a0
 80045f0:	2000005c 	.word	0x2000005c
 80045f4:	20000d94 	.word	0x20000d94
 80045f8:	20000d80 	.word	0x20000d80
 80045fc:	20000d78 	.word	0x20000d78

08004600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <vTaskSuspendAll+0x18>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a03      	ldr	r2, [pc, #12]	; (8004618 <vTaskSuspendAll+0x18>)
 800460c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20000d9c 	.word	0x20000d9c

0800461c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <prvGetExpectedIdleTime+0x5c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvGetExpectedIdleTime+0x60>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	e012      	b.n	8004668 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <prvGetExpectedIdleTime+0x64>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d902      	bls.n	8004650 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	e00b      	b.n	8004668 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	e005      	b.n	8004668 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <prvGetExpectedIdleTime+0x68>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <prvGetExpectedIdleTime+0x6c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8004668:	687b      	ldr	r3, [r7, #4]
	}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000d7c 	.word	0x20000d7c
 800467c:	200008a0 	.word	0x200008a0
 8004680:	200008a4 	.word	0x200008a4
 8004684:	20000d94 	.word	0x20000d94
 8004688:	20000d78 	.word	0x20000d78

0800468c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800469a:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <xTaskResumeAll+0x118>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	603b      	str	r3, [r7, #0]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046b8:	f001 fb44 	bl	8005d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046bc:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <xTaskResumeAll+0x118>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	4a38      	ldr	r2, [pc, #224]	; (80047a4 <xTaskResumeAll+0x118>)
 80046c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c6:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <xTaskResumeAll+0x118>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d162      	bne.n	8004794 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ce:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <xTaskResumeAll+0x11c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d05e      	beq.n	8004794 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d6:	e02f      	b.n	8004738 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <xTaskResumeAll+0x120>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3318      	adds	r3, #24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff f818 	bl	800371a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff f813 	bl	800371a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <xTaskResumeAll+0x124>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d903      	bls.n	8004708 <xTaskResumeAll+0x7c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <xTaskResumeAll+0x124>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <xTaskResumeAll+0x128>)
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7fe ff9e 	bl	8003660 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <xTaskResumeAll+0x12c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <xTaskResumeAll+0x130>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <xTaskResumeAll+0x120>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1cb      	bne.n	80046d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004746:	f000 fbdf 	bl	8004f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <xTaskResumeAll+0x134>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004756:	f000 f86f 	bl	8004838 <xTaskIncrementTick>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004760:	4b16      	ldr	r3, [pc, #88]	; (80047bc <xTaskResumeAll+0x130>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3b01      	subs	r3, #1
 800476a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f1      	bne.n	8004756 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <xTaskResumeAll+0x134>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004778:	4b10      	ldr	r3, [pc, #64]	; (80047bc <xTaskResumeAll+0x130>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <xTaskResumeAll+0x138>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004794:	f001 fb06 	bl	8005da4 <vPortExitCritical>

	return xAlreadyYielded;
 8004798:	68bb      	ldr	r3, [r7, #8]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000d9c 	.word	0x20000d9c
 80047a8:	20000d74 	.word	0x20000d74
 80047ac:	20000d34 	.word	0x20000d34
 80047b0:	20000d7c 	.word	0x20000d7c
 80047b4:	200008a4 	.word	0x200008a4
 80047b8:	200008a0 	.word	0x200008a0
 80047bc:	20000d88 	.word	0x20000d88
 80047c0:	20000d84 	.word	0x20000d84
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <xTaskGetTickCount+0x1c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047d4:	687b      	ldr	r3, [r7, #4]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000d78 	.word	0x20000d78

080047e8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <vTaskStepTick+0x48>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	441a      	add	r2, r3
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vTaskStepTick+0x4c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d90a      	bls.n	8004816 <vTaskStepTick+0x2e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <vTaskStepTick+0x48>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	4a04      	ldr	r2, [pc, #16]	; (8004830 <vTaskStepTick+0x48>)
 8004820:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000d78 	.word	0x20000d78
 8004834:	20000d94 	.word	0x20000d94

08004838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <xTaskIncrementTick+0x148>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 808f 	bne.w	800496a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800484c:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <xTaskIncrementTick+0x14c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004854:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <xTaskIncrementTick+0x14c>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d120      	bne.n	80048a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <xTaskIncrementTick+0x150>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <xTaskIncrementTick+0x48>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	603b      	str	r3, [r7, #0]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xTaskIncrementTick+0x46>
 8004880:	4b41      	ldr	r3, [pc, #260]	; (8004988 <xTaskIncrementTick+0x150>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	4b41      	ldr	r3, [pc, #260]	; (800498c <xTaskIncrementTick+0x154>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <xTaskIncrementTick+0x150>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4a3f      	ldr	r2, [pc, #252]	; (800498c <xTaskIncrementTick+0x154>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <xTaskIncrementTick+0x158>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <xTaskIncrementTick+0x158>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	f000 fb33 	bl	8004f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048a2:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d349      	bcc.n	8004940 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <xTaskIncrementTick+0x150>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	601a      	str	r2, [r3, #0]
					break;
 80048be:	e03f      	b.n	8004940 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c0:	4b31      	ldr	r3, [pc, #196]	; (8004988 <xTaskIncrementTick+0x150>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d203      	bcs.n	80048e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048de:	e02f      	b.n	8004940 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe ff18 	bl	800371a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3318      	adds	r3, #24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe ff0f 	bl	800371a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <xTaskIncrementTick+0x160>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d903      	bls.n	8004910 <xTaskIncrementTick+0xd8>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <xTaskIncrementTick+0x160>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <xTaskIncrementTick+0x164>)
 800491e:	441a      	add	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fe fe9a 	bl	8003660 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <xTaskIncrementTick+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	429a      	cmp	r2, r3
 8004938:	d3b8      	bcc.n	80048ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800493a:	2301      	movs	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493e:	e7b5      	b.n	80048ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004940:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <xTaskIncrementTick+0x168>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	4915      	ldr	r1, [pc, #84]	; (800499c <xTaskIncrementTick+0x164>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d901      	bls.n	800495c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <xTaskIncrementTick+0x16c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e004      	b.n	8004974 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <xTaskIncrementTick+0x170>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <xTaskIncrementTick+0x170>)
 8004972:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004974:	697b      	ldr	r3, [r7, #20]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000d9c 	.word	0x20000d9c
 8004984:	20000d78 	.word	0x20000d78
 8004988:	20000d2c 	.word	0x20000d2c
 800498c:	20000d30 	.word	0x20000d30
 8004990:	20000d8c 	.word	0x20000d8c
 8004994:	20000d94 	.word	0x20000d94
 8004998:	20000d7c 	.word	0x20000d7c
 800499c:	200008a4 	.word	0x200008a4
 80049a0:	200008a0 	.word	0x200008a0
 80049a4:	20000d88 	.word	0x20000d88
 80049a8:	20000d84 	.word	0x20000d84

080049ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049b2:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <vTaskSwitchContext+0xb0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <vTaskSwitchContext+0xb4>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c0:	e046      	b.n	8004a50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <vTaskSwitchContext+0xb4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <vTaskSwitchContext+0xb8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e010      	b.n	80049f2 <vTaskSwitchContext+0x46>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <vTaskSwitchContext+0x40>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <vTaskSwitchContext+0x3e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	491d      	ldr	r1, [pc, #116]	; (8004a68 <vTaskSwitchContext+0xbc>)
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0e4      	beq.n	80049d0 <vTaskSwitchContext+0x24>
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <vTaskSwitchContext+0xbc>)
 8004a12:	4413      	add	r3, r2
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3308      	adds	r3, #8
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d104      	bne.n	8004a36 <vTaskSwitchContext+0x8a>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <vTaskSwitchContext+0xc0>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <vTaskSwitchContext+0xb8>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <vTaskSwitchContext+0xc0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3354      	adds	r3, #84	; 0x54
 8004a4c:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <vTaskSwitchContext+0xc4>)
 8004a4e:	6013      	str	r3, [r2, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000d9c 	.word	0x20000d9c
 8004a60:	20000d88 	.word	0x20000d88
 8004a64:	20000d7c 	.word	0x20000d7c
 8004a68:	200008a4 	.word	0x200008a4
 8004a6c:	200008a0 	.word	0x200008a0
 8004a70:	2000005c 	.word	0x2000005c

08004a74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	60fb      	str	r3, [r7, #12]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <vTaskPlaceOnEventList+0x44>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3318      	adds	r3, #24
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe fe00 	bl	80036a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	6838      	ldr	r0, [r7, #0]
 8004aac:	f000 fc7c 	bl	80053a8 <prvAddCurrentTaskToDelayedList>
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200008a0 	.word	0x200008a0

08004abc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	617b      	str	r3, [r7, #20]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7fe fdb7 	bl	8003660 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f000 fc51 	bl	80053a8 <prvAddCurrentTaskToDelayedList>
	}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200008a0 	.word	0x200008a0

08004b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	60fb      	str	r3, [r7, #12]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	3318      	adds	r3, #24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fde8 	bl	800371a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <xTaskRemoveFromEventList+0xb4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11f      	bne.n	8004b92 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fddf 	bl	800371a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <xTaskRemoveFromEventList+0xb8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d903      	bls.n	8004b70 <xTaskRemoveFromEventList+0x5c>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <xTaskRemoveFromEventList+0xb8>)
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <xTaskRemoveFromEventList+0xbc>)
 8004b7e:	441a      	add	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7fe fd6a 	bl	8003660 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8004b8c:	f000 f9bc 	bl	8004f08 <prvResetNextTaskUnblockTime>
 8004b90:	e005      	b.n	8004b9e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3318      	adds	r3, #24
 8004b96:	4619      	mov	r1, r3
 8004b98:	480e      	ldr	r0, [pc, #56]	; (8004bd4 <xTaskRemoveFromEventList+0xc0>)
 8004b9a:	f7fe fd61 	bl	8003660 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <xTaskRemoveFromEventList+0xc4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d905      	bls.n	8004bb8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <xTaskRemoveFromEventList+0xc8>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e001      	b.n	8004bbc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bbc:	697b      	ldr	r3, [r7, #20]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000d9c 	.word	0x20000d9c
 8004bcc:	20000d7c 	.word	0x20000d7c
 8004bd0:	200008a4 	.word	0x200008a4
 8004bd4:	20000d34 	.word	0x20000d34
 8004bd8:	200008a0 	.word	0x200008a0
 8004bdc:	20000d88 	.word	0x20000d88

08004be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <vTaskInternalSetTimeOutState+0x24>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <vTaskInternalSetTimeOutState+0x28>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	605a      	str	r2, [r3, #4]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000d8c 	.word	0x20000d8c
 8004c08:	20000d78 	.word	0x20000d78

08004c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	613b      	str	r3, [r7, #16]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c4e:	f001 f879 	bl	8005d44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <xTaskCheckForTimeOut+0xbc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d102      	bne.n	8004c72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e023      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <xTaskCheckForTimeOut+0xc0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d007      	beq.n	8004c8e <xTaskCheckForTimeOut+0x82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e015      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d20b      	bcs.n	8004cb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff9b 	bl	8004be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	e004      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cba:	f001 f873 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000d78 	.word	0x20000d78
 8004ccc:	20000d8c 	.word	0x20000d8c

08004cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <vTaskMissedYield+0x14>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000d88 	.word	0x20000d88

08004ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cf0:	f000 f8a8 	bl	8004e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cf4:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <prvIdleTask+0x70>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d907      	bls.n	8004d0c <prvIdleTask+0x24>
			{
				taskYIELD();
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <prvIdleTask+0x74>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8004d0c:	f7ff fc86 	bl	800461c <prvGetExpectedIdleTime>
 8004d10:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d9eb      	bls.n	8004cf0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8004d18:	f7ff fc72 	bl	8004600 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <prvIdleTask+0x78>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <prvIdleTask+0x7c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d20a      	bcs.n	8004d3e <prvIdleTask+0x56>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60bb      	str	r3, [r7, #8]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8004d3e:	f7ff fc6d 	bl	800461c <prvGetExpectedIdleTime>
 8004d42:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d902      	bls.n	8004d50 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 f8ae 	bl	8005eac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8004d50:	f7ff fc9c 	bl	800468c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8004d54:	e7cc      	b.n	8004cf0 <prvIdleTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	200008a4 	.word	0x200008a4
 8004d5c:	e000ed04 	.word	0xe000ed04
 8004d60:	20000d94 	.word	0x20000d94
 8004d64:	20000d78 	.word	0x20000d78

08004d68 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8004d72:	2301      	movs	r3, #1
 8004d74:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <eTaskConfirmSleepModeStatus+0x4c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	71fb      	strb	r3, [r7, #7]
 8004d82:	e010      	b.n	8004da6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <eTaskConfirmSleepModeStatus+0x50>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	71fb      	strb	r3, [r7, #7]
 8004d90:	e009      	b.n	8004da6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <eTaskConfirmSleepModeStatus+0x54>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <eTaskConfirmSleepModeStatus+0x58>)
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	1acb      	subs	r3, r1, r3
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d101      	bne.n	8004da6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8004da2:	2302      	movs	r3, #2
 8004da4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8004da6:	79fb      	ldrb	r3, [r7, #7]
	}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000d34 	.word	0x20000d34
 8004db8:	20000d88 	.word	0x20000d88
 8004dbc:	20000d60 	.word	0x20000d60
 8004dc0:	20000d74 	.word	0x20000d74

08004dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e00c      	b.n	8004dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <prvInitialiseTaskLists+0x60>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fc11 	bl	8003606 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b37      	cmp	r3, #55	; 0x37
 8004dee:	d9ef      	bls.n	8004dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df0:	480d      	ldr	r0, [pc, #52]	; (8004e28 <prvInitialiseTaskLists+0x64>)
 8004df2:	f7fe fc08 	bl	8003606 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004df6:	480d      	ldr	r0, [pc, #52]	; (8004e2c <prvInitialiseTaskLists+0x68>)
 8004df8:	f7fe fc05 	bl	8003606 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dfc:	480c      	ldr	r0, [pc, #48]	; (8004e30 <prvInitialiseTaskLists+0x6c>)
 8004dfe:	f7fe fc02 	bl	8003606 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e02:	480c      	ldr	r0, [pc, #48]	; (8004e34 <prvInitialiseTaskLists+0x70>)
 8004e04:	f7fe fbff 	bl	8003606 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e08:	480b      	ldr	r0, [pc, #44]	; (8004e38 <prvInitialiseTaskLists+0x74>)
 8004e0a:	f7fe fbfc 	bl	8003606 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <prvInitialiseTaskLists+0x78>)
 8004e10:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <prvInitialiseTaskLists+0x64>)
 8004e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvInitialiseTaskLists+0x7c>)
 8004e16:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <prvInitialiseTaskLists+0x68>)
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200008a4 	.word	0x200008a4
 8004e28:	20000d04 	.word	0x20000d04
 8004e2c:	20000d18 	.word	0x20000d18
 8004e30:	20000d34 	.word	0x20000d34
 8004e34:	20000d48 	.word	0x20000d48
 8004e38:	20000d60 	.word	0x20000d60
 8004e3c:	20000d2c 	.word	0x20000d2c
 8004e40:	20000d30 	.word	0x20000d30

08004e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4a:	e019      	b.n	8004e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e4c:	f000 ff7a 	bl	8005d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <prvCheckTasksWaitingTermination+0x50>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe fc5c 	bl	800371a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e76:	f000 ff95 	bl	8005da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f810 	bl	8004ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e1      	bne.n	8004e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000d48 	.word	0x20000d48
 8004e98:	20000d74 	.word	0x20000d74
 8004e9c:	20000d5c 	.word	0x20000d5c

08004ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3354      	adds	r3, #84	; 0x54
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fb41 	bl	8006534 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d108      	bne.n	8004ece <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fa11 	bl	80062e8 <vPortFree>
				vPortFree( pxTCB );
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fa0e 	bl	80062e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ecc:	e018      	b.n	8004f00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d103      	bne.n	8004ee0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 fa05 	bl	80062e8 <vPortFree>
	}
 8004ede:	e00f      	b.n	8004f00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d00a      	beq.n	8004f00 <prvDeleteTCB+0x60>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60fb      	str	r3, [r7, #12]
}
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <prvDeleteTCB+0x5e>
	}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <prvResetNextTaskUnblockTime+0x38>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <prvResetNextTaskUnblockTime+0x3c>)
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f20:	e008      	b.n	8004f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f22:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <prvResetNextTaskUnblockTime+0x38>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <prvResetNextTaskUnblockTime+0x3c>)
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000d2c 	.word	0x20000d2c
 8004f44:	20000d94 	.word	0x20000d94

08004f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <xTaskGetSchedulerState+0x34>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f56:	2301      	movs	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e008      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <xTaskGetSchedulerState+0x38>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f64:	2302      	movs	r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e001      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6e:	687b      	ldr	r3, [r7, #4]
	}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000d80 	.word	0x20000d80
 8004f80:	20000d9c 	.word	0x20000d9c

08004f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d056      	beq.n	8005048 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <xTaskPriorityDisinherit+0xd0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d00a      	beq.n	8004fba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d02c      	beq.n	8005048 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d128      	bne.n	8005048 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fb8d 	bl	800371a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <xTaskPriorityDisinherit+0xd4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d903      	bls.n	8005028 <xTaskPriorityDisinherit+0xa4>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4a0c      	ldr	r2, [pc, #48]	; (8005058 <xTaskPriorityDisinherit+0xd4>)
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <xTaskPriorityDisinherit+0xd8>)
 8005036:	441a      	add	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7fe fb0e 	bl	8003660 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005048:	697b      	ldr	r3, [r7, #20]
	}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200008a0 	.word	0x200008a0
 8005058:	20000d7c 	.word	0x20000d7c
 800505c:	200008a4 	.word	0x200008a4

08005060 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005070:	2301      	movs	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <xTaskGenericNotify+0x30>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61bb      	str	r3, [r7, #24]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005094:	f000 fe56 	bl	8005d44 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80050ae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d82d      	bhi.n	800511a <xTaskGenericNotify+0xba>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <xTaskGenericNotify+0x64>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	0800513d 	.word	0x0800513d
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050eb 	.word	0x080050eb
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	08005105 	.word	0x08005105
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80050e8:	e02b      	b.n	8005142 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80050f8:	e023      	b.n	8005142 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8005102:	e01e      	b.n	8005142 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005104:	7ffb      	ldrb	r3, [r7, #31]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d004      	beq.n	8005114 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005112:	e016      	b.n	8005142 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8005114:	2300      	movs	r3, #0
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005118:	e013      	b.n	8005142 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d00c      	beq.n	8005140 <xTaskGenericNotify+0xe0>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	617b      	str	r3, [r7, #20]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskGenericNotify+0xda>
					break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <xTaskGenericNotify+0xe2>

					break;
 8005140:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d13c      	bne.n	80051c2 <xTaskGenericNotify+0x162>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe fae4 	bl	800371a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <xTaskGenericNotify+0x170>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <xTaskGenericNotify+0x106>
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <xTaskGenericNotify+0x170>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <xTaskGenericNotify+0x174>)
 8005174:	441a      	add	r2, r3
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7fe fa6f 	bl	8003660 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <xTaskGenericNotify+0x140>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	613b      	str	r3, [r7, #16]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <xTaskGenericNotify+0x13e>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80051a0:	f7ff feb2 	bl	8004f08 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <xTaskGenericNotify+0x178>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d907      	bls.n	80051c2 <xTaskGenericNotify+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <xTaskGenericNotify+0x17c>)
 80051b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80051c2:	f000 fdef 	bl	8005da4 <vPortExitCritical>

		return xReturn;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000d7c 	.word	0x20000d7c
 80051d4:	200008a4 	.word	0x200008a4
 80051d8:	200008a0 	.word	0x200008a0
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005210:	f000 ff5e 	bl	80060d0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005218:	f3ef 8211 	mrs	r2, BASEPRI
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	623a      	str	r2, [r7, #32]
 800522e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005230:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2202      	movs	r2, #2
 8005252:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d82f      	bhi.n	80052bc <xTaskGenericNotifyFromISR+0xdc>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <xTaskGenericNotifyFromISR+0x84>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052df 	.word	0x080052df
 8005268:	08005279 	.word	0x08005279
 800526c:	0800528b 	.word	0x0800528b
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052a5 	.word	0x080052a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	431a      	orrs	r2, r3
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8005288:	e02c      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8005298:	e024      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80052a2:	e01f      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d004      	beq.n	80052b6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80052b4:	e016      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80052ba:	e013      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d00c      	beq.n	80052e2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61bb      	str	r3, [r7, #24]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xTaskGenericNotifyFromISR+0xfc>
					break;
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80052e2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d146      	bne.n	800537a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	617b      	str	r3, [r7, #20]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <xTaskGenericNotifyFromISR+0x1b0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	3304      	adds	r3, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe f9ff 	bl	800371a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xTaskGenericNotifyFromISR+0x1b4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d903      	bls.n	8005330 <xTaskGenericNotifyFromISR+0x150>
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <xTaskGenericNotifyFromISR+0x1b4>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a16      	ldr	r2, [pc, #88]	; (8005398 <xTaskGenericNotifyFromISR+0x1b8>)
 800533e:	441a      	add	r2, r3
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f7fe f98a 	bl	8003660 <vListInsertEnd>
 800534c:	e005      	b.n	800535a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	3318      	adds	r3, #24
 8005352:	4619      	mov	r1, r3
 8005354:	4811      	ldr	r0, [pc, #68]	; (800539c <xTaskGenericNotifyFromISR+0x1bc>)
 8005356:	f7fe f983 	bl	8003660 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <xTaskGenericNotifyFromISR+0x1c0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d908      	bls.n	800537a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <xTaskGenericNotifyFromISR+0x1c4>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f383 8811 	msr	BASEPRI, r3
}
 8005384:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005388:	4618      	mov	r0, r3
 800538a:	3738      	adds	r7, #56	; 0x38
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000d9c 	.word	0x20000d9c
 8005394:	20000d7c 	.word	0x20000d7c
 8005398:	200008a4 	.word	0x200008a4
 800539c:	20000d34 	.word	0x20000d34
 80053a0:	200008a0 	.word	0x200008a0
 80053a4:	20000d88 	.word	0x20000d88

080053a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <prvAddCurrentTaskToDelayedList+0x90>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053b8:	4b20      	ldr	r3, [pc, #128]	; (800543c <prvAddCurrentTaskToDelayedList+0x94>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe f9ab 	bl	800371a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d10a      	bne.n	80053e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053d2:	4b1a      	ldr	r3, [pc, #104]	; (800543c <prvAddCurrentTaskToDelayedList+0x94>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4819      	ldr	r0, [pc, #100]	; (8005440 <prvAddCurrentTaskToDelayedList+0x98>)
 80053dc:	f7fe f940 	bl	8003660 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053e0:	e026      	b.n	8005430 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <prvAddCurrentTaskToDelayedList+0x94>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d209      	bcs.n	800540e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <prvAddCurrentTaskToDelayedList+0x94>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fe f94e 	bl	80036a8 <vListInsert>
}
 800540c:	e010      	b.n	8005430 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvAddCurrentTaskToDelayedList+0x94>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f7fe f944 	bl	80036a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d202      	bcs.n	8005430 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <prvAddCurrentTaskToDelayedList+0xa4>)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6013      	str	r3, [r2, #0]
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000d78 	.word	0x20000d78
 800543c:	200008a0 	.word	0x200008a0
 8005440:	20000d60 	.word	0x20000d60
 8005444:	20000d30 	.word	0x20000d30
 8005448:	20000d2c 	.word	0x20000d2c
 800544c:	20000d94 	.word	0x20000d94

08005450 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800545a:	f000 fb07 	bl	8005a6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800545e:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <xTimerCreateTimerTask+0x80>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d021      	beq.n	80054aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800546e:	1d3a      	adds	r2, r7, #4
 8005470:	f107 0108 	add.w	r1, r7, #8
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe f859 	bl	8003530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	9202      	str	r2, [sp, #8]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	2318      	movs	r3, #24
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	460a      	mov	r2, r1
 8005490:	4910      	ldr	r1, [pc, #64]	; (80054d4 <xTimerCreateTimerTask+0x84>)
 8005492:	4811      	ldr	r0, [pc, #68]	; (80054d8 <xTimerCreateTimerTask+0x88>)
 8005494:	f7fe fe58 	bl	8004148 <xTaskCreateStatic>
 8005498:	4603      	mov	r3, r0
 800549a:	4a10      	ldr	r2, [pc, #64]	; (80054dc <xTimerCreateTimerTask+0x8c>)
 800549c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <xTimerCreateTimerTask+0x8c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054c6:	697b      	ldr	r3, [r7, #20]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000dd0 	.word	0x20000dd0
 80054d4:	08006720 	.word	0x08006720
 80054d8:	08005615 	.word	0x08005615
 80054dc:	20000dd4 	.word	0x20000dd4

080054e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xTimerGenericCommand+0x2e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	623b      	str	r3, [r7, #32]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <xTimerGenericCommand+0x98>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02a      	beq.n	800556c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b05      	cmp	r3, #5
 8005526:	dc18      	bgt.n	800555a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005528:	f7ff fd0e 	bl	8004f48 <xTaskGetSchedulerState>
 800552c:	4603      	mov	r3, r0
 800552e:	2b02      	cmp	r3, #2
 8005530:	d109      	bne.n	8005546 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <xTimerGenericCommand+0x98>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f107 0110 	add.w	r1, r7, #16
 800553a:	2300      	movs	r3, #0
 800553c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553e:	f7fe fa1b 	bl	8003978 <xQueueGenericSend>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24
 8005544:	e012      	b.n	800556c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <xTimerGenericCommand+0x98>)
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	f107 0110 	add.w	r1, r7, #16
 800554e:	2300      	movs	r3, #0
 8005550:	2200      	movs	r2, #0
 8005552:	f7fe fa11 	bl	8003978 <xQueueGenericSend>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24
 8005558:	e008      	b.n	800556c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <xTimerGenericCommand+0x98>)
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f107 0110 	add.w	r1, r7, #16
 8005562:	2300      	movs	r3, #0
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	f7fe fb05 	bl	8003b74 <xQueueGenericSendFromISR>
 800556a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800556e:	4618      	mov	r0, r3
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000dd0 	.word	0x20000dd0

0800557c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <prvProcessExpiredTimer+0x94>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe f8c0 	bl	800371a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d022      	beq.n	80055ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	18d1      	adds	r1, r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	6978      	ldr	r0, [r7, #20]
 80055b6:	f000 f8d1 	bl	800575c <prvInsertTimerInActiveList>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01f      	beq.n	8005600 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	2100      	movs	r1, #0
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff ff88 	bl	80054e0 <xTimerGenericCommand>
 80055d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d113      	bne.n	8005600 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	60fb      	str	r3, [r7, #12]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	4798      	blx	r3
}
 8005608:	bf00      	nop
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000dc8 	.word	0x20000dc8

08005614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f857 	bl	80056d4 <prvGetNextExpireTime>
 8005626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f803 	bl	8005638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005632:	f000 f8d5 	bl	80057e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005636:	e7f1      	b.n	800561c <prvTimerTask+0x8>

08005638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005642:	f7fe ffdd 	bl	8004600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f866 	bl	800571c <prvSampleTimeNow>
 8005650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d130      	bne.n	80056ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <prvProcessTimerOrBlockTask+0x3c>
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	429a      	cmp	r2, r3
 8005664:	d806      	bhi.n	8005674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005666:	f7ff f811 	bl	800468c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff85 	bl	800557c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005672:	e024      	b.n	80056be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <prvProcessTimerOrBlockTask+0x90>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <prvProcessTimerOrBlockTask+0x50>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <prvProcessTimerOrBlockTask+0x52>
 8005688:	2300      	movs	r3, #0
 800568a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <prvProcessTimerOrBlockTask+0x94>)
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4619      	mov	r1, r3
 800569a:	f7fe fd21 	bl	80040e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800569e:	f7fe fff5 	bl	800468c <xTaskResumeAll>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <prvProcessTimerOrBlockTask+0x98>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
}
 80056b8:	e001      	b.n	80056be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ba:	f7fe ffe7 	bl	800468c <xTaskResumeAll>
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000dcc 	.word	0x20000dcc
 80056cc:	20000dd0 	.word	0x20000dd0
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <prvGetNextExpireTime+0x44>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <prvGetNextExpireTime+0x16>
 80056e6:	2201      	movs	r2, #1
 80056e8:	e000      	b.n	80056ec <prvGetNextExpireTime+0x18>
 80056ea:	2200      	movs	r2, #0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <prvGetNextExpireTime+0x44>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e001      	b.n	8005708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005708:	68fb      	ldr	r3, [r7, #12]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000dc8 	.word	0x20000dc8

0800571c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005724:	f7ff f850 	bl	80047c8 <xTaskGetTickCount>
 8005728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvSampleTimeNow+0x3c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d205      	bcs.n	8005740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005734:	f000 f936 	bl	80059a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e002      	b.n	8005746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005746:	4a04      	ldr	r2, [pc, #16]	; (8005758 <prvSampleTimeNow+0x3c>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800574c:	68fb      	ldr	r3, [r7, #12]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000dd8 	.word	0x20000dd8

0800575c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d812      	bhi.n	80057a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e01b      	b.n	80057ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005796:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <prvInsertTimerInActiveList+0x7c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7fd ff81 	bl	80036a8 <vListInsert>
 80057a6:	e012      	b.n	80057ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d206      	bcs.n	80057be <prvInsertTimerInActiveList+0x62>
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d302      	bcc.n	80057be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e007      	b.n	80057ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <prvInsertTimerInActiveList+0x80>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7fd ff6d 	bl	80036a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057ce:	697b      	ldr	r3, [r7, #20]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000dcc 	.word	0x20000dcc
 80057dc:	20000dc8 	.word	0x20000dc8

080057e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057e6:	e0ca      	b.n	800597e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da18      	bge.n	8005820 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	3304      	adds	r3, #4
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	61fb      	str	r3, [r7, #28]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005816:	6850      	ldr	r0, [r2, #4]
 8005818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581a:	6892      	ldr	r2, [r2, #8]
 800581c:	4611      	mov	r1, r2
 800581e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f2c0 80ab 	blt.w	800597e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd ff6e 	bl	800371a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800583e:	463b      	mov	r3, r7
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff6b 	bl	800571c <prvSampleTimeNow>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b09      	cmp	r3, #9
 800584c:	f200 8096 	bhi.w	800597c <prvProcessReceivedCommands+0x19c>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <prvProcessReceivedCommands+0x78>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	08005881 	.word	0x08005881
 800585c:	08005881 	.word	0x08005881
 8005860:	08005881 	.word	0x08005881
 8005864:	080058f5 	.word	0x080058f5
 8005868:	08005909 	.word	0x08005909
 800586c:	08005953 	.word	0x08005953
 8005870:	08005881 	.word	0x08005881
 8005874:	08005881 	.word	0x08005881
 8005878:	080058f5 	.word	0x080058f5
 800587c:	08005909 	.word	0x08005909
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	18d1      	adds	r1, r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a0:	f7ff ff5c 	bl	800575c <prvInsertTimerInActiveList>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d069      	beq.n	800597e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d05e      	beq.n	800597e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	441a      	add	r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d2:	f7ff fe05 	bl	80054e0 <xTimerGenericCommand>
 80058d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d14f      	bne.n	800597e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61bb      	str	r3, [r7, #24]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005906:	e03a      	b.n	800597e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	617b      	str	r3, [r7, #20]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	18d1      	adds	r1, r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594c:	f7ff ff06 	bl	800575c <prvInsertTimerInActiveList>
					break;
 8005950:	e015      	b.n	800597e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005962:	f000 fcc1 	bl	80062e8 <vPortFree>
 8005966:	e00a      	b.n	800597e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	b2da      	uxtb	r2, r3
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800597a:	e000      	b.n	800597e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800597c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <prvProcessReceivedCommands+0x1c0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1d39      	adds	r1, r7, #4
 8005984:	2200      	movs	r2, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe f990 	bl	8003cac <xQueueReceive>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	f47f af2a 	bne.w	80057e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	3730      	adds	r7, #48	; 0x30
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000dd0 	.word	0x20000dd0

080059a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059aa:	e048      	b.n	8005a3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b6:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fea8 	bl	800371a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02e      	beq.n	8005a3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d90e      	bls.n	8005a10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f7fd fe4d 	bl	80036a8 <vListInsert>
 8005a0e:	e016      	b.n	8005a3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a10:	2300      	movs	r3, #0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff fd60 	bl	80054e0 <xTimerGenericCommand>
 8005a20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	603b      	str	r3, [r7, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1b1      	bne.n	80059ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <prvSwitchTimerLists+0xc4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <prvSwitchTimerLists+0xc0>)
 8005a54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a56:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <prvSwitchTimerLists+0xc4>)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6013      	str	r3, [r2, #0]
}
 8005a5c:	bf00      	nop
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000dc8 	.word	0x20000dc8
 8005a68:	20000dcc 	.word	0x20000dcc

08005a6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a72:	f000 f967 	bl	8005d44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <prvCheckForValidListAndQueue+0x60>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d120      	bne.n	8005ac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a7e:	4814      	ldr	r0, [pc, #80]	; (8005ad0 <prvCheckForValidListAndQueue+0x64>)
 8005a80:	f7fd fdc1 	bl	8003606 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a84:	4813      	ldr	r0, [pc, #76]	; (8005ad4 <prvCheckForValidListAndQueue+0x68>)
 8005a86:	f7fd fdbe 	bl	8003606 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <prvCheckForValidListAndQueue+0x6c>)
 8005a8c:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <prvCheckForValidListAndQueue+0x64>)
 8005a8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <prvCheckForValidListAndQueue+0x70>)
 8005a92:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <prvCheckForValidListAndQueue+0x68>)
 8005a94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a96:	2300      	movs	r3, #0
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <prvCheckForValidListAndQueue+0x74>)
 8005a9c:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <prvCheckForValidListAndQueue+0x78>)
 8005a9e:	2110      	movs	r1, #16
 8005aa0:	200a      	movs	r0, #10
 8005aa2:	f7fd fecd 	bl	8003840 <xQueueGenericCreateStatic>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <prvCheckForValidListAndQueue+0x60>)
 8005aaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <prvCheckForValidListAndQueue+0x60>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <prvCheckForValidListAndQueue+0x60>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	490b      	ldr	r1, [pc, #44]	; (8005ae8 <prvCheckForValidListAndQueue+0x7c>)
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fae6 	bl	800408c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ac0:	f000 f970 	bl	8005da4 <vPortExitCritical>
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000dd0 	.word	0x20000dd0
 8005ad0:	20000da0 	.word	0x20000da0
 8005ad4:	20000db4 	.word	0x20000db4
 8005ad8:	20000dc8 	.word	0x20000dc8
 8005adc:	20000dcc 	.word	0x20000dcc
 8005ae0:	20000e7c 	.word	0x20000e7c
 8005ae4:	20000ddc 	.word	0x20000ddc
 8005ae8:	08006728 	.word	0x08006728

08005aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b04      	subs	r3, #4
 8005afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f023 0201 	bic.w	r2, r3, #1
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b04      	subs	r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <pxPortInitialiseStack+0x64>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3b14      	subs	r3, #20
 8005b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3b04      	subs	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f06f 0202 	mvn.w	r2, #2
 8005b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3b20      	subs	r3, #32
 8005b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	08005b55 	.word	0x08005b55

08005b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <prvTaskExitError+0x54>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d00a      	beq.n	8005b7e <prvTaskExitError+0x2a>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60fb      	str	r3, [r7, #12]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <prvTaskExitError+0x28>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60bb      	str	r3, [r7, #8]
}
 8005b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b92:	bf00      	nop
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0fc      	beq.n	8005b94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	2000000c 	.word	0x2000000c
 8005bac:	00000000 	.word	0x00000000

08005bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <pxCurrentTCBConst2>)
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f380 8809 	msr	PSP, r0
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8811 	msr	BASEPRI, r0
 8005bca:	4770      	bx	lr
 8005bcc:	f3af 8000 	nop.w

08005bd0 <pxCurrentTCBConst2>:
 8005bd0:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bd8:	4808      	ldr	r0, [pc, #32]	; (8005bfc <prvPortStartFirstTask+0x24>)
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f380 8808 	msr	MSP, r0
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f380 8814 	msr	CONTROL, r0
 8005bea:	b662      	cpsie	i
 8005bec:	b661      	cpsie	f
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	df00      	svc	0
 8005bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed08 	.word	0xe000ed08

08005c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c06:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <xPortStartScheduler+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x26>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <xPortStartScheduler+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10a      	bne.n	8005c46 <xPortStartScheduler+0x46>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <xPortStartScheduler+0x130>)
 8005c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c74:	e009      	b.n	8005c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b80      	cmp	r3, #128	; 0x80
 8005c94:	d0ef      	beq.n	8005c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1c3 0307 	rsb	r3, r3, #7
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00a      	beq.n	8005cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60bb      	str	r3, [r7, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <xPortStartScheduler+0x134>)
 8005ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cee:	f000 f9a9 	bl	8006044 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <xPortStartScheduler+0x13c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cf8:	f000 f9e0 	bl	80060bc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xPortStartScheduler+0x140>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <xPortStartScheduler+0x140>)
 8005d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d08:	f7ff ff66 	bl	8005bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d0c:	f7fe fe4e 	bl	80049ac <vTaskSwitchContext>
	prvTaskExitError();
 8005d10:	f7ff ff20 	bl	8005b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed00 	.word	0xe000ed00
 8005d24:	410fc271 	.word	0x410fc271
 8005d28:	410fc270 	.word	0x410fc270
 8005d2c:	e000e400 	.word	0xe000e400
 8005d30:	20000ed8 	.word	0x20000ed8
 8005d34:	20000edc 	.word	0x20000edc
 8005d38:	e000ed20 	.word	0xe000ed20
 8005d3c:	2000000c 	.word	0x2000000c
 8005d40:	e000ef34 	.word	0xe000ef34

08005d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	607b      	str	r3, [r7, #4]
}
 8005d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10f      	bne.n	8005d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortEnterCritical+0x5c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	603b      	str	r3, [r7, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <vPortEnterCritical+0x4a>
	}
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <vPortExitCritical+0x50>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <vPortExitCritical+0x24>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <vPortExitCritical+0x50>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <vPortExitCritical+0x42>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f383 8811 	msr	BASEPRI, r3
}
 8005de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000000c 	.word	0x2000000c
	...

08005e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e00:	f3ef 8009 	mrs	r0, PSP
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <pxCurrentTCBConst>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f01e 0f10 	tst.w	lr, #16
 8005e10:	bf08      	it	eq
 8005e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	6010      	str	r0, [r2, #0]
 8005e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e24:	f380 8811 	msr	BASEPRI, r0
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f7fe fdbc 	bl	80049ac <vTaskSwitchContext>
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f380 8811 	msr	BASEPRI, r0
 8005e3c:	bc09      	pop	{r0, r3}
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e46:	f01e 0f10 	tst.w	lr, #16
 8005e4a:	bf08      	it	eq
 8005e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e50:	f380 8809 	msr	PSP, r0
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w

08005e60 <pxCurrentTCBConst>:
 8005e60:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e82:	f7fe fcd9 	bl	8004838 <xTaskIncrementTick>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <xPortSysTickHandler+0x40>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8005eb4:	4b5d      	ldr	r3, [pc, #372]	; (800602c <vPortSuppressTicksAndSleep+0x180>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d902      	bls.n	8005ec4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8005ebe:	4b5b      	ldr	r3, [pc, #364]	; (800602c <vPortSuppressTicksAndSleep+0x180>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8005ec4:	4b5a      	ldr	r3, [pc, #360]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a59      	ldr	r2, [pc, #356]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8005ed0:	4b58      	ldr	r3, [pc, #352]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4957      	ldr	r1, [pc, #348]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005eda:	6809      	ldr	r1, [r1, #0]
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8005ee4:	4b55      	ldr	r3, [pc, #340]	; (800603c <vPortSuppressTicksAndSleep+0x190>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d904      	bls.n	8005ef8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <vPortSuppressTicksAndSleep+0x190>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8005ef8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8005efa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8005efe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8005f02:	f7fe ff31 	bl	8004d68 <eTaskConfirmSleepModeStatus>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d110      	bne.n	8005f2e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005f0c:	4b49      	ldr	r3, [pc, #292]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8005f0e:	4a4c      	ldr	r2, [pc, #304]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005f14:	4b46      	ldr	r3, [pc, #280]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a45      	ldr	r2, [pc, #276]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005f20:	4b45      	ldr	r3, [pc, #276]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a46      	ldr	r2, [pc, #280]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 8005f26:	3b01      	subs	r3, #1
 8005f28:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8005f2a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8005f2c:	e079      	b.n	8006022 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8005f2e:	4a44      	ldr	r2, [pc, #272]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f34:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3c      	ldr	r2, [pc, #240]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	6938      	ldr	r0, [r7, #16]
 8005f50:	f7fa f93e 	bl	80001d0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8005f5a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8005f5e:	bf30      	wfi
				__asm volatile( "isb" );
 8005f60:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fa f945 	bl	80001f4 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8005f6a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8005f6c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005f70:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8005f74:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8005f76:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005f7a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8005f7e:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f80:	2206      	movs	r2, #6
 8005f82:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01d      	beq.n	8005fcc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4b27      	ldr	r3, [pc, #156]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	1acb      	subs	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <vPortSuppressTicksAndSleep+0x190>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d304      	bcc.n	8005fb6 <vPortSuppressTicksAndSleep+0x10a>
 8005fac:	4b22      	ldr	r3, [pc, #136]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d903      	bls.n	8005fbe <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8005fbe:	4a20      	ldr	r2, [pc, #128]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e018      	b.n	8005ffe <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	fb03 f202 	mul.w	r2, r3, r2
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8005fde:	4b16      	ldr	r3, [pc, #88]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a12      	ldr	r2, [pc, #72]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	fb03 f202 	mul.w	r2, r3, r2
 8005ff6:	4912      	ldr	r1, [pc, #72]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <vPortSuppressTicksAndSleep+0x188>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <vPortSuppressTicksAndSleep+0x184>)
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8006010:	69b8      	ldr	r0, [r7, #24]
 8006012:	f7fe fbe9 	bl	80047e8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <vPortSuppressTicksAndSleep+0x18c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a09      	ldr	r2, [pc, #36]	; (8006040 <vPortSuppressTicksAndSleep+0x194>)
 800601c:	3b01      	subs	r3, #1
 800601e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006020:	b662      	cpsie	i
	}
 8006022:	bf00      	nop
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000ed0 	.word	0x20000ed0
 8006030:	e000e010 	.word	0xe000e010
 8006034:	e000e018 	.word	0xe000e018
 8006038:	20000ecc 	.word	0x20000ecc
 800603c:	20000ed4 	.word	0x20000ed4
 8006040:	e000e014 	.word	0xe000e014

08006044 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006048:	4b14      	ldr	r3, [pc, #80]	; (800609c <vPortSetupTimerInterrupt+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <vPortSetupTimerInterrupt+0x5c>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <vPortSetupTimerInterrupt+0x60>)
 8006056:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <vPortSetupTimerInterrupt+0x60>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	4a10      	ldr	r2, [pc, #64]	; (80060a8 <vPortSetupTimerInterrupt+0x64>)
 8006066:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <vPortSetupTimerInterrupt+0x68>)
 800606a:	222d      	movs	r2, #45	; 0x2d
 800606c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <vPortSetupTimerInterrupt+0x6c>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <vPortSetupTimerInterrupt+0x70>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <vPortSetupTimerInterrupt+0x58>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <vPortSetupTimerInterrupt+0x5c>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	099b      	lsrs	r3, r3, #6
 8006086:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <vPortSetupTimerInterrupt+0x74>)
 8006088:	3b01      	subs	r3, #1
 800608a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <vPortSetupTimerInterrupt+0x6c>)
 800608e:	2207      	movs	r2, #7
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000000 	.word	0x20000000
 80060a0:	10624dd3 	.word	0x10624dd3
 80060a4:	20000ecc 	.word	0x20000ecc
 80060a8:	20000ed0 	.word	0x20000ed0
 80060ac:	20000ed4 	.word	0x20000ed4
 80060b0:	e000e010 	.word	0xe000e010
 80060b4:	e000e018 	.word	0xe000e018
 80060b8:	e000e014 	.word	0xe000e014

080060bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060cc <vPortEnableVFP+0x10>
 80060c0:	6801      	ldr	r1, [r0, #0]
 80060c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060c6:	6001      	str	r1, [r0, #0]
 80060c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed88 	.word	0xe000ed88

080060d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060d6:	f3ef 8305 	mrs	r3, IPSR
 80060da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d914      	bls.n	800610c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060e2:	4a17      	ldr	r2, [pc, #92]	; (8006140 <vPortValidateInterruptPriority+0x70>)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060ec:	4b15      	ldr	r3, [pc, #84]	; (8006144 <vPortValidateInterruptPriority+0x74>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	7afa      	ldrb	r2, [r7, #11]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d20a      	bcs.n	800610c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	607b      	str	r3, [r7, #4]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <vPortValidateInterruptPriority+0x78>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <vPortValidateInterruptPriority+0x7c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d90a      	bls.n	8006132 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	603b      	str	r3, [r7, #0]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <vPortValidateInterruptPriority+0x60>
	}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	e000e3f0 	.word	0xe000e3f0
 8006144:	20000ed8 	.word	0x20000ed8
 8006148:	e000ed0c 	.word	0xe000ed0c
 800614c:	20000edc 	.word	0x20000edc

08006150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800615c:	f7fe fa50 	bl	8004600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006160:	4b5b      	ldr	r3, [pc, #364]	; (80062d0 <pvPortMalloc+0x180>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006168:	f000 f920 	bl	80063ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800616c:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <pvPortMalloc+0x184>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 8093 	bne.w	80062a0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01d      	beq.n	80061bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006180:	2208      	movs	r2, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2b00      	cmp	r3, #0
 8006190:	d014      	beq.n	80061bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f023 0307 	bic.w	r3, r3, #7
 8006198:	3308      	adds	r3, #8
 800619a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <pvPortMalloc+0x6c>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	617b      	str	r3, [r7, #20]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d06e      	beq.n	80062a0 <pvPortMalloc+0x150>
 80061c2:	4b45      	ldr	r3, [pc, #276]	; (80062d8 <pvPortMalloc+0x188>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d869      	bhi.n	80062a0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061cc:	4b43      	ldr	r3, [pc, #268]	; (80062dc <pvPortMalloc+0x18c>)
 80061ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061d0:	4b42      	ldr	r3, [pc, #264]	; (80062dc <pvPortMalloc+0x18c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061d6:	e004      	b.n	80061e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d903      	bls.n	80061f4 <pvPortMalloc+0xa4>
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f1      	bne.n	80061d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061f4:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <pvPortMalloc+0x180>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d050      	beq.n	80062a0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2208      	movs	r2, #8
 8006204:	4413      	add	r3, r2
 8006206:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	2308      	movs	r3, #8
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	429a      	cmp	r2, r3
 800621e:	d91f      	bls.n	8006260 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <pvPortMalloc+0xf8>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	613b      	str	r3, [r7, #16]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800625a:	69b8      	ldr	r0, [r7, #24]
 800625c:	f000 f908 	bl	8006470 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006260:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <pvPortMalloc+0x188>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <pvPortMalloc+0x188>)
 800626c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <pvPortMalloc+0x188>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <pvPortMalloc+0x190>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d203      	bcs.n	8006282 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <pvPortMalloc+0x188>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <pvPortMalloc+0x190>)
 8006280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <pvPortMalloc+0x184>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	431a      	orrs	r2, r3
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <pvPortMalloc+0x194>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <pvPortMalloc+0x194>)
 800629e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062a0:	f7fe f9f4 	bl	800468c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <pvPortMalloc+0x174>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60fb      	str	r3, [r7, #12]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <pvPortMalloc+0x172>
	return pvReturn;
 80062c4:	69fb      	ldr	r3, [r7, #28]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3728      	adds	r7, #40	; 0x28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20001e88 	.word	0x20001e88
 80062d4:	20001e9c 	.word	0x20001e9c
 80062d8:	20001e8c 	.word	0x20001e8c
 80062dc:	20001e80 	.word	0x20001e80
 80062e0:	20001e90 	.word	0x20001e90
 80062e4:	20001e94 	.word	0x20001e94

080062e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04d      	beq.n	8006396 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062fa:	2308      	movs	r3, #8
 80062fc:	425b      	negs	r3, r3
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <vPortFree+0xb8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <vPortFree+0x44>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60fb      	str	r3, [r7, #12]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <vPortFree+0x62>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60bb      	str	r3, [r7, #8]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <vPortFree+0xb8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01e      	beq.n	8006396 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11a      	bne.n	8006396 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <vPortFree+0xb8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	43db      	mvns	r3, r3
 800636a:	401a      	ands	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006370:	f7fe f946 	bl	8004600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <vPortFree+0xbc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4413      	add	r3, r2
 800637e:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <vPortFree+0xbc>)
 8006380:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f000 f874 	bl	8006470 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <vPortFree+0xc0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	4a06      	ldr	r2, [pc, #24]	; (80063a8 <vPortFree+0xc0>)
 8006390:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006392:	f7fe f97b 	bl	800468c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006396:	bf00      	nop
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20001e9c 	.word	0x20001e9c
 80063a4:	20001e8c 	.word	0x20001e8c
 80063a8:	20001e98 	.word	0x20001e98

080063ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063b2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80063b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063b8:	4b27      	ldr	r3, [pc, #156]	; (8006458 <prvHeapInit+0xac>)
 80063ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3307      	adds	r3, #7
 80063ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0307 	bic.w	r3, r3, #7
 80063d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	4a1f      	ldr	r2, [pc, #124]	; (8006458 <prvHeapInit+0xac>)
 80063dc:	4413      	add	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063e4:	4a1d      	ldr	r2, [pc, #116]	; (800645c <prvHeapInit+0xb0>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ea:	4b1c      	ldr	r3, [pc, #112]	; (800645c <prvHeapInit+0xb0>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4413      	add	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063f8:	2208      	movs	r2, #8
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a15      	ldr	r2, [pc, #84]	; (8006460 <prvHeapInit+0xb4>)
 800640c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <prvHeapInit+0xb4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <prvHeapInit+0xb4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <prvHeapInit+0xb4>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <prvHeapInit+0xb8>)
 800643a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a09      	ldr	r2, [pc, #36]	; (8006468 <prvHeapInit+0xbc>)
 8006442:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <prvHeapInit+0xc0>)
 8006446:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800644a:	601a      	str	r2, [r3, #0]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000ee0 	.word	0x20000ee0
 800645c:	20001e80 	.word	0x20001e80
 8006460:	20001e88 	.word	0x20001e88
 8006464:	20001e90 	.word	0x20001e90
 8006468:	20001e8c 	.word	0x20001e8c
 800646c:	20001e9c 	.word	0x20001e9c

08006470 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006478:	4b28      	ldr	r3, [pc, #160]	; (800651c <prvInsertBlockIntoFreeList+0xac>)
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e002      	b.n	8006484 <prvInsertBlockIntoFreeList+0x14>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d8f7      	bhi.n	800647e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d108      	bne.n	80064b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	441a      	add	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	441a      	add	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d118      	bne.n	80064f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <prvInsertBlockIntoFreeList+0xb0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d00d      	beq.n	80064ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	441a      	add	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e008      	b.n	8006500 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <prvInsertBlockIntoFreeList+0xb0>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e003      	b.n	8006500 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d002      	beq.n	800650e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20001e80 	.word	0x20001e80
 8006520:	20001e88 	.word	0x20001e88

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <_reclaim_reent>:
 8006534:	4b29      	ldr	r3, [pc, #164]	; (80065dc <_reclaim_reent+0xa8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4283      	cmp	r3, r0
 800653a:	b570      	push	{r4, r5, r6, lr}
 800653c:	4604      	mov	r4, r0
 800653e:	d04b      	beq.n	80065d8 <_reclaim_reent+0xa4>
 8006540:	69c3      	ldr	r3, [r0, #28]
 8006542:	b143      	cbz	r3, 8006556 <_reclaim_reent+0x22>
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d144      	bne.n	80065d4 <_reclaim_reent+0xa0>
 800654a:	69e3      	ldr	r3, [r4, #28]
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	b111      	cbz	r1, 8006556 <_reclaim_reent+0x22>
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f879 	bl	8006648 <_free_r>
 8006556:	6961      	ldr	r1, [r4, #20]
 8006558:	b111      	cbz	r1, 8006560 <_reclaim_reent+0x2c>
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f874 	bl	8006648 <_free_r>
 8006560:	69e1      	ldr	r1, [r4, #28]
 8006562:	b111      	cbz	r1, 800656a <_reclaim_reent+0x36>
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f86f 	bl	8006648 <_free_r>
 800656a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800656c:	b111      	cbz	r1, 8006574 <_reclaim_reent+0x40>
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f86a 	bl	8006648 <_free_r>
 8006574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006576:	b111      	cbz	r1, 800657e <_reclaim_reent+0x4a>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 f865 	bl	8006648 <_free_r>
 800657e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006580:	b111      	cbz	r1, 8006588 <_reclaim_reent+0x54>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f860 	bl	8006648 <_free_r>
 8006588:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800658a:	b111      	cbz	r1, 8006592 <_reclaim_reent+0x5e>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f85b 	bl	8006648 <_free_r>
 8006592:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006594:	b111      	cbz	r1, 800659c <_reclaim_reent+0x68>
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f856 	bl	8006648 <_free_r>
 800659c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800659e:	b111      	cbz	r1, 80065a6 <_reclaim_reent+0x72>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f851 	bl	8006648 <_free_r>
 80065a6:	6a23      	ldr	r3, [r4, #32]
 80065a8:	b1b3      	cbz	r3, 80065d8 <_reclaim_reent+0xa4>
 80065aa:	4620      	mov	r0, r4
 80065ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065b0:	4718      	bx	r3
 80065b2:	5949      	ldr	r1, [r1, r5]
 80065b4:	b941      	cbnz	r1, 80065c8 <_reclaim_reent+0x94>
 80065b6:	3504      	adds	r5, #4
 80065b8:	69e3      	ldr	r3, [r4, #28]
 80065ba:	2d80      	cmp	r5, #128	; 0x80
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	d1f8      	bne.n	80065b2 <_reclaim_reent+0x7e>
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f841 	bl	8006648 <_free_r>
 80065c6:	e7c0      	b.n	800654a <_reclaim_reent+0x16>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f83c 	bl	8006648 <_free_r>
 80065d0:	4631      	mov	r1, r6
 80065d2:	e7ef      	b.n	80065b4 <_reclaim_reent+0x80>
 80065d4:	2500      	movs	r5, #0
 80065d6:	e7ef      	b.n	80065b8 <_reclaim_reent+0x84>
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	bf00      	nop
 80065dc:	2000005c 	.word	0x2000005c

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	; (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	; (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	; (8006624 <__libc_init_array+0x44>)
 80065f4:	f000 f880 	bl	80066f8 <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	0800679c 	.word	0x0800679c
 800661c:	0800679c 	.word	0x0800679c
 8006620:	0800679c 	.word	0x0800679c
 8006624:	080067a0 	.word	0x080067a0

08006628 <__retarget_lock_acquire_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_release_recursive>:
 800662a:	4770      	bx	lr

0800662c <memcpy>:
 800662c:	440a      	add	r2, r1
 800662e:	4291      	cmp	r1, r2
 8006630:	f100 33ff 	add.w	r3, r0, #4294967295
 8006634:	d100      	bne.n	8006638 <memcpy+0xc>
 8006636:	4770      	bx	lr
 8006638:	b510      	push	{r4, lr}
 800663a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800663e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006642:	4291      	cmp	r1, r2
 8006644:	d1f9      	bne.n	800663a <memcpy+0xe>
 8006646:	bd10      	pop	{r4, pc}

08006648 <_free_r>:
 8006648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800664a:	2900      	cmp	r1, #0
 800664c:	d044      	beq.n	80066d8 <_free_r+0x90>
 800664e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f1a1 0404 	sub.w	r4, r1, #4
 800665a:	bfb8      	it	lt
 800665c:	18e4      	addlt	r4, r4, r3
 800665e:	f000 f83f 	bl	80066e0 <__malloc_lock>
 8006662:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <_free_r+0x94>)
 8006664:	9801      	ldr	r0, [sp, #4]
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	b933      	cbnz	r3, 8006678 <_free_r+0x30>
 800666a:	6063      	str	r3, [r4, #4]
 800666c:	6014      	str	r4, [r2, #0]
 800666e:	b003      	add	sp, #12
 8006670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006674:	f000 b83a 	b.w	80066ec <__malloc_unlock>
 8006678:	42a3      	cmp	r3, r4
 800667a:	d908      	bls.n	800668e <_free_r+0x46>
 800667c:	6825      	ldr	r5, [r4, #0]
 800667e:	1961      	adds	r1, r4, r5
 8006680:	428b      	cmp	r3, r1
 8006682:	bf01      	itttt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	1949      	addeq	r1, r1, r5
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	e7ed      	b.n	800666a <_free_r+0x22>
 800668e:	461a      	mov	r2, r3
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b10b      	cbz	r3, 8006698 <_free_r+0x50>
 8006694:	42a3      	cmp	r3, r4
 8006696:	d9fa      	bls.n	800668e <_free_r+0x46>
 8006698:	6811      	ldr	r1, [r2, #0]
 800669a:	1855      	adds	r5, r2, r1
 800669c:	42a5      	cmp	r5, r4
 800669e:	d10b      	bne.n	80066b8 <_free_r+0x70>
 80066a0:	6824      	ldr	r4, [r4, #0]
 80066a2:	4421      	add	r1, r4
 80066a4:	1854      	adds	r4, r2, r1
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	6011      	str	r1, [r2, #0]
 80066aa:	d1e0      	bne.n	800666e <_free_r+0x26>
 80066ac:	681c      	ldr	r4, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	440c      	add	r4, r1
 80066b4:	6014      	str	r4, [r2, #0]
 80066b6:	e7da      	b.n	800666e <_free_r+0x26>
 80066b8:	d902      	bls.n	80066c0 <_free_r+0x78>
 80066ba:	230c      	movs	r3, #12
 80066bc:	6003      	str	r3, [r0, #0]
 80066be:	e7d6      	b.n	800666e <_free_r+0x26>
 80066c0:	6825      	ldr	r5, [r4, #0]
 80066c2:	1961      	adds	r1, r4, r5
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf04      	itt	eq
 80066c8:	6819      	ldreq	r1, [r3, #0]
 80066ca:	685b      	ldreq	r3, [r3, #4]
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	bf04      	itt	eq
 80066d0:	1949      	addeq	r1, r1, r5
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	6054      	str	r4, [r2, #4]
 80066d6:	e7ca      	b.n	800666e <_free_r+0x26>
 80066d8:	b003      	add	sp, #12
 80066da:	bd30      	pop	{r4, r5, pc}
 80066dc:	20001fdc 	.word	0x20001fdc

080066e0 <__malloc_lock>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__malloc_lock+0x8>)
 80066e2:	f7ff bfa1 	b.w	8006628 <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	20001fd8 	.word	0x20001fd8

080066ec <__malloc_unlock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_unlock+0x8>)
 80066ee:	f7ff bf9c 	b.w	800662a <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	20001fd8 	.word	0x20001fd8

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
