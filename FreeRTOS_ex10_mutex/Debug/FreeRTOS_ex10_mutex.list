
FreeRTOS_ex10_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006098  08006098  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006098  08006098  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f4c  20000060  08006100  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  08006100  00021fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001658e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bf  00000000  00000000  00036661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5e  00000000  00000000  0003ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000318c  00000000  00000000  0003bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015279  00000000  00000000  0003ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7075  00000000  00000000  00054083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005644  00000000  00000000  0014b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f60 	.word	0x08005f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005f60 	.word	0x08005f60

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa9d 	bl	8000762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f850 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f894 	bl	8000358 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 ff28 	bl	8002084 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <main+0x74>)
 8000236:	f002 f8b8 	bl	80023aa <osMutexNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0x78>)
 800023e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <main+0x7c>)
 8000242:	2101      	movs	r1, #1
 8000244:	2001      	movs	r0, #1
 8000246:	f002 f936 	bl	80024b6 <osSemaphoreNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <main+0x80>)
 800024e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000250:	4a14      	ldr	r2, [pc, #80]	; (80002a4 <main+0x84>)
 8000252:	2100      	movs	r1, #0
 8000254:	4814      	ldr	r0, [pc, #80]	; (80002a8 <main+0x88>)
 8000256:	f001 ff5f 	bl	8002118 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <main+0x8c>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <main+0x90>)
 8000262:	2100      	movs	r1, #0
 8000264:	4813      	ldr	r0, [pc, #76]	; (80002b4 <main+0x94>)
 8000266:	f001 ff57 	bl	8002118 <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <main+0x98>)
 800026e:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <main+0x9c>)
 8000272:	2100      	movs	r1, #0
 8000274:	4812      	ldr	r0, [pc, #72]	; (80002c0 <main+0xa0>)
 8000276:	f001 ff4f 	bl	8002118 <osThreadNew>
 800027a:	4603      	mov	r3, r0
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <main+0xa4>)
 800027e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  EventGroup1 = osEventFlagsNew(NULL);
 8000280:	2000      	movs	r0, #0
 8000282:	f002 f853 	bl	800232c <osEventFlagsNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <main+0xa8>)
 800028a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800028c:	f001 ff1e 	bl	80020cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	e7fe      	b.n	8000290 <main+0x70>
 8000292:	bf00      	nop
 8000294:	08006030 	.word	0x08006030
 8000298:	20000088 	.word	0x20000088
 800029c:	08006040 	.word	0x08006040
 80002a0:	2000008c 	.word	0x2000008c
 80002a4:	08005fc4 	.word	0x08005fc4
 80002a8:	08000465 	.word	0x08000465
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	08005fe8 	.word	0x08005fe8
 80002b4:	080004b9 	.word	0x080004b9
 80002b8:	20000080 	.word	0x20000080
 80002bc:	0800600c 	.word	0x0800600c
 80002c0:	080004ed 	.word	0x080004ed
 80002c4:	20000084 	.word	0x20000084
 80002c8:	20000090 	.word	0x20000090

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2244      	movs	r2, #68	; 0x44
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f005 fd56 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f2:	f000 fd5d 	bl	8000db0 <HAL_PWREx_ControlVoltageScaling>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002fc:	f000 f914 	bl	8000528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000300:	2310      	movs	r3, #16
 8000302:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800030c:	2360      	movs	r3, #96	; 0x60
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	2300      	movs	r3, #0
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fd9f 	bl	8000e5c <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000324:	f000 f900 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	463b      	mov	r3, r7
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f967 	bl	8001614 <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800034c:	f000 f8ec 	bl	8000528 <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3758      	adds	r7, #88	; 0x58
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_GPIO_Init+0xbc>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a28      	ldr	r2, [pc, #160]	; (8000414 <MX_GPIO_Init+0xbc>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_GPIO_Init+0xbc>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_GPIO_Init+0xbc>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <MX_GPIO_Init+0xbc>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_GPIO_Init+0xbc>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_GPIO_Init+0xbc>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_GPIO_Init+0xbc>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_GPIO_Init+0xbc>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f000 fcb9 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80003c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <MX_GPIO_Init+0xc0>)
 80003da:	f000 fb01 	bl	80009e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003de:	2320      	movs	r3, #32
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	4619      	mov	r1, r3
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f000 faf2 	bl	80009e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2105      	movs	r1, #5
 8000400:	2028      	movs	r0, #40	; 0x28
 8000402:	f000 fac3 	bl	800098c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000406:	2028      	movs	r0, #40	; 0x28
 8000408:	f000 fadc 	bl	80009c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	48000800 	.word	0x48000800

0800041c <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fed1 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 800042e:	200a      	movs	r0, #10
 8000430:	f7ff fece 	bl	80001d0 <ITM_SendChar>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(Task1Handle, 1);
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_GPIO_EXTI_Callback+0x24>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2101      	movs	r1, #1
 800044c:	4618      	mov	r0, r3
 800044e:	f001 ff1f 	bl	8002290 <osThreadFlagsSet>
	task_action('!');
 8000452:	2021      	movs	r0, #33	; 0x21
 8000454:	f7ff ffe2 	bl	800041c <task_action>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000007c 	.word	0x2000007c

08000464 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t index = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //osDelay(2000);
	  //osMutexAcquire(myMutex01Handle, osWaitForever);
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <StartTask1+0x4c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f04f 31ff 	mov.w	r1, #4294967295
 8000478:	4618      	mov	r0, r3
 800047a:	f002 f8a5 	bl	80025c8 <osSemaphoreAcquire>

	  task_action('1');
 800047e:	2031      	movs	r0, #49	; 0x31
 8000480:	f7ff ffcc 	bl	800041c <task_action>
	  if(index++ >= 3)
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	73fa      	strb	r2, [r7, #15]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d905      	bls.n	800049a <StartTask1+0x36>
	  {
		  osThreadSetPriority(Task1Handle, osPriorityLow);
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <StartTask1+0x50>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2108      	movs	r1, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f001 fed1 	bl	800223c <osThreadSetPriority>
	  }
	  //osMutexRelease(myMutex01Handle);
	  osSemaphoreRelease(myBinarySem01Handle);
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <StartTask1+0x4c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f8e4 	bl	800266c <osSemaphoreRelease>
	  HAL_Delay(500);
 80004a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a8:	f000 f994 	bl	80007d4 <HAL_Delay>
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80004ac:	e7e0      	b.n	8000470 <StartTask1+0xc>
 80004ae:	bf00      	nop
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	2000007c 	.word	0x2000007c

080004b8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //osDelay(2000);
	  //osMutexAcquire(myMutex01Handle, osWaitForever);
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <StartTask2+0x30>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 f87d 	bl	80025c8 <osSemaphoreAcquire>

	  task_action('2');
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f7ff ffa4 	bl	800041c <task_action>
	  //osMutexRelease(myMutex01Handle);
	  osSemaphoreRelease(myBinarySem01Handle);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <StartTask2+0x30>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 f8c7 	bl	800266c <osSemaphoreRelease>
	  HAL_Delay(500);
 80004de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e2:	f000 f977 	bl	80007d4 <HAL_Delay>
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80004e6:	e7eb      	b.n	80004c0 <StartTask2+0x8>
 80004e8:	2000008c 	.word	0x2000008c

080004ec <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  task_action('3');
 80004f4:	2033      	movs	r0, #51	; 0x33
 80004f6:	f7ff ff91 	bl	800041c <task_action>
	  HAL_Delay(500);
 80004fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fe:	f000 f969 	bl	80007d4 <HAL_Delay>
	  task_action('3');
 8000502:	e7f7      	b.n	80004f4 <StartTask3+0x8>

08000504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d101      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000516:	f000 f93d 	bl	8000794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40001000 	.word	0x40001000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <HAL_MspInit+0x70>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_MspInit+0x70>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6613      	str	r3, [r2, #96]	; 0x60
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <HAL_MspInit+0x70>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <HAL_MspInit+0x70>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_MspInit+0x70>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6593      	str	r3, [r2, #88]	; 0x58
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_MspInit+0x70>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2105      	movs	r1, #5
 800056e:	f06f 000b 	mvn.w	r0, #11
 8000572:	f000 fa0b 	bl	800098c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2105      	movs	r1, #5
 800057a:	f06f 0004 	mvn.w	r0, #4
 800057e:	f000 fa05 	bl	800098c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	f06f 0003 	mvn.w	r0, #3
 800058a:	f000 f9ff 	bl	800098c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	f06f 0001 	mvn.w	r0, #1
 8000596:	f000 f9f9 	bl	800098c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <HAL_InitTick+0xe0>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	4a33      	ldr	r2, [pc, #204]	; (8000688 <HAL_InitTick+0xe0>)
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	6593      	str	r3, [r2, #88]	; 0x58
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <HAL_InitTick+0xe0>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ce:	f107 0210 	add.w	r2, r7, #16
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f9c9 	bl	8001970 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005e8:	f001 f9ac 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 80005ec:	6378      	str	r0, [r7, #52]	; 0x34
 80005ee:	e004      	b.n	80005fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005f0:	f001 f9a8 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 80005f4:	4603      	mov	r3, r0
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005fc:	4a23      	ldr	r2, [pc, #140]	; (800068c <HAL_InitTick+0xe4>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	0c9b      	lsrs	r3, r3, #18
 8000604:	3b01      	subs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_InitTick+0xe8>)
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <HAL_InitTick+0xec>)
 800060c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_InitTick+0xe8>)
 8000610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000614:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_InitTick+0xe8>)
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_InitTick+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <HAL_InitTick+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_InitTick+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800062e:	4818      	ldr	r0, [pc, #96]	; (8000690 <HAL_InitTick+0xe8>)
 8000630:	f001 fa30 	bl	8001a94 <HAL_TIM_Base_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800063a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800063e:	2b00      	cmp	r3, #0
 8000640:	d11b      	bne.n	800067a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <HAL_InitTick+0xe8>)
 8000644:	f001 fa88 	bl	8001b58 <HAL_TIM_Base_Start_IT>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800064e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000652:	2b00      	cmp	r3, #0
 8000654:	d111      	bne.n	800067a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000656:	2036      	movs	r0, #54	; 0x36
 8000658:	f000 f9b4 	bl	80009c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d808      	bhi.n	8000674 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000662:	2200      	movs	r2, #0
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	2036      	movs	r0, #54	; 0x36
 8000668:	f000 f990 	bl	800098c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_InitTick+0xf0>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	e002      	b.n	800067a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800067a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800067e:	4618      	mov	r0, r3
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	431bde83 	.word	0x431bde83
 8000690:	20000094 	.word	0x20000094
 8000694:	40001000 	.word	0x40001000
 8000698:	20000004 	.word	0x20000004

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80006cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006d0:	f000 fb48 	bl	8000d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <TIM6_DAC_IRQHandler+0x10>)
 80006de:	f001 faab 	bl	8001c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000094 	.word	0x20000094

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f005 fb83 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd6d 	bl	8000220 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000748:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000754:	080060a0 	.word	0x080060a0
  ldr r2, =_sbss
 8000758:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800075c:	20001fac 	.word	0x20001fac

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>

08000762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f902 	bl	8000976 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000772:	200f      	movs	r0, #15
 8000774:	f7ff ff18 	bl	80005a8 <HAL_InitTick>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	e001      	b.n	8000788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000784:	f7ff fed6 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000788:	79fb      	ldrb	r3, [r7, #7]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_IncTick+0x20>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_IncTick+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000008 	.word	0x20000008
 80007b8:	200000e0 	.word	0x200000e0

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <HAL_GetTick+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200000e0 	.word	0x200000e0

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff ffee 	bl	80007bc <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_Delay+0x44>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffde 	bl	80007bc <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff4c 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800099e:	f7ff ff61 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	68b9      	ldr	r1, [r7, #8]
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	f7ff ffb1 	bl	8000910 <NVIC_EncodePriority>
 80009ae:	4602      	mov	r2, r0
 80009b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff80 	bl	80008bc <__NVIC_SetPriority>
}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff54 	bl	8000880 <__NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e17f      	b.n	8000cf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8171 	beq.w	8000cea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d005      	beq.n	8000a20 <HAL_GPIO_Init+0x40>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d130      	bne.n	8000a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	f003 0201 	and.w	r2, r3, #1
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d118      	bne.n	8000ac0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a94:	2201      	movs	r2, #1
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	f003 0201 	and.w	r2, r3, #1
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d017      	beq.n	8000afc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d123      	bne.n	8000b50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	6939      	ldr	r1, [r7, #16]
 8000b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0203 	and.w	r2, r3, #3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 80ac 	beq.w	8000cea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <HAL_GPIO_Init+0x330>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <HAL_GPIO_Init+0x330>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <HAL_GPIO_Init+0x330>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000baa:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd4:	d025      	beq.n	8000c22 <HAL_GPIO_Init+0x242>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4f      	ldr	r2, [pc, #316]	; (8000d18 <HAL_GPIO_Init+0x338>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d01f      	beq.n	8000c1e <HAL_GPIO_Init+0x23e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <HAL_GPIO_Init+0x33c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d019      	beq.n	8000c1a <HAL_GPIO_Init+0x23a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4d      	ldr	r2, [pc, #308]	; (8000d20 <HAL_GPIO_Init+0x340>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d013      	beq.n	8000c16 <HAL_GPIO_Init+0x236>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4c      	ldr	r2, [pc, #304]	; (8000d24 <HAL_GPIO_Init+0x344>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00d      	beq.n	8000c12 <HAL_GPIO_Init+0x232>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <HAL_GPIO_Init+0x348>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x22e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <HAL_GPIO_Init+0x34c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_GPIO_Init+0x22a>
 8000c06:	2306      	movs	r3, #6
 8000c08:	e00c      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	e00a      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e008      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c12:	2304      	movs	r3, #4
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e004      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c22:	2300      	movs	r3, #0
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	f002 0203 	and.w	r2, r2, #3
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c34:	4937      	ldr	r1, [pc, #220]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c66:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cba:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_GPIO_Init+0x350>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae78 	bne.w	80009f0 <HAL_GPIO_Init+0x10>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001000 	.word	0x48001000
 8000d28:	48001400 	.word	0x48001400
 8000d2c:	48001800 	.word	0x48001800
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb5a 	bl	800043c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_PWREx_GetVoltageRange+0x18>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40007000 	.word	0x40007000

08000db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dbe:	d130      	bne.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dcc:	d038      	beq.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2232      	movs	r2, #50	; 0x32
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df4:	e002      	b.n	8000dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e08:	d102      	bne.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f2      	bne.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1c:	d110      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e00f      	b.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2e:	d007      	beq.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40007000 	.word	0x40007000
 8000e54:	20000000 	.word	0x20000000
 8000e58:	431bde83 	.word	0x431bde83

08000e5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e3ca      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6e:	4b97      	ldr	r3, [pc, #604]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e78:	4b94      	ldr	r3, [pc, #592]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80e4 	beq.w	8001058 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x4a>
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	f040 808b 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	f040 8087 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea6:	4b89      	ldr	r3, [pc, #548]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_RCC_OscConfig+0x62>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e3a2      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4b82      	ldr	r3, [pc, #520]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x7c>
 8000ece:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed6:	e005      	b.n	8000ee4 <HAL_RCC_OscConfig+0x88>
 8000ed8:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d223      	bcs.n	8000f30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fd71 	bl	80019d4 <RCC_SetFlashLatencyFromMSIRange>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e383      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b73      	ldr	r3, [pc, #460]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a72      	ldr	r2, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b70      	ldr	r3, [pc, #448]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	496d      	ldr	r1, [pc, #436]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1a:	4b6c      	ldr	r3, [pc, #432]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	4968      	ldr	r1, [pc, #416]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
 8000f2e:	e025      	b.n	8000f7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a65      	ldr	r2, [pc, #404]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4960      	ldr	r1, [pc, #384]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	495b      	ldr	r1, [pc, #364]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fd31 	bl	80019d4 <RCC_SetFlashLatencyFromMSIRange>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e343      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f7c:	f000 fc4a 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b52      	ldr	r3, [pc, #328]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4950      	ldr	r1, [pc, #320]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x278>)
 8000f9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb01 	bl	80005a8 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d052      	beq.n	8001056 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	e327      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d032      	beq.n	8001022 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a42      	ldr	r2, [pc, #264]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fbf8 	bl	80007bc <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fbf4 	bl	80007bc <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e310      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4931      	ldr	r1, [pc, #196]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	492c      	ldr	r1, [pc, #176]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e01a      	b.n	8001058 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a29      	ldr	r2, [pc, #164]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102e:	f7ff fbc5 	bl	80007bc <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001036:	f7ff fbc1 	bl	80007bc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e2dd      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x1da>
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001056:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d074      	beq.n	800114e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b08      	cmp	r3, #8
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x21a>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d10e      	bne.n	800108e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d10b      	bne.n	800108e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d064      	beq.n	800114c <HAL_RCC_OscConfig+0x2f0>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d160      	bne.n	800114c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e2ba      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x24a>
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 800109e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e026      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ae:	d115      	bne.n	80010dc <HAL_RCC_OscConfig+0x280>
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 80010b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a02      	ldr	r2, [pc, #8]	; (80010cc <HAL_RCC_OscConfig+0x270>)
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e014      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	08006050 	.word	0x08006050
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a9f      	ldr	r2, [pc, #636]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a9c      	ldr	r2, [pc, #624]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb5e 	bl	80007bc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fb5a 	bl	80007bc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e276      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001116:	4b92      	ldr	r3, [pc, #584]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x2a8>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb4a 	bl	80007bc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fb46 	bl	80007bc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e262      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x2d0>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d060      	beq.n	800121c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x310>
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d119      	bne.n	800119a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d116      	bne.n	800119a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116c:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_OscConfig+0x328>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e23f      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001184:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	061b      	lsls	r3, r3, #24
 8001192:	4973      	ldr	r1, [pc, #460]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001198:	e040      	b.n	800121c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d023      	beq.n	80011ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a2:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb05 	bl	80007bc <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fb01 	bl	80007bc <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e21d      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c8:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	061b      	lsls	r3, r3, #24
 80011e2:	495f      	ldr	r1, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
 80011e8:	e018      	b.n	800121c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a5c      	ldr	r2, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80011f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fae1 	bl	80007bc <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fadd 	bl	80007bc <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1f9      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f0      	bne.n	80011fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d03c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d01c      	beq.n	800126a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fabc 	bl	80007bc <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff fab8 	bl	80007bc <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1d4      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ef      	beq.n	8001248 <HAL_RCC_OscConfig+0x3ec>
 8001268:	e01b      	b.n	80012a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff fa9f 	bl	80007bc <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fa9b 	bl	80007bc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1b7      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a6 	beq.w	80013fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10d      	bne.n	80012dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6593      	str	r3, [r2, #88]	; 0x58
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d8:	2301      	movs	r3, #1
 80012da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x508>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_RCC_OscConfig+0x508>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x508>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fa62 	bl	80007bc <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fa5e 	bl	80007bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e17a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_RCC_OscConfig+0x508>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_RCC_OscConfig+0x4d8>
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001332:	e029      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b05      	cmp	r3, #5
 800133a:	d115      	bne.n	8001368 <HAL_RCC_OscConfig+0x50c>
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_RCC_OscConfig+0x504>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135c:	e014      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40007000 	.word	0x40007000
 8001368:	4b9c      	ldr	r3, [pc, #624]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136e:	4a9b      	ldr	r2, [pc, #620]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001378:	4b98      	ldr	r3, [pc, #608]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	4a97      	ldr	r2, [pc, #604]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fa14 	bl	80007bc <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fa10 	bl	80007bc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e12a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ed      	beq.n	8001398 <HAL_RCC_OscConfig+0x53c>
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff f9fd 	bl	80007bc <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff f9f9 	bl	80007bc <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e113      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013dc:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ed      	bne.n	80013c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	4a79      	ldr	r2, [pc, #484]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80fe 	beq.w	8001602 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	2b02      	cmp	r3, #2
 800140c:	f040 80d0 	bne.w	80015b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001410:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	429a      	cmp	r2, r3
 8001422:	d130      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	3b01      	subs	r3, #1
 8001430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d127      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d11f      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001450:	2a07      	cmp	r2, #7
 8001452:	bf14      	ite	ne
 8001454:	2201      	movne	r2, #1
 8001456:	2200      	moveq	r2, #0
 8001458:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145a:	4293      	cmp	r3, r2
 800145c:	d113      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	3b01      	subs	r3, #1
 800146c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d109      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d06e      	beq.n	8001564 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d069      	beq.n	8001560 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0ad      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80014ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b4:	f7ff f982 	bl	80007bc <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f97e 	bl	80007bc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e09a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <HAL_RCC_OscConfig+0x784>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f4:	0212      	lsls	r2, r2, #8
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014fc:	0852      	lsrs	r2, r2, #1
 80014fe:	3a01      	subs	r2, #1
 8001500:	0552      	lsls	r2, r2, #21
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001508:	0852      	lsrs	r2, r2, #1
 800150a:	3a01      	subs	r2, #1
 800150c:	0652      	lsls	r2, r2, #25
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001514:	0912      	lsrs	r2, r2, #4
 8001516:	0452      	lsls	r2, r2, #17
 8001518:	430a      	orrs	r2, r1
 800151a:	4930      	ldr	r1, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001520:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001538:	f7ff f940 	bl	80007bc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f93c 	bl	80007bc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e058      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155e:	e050      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e04f      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d148      	bne.n	8001602 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 8001582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001588:	f7ff f918 	bl	80007bc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f914 	bl	80007bc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e030      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x734>
 80015ae:	e028      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d023      	beq.n	80015fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_RCC_OscConfig+0x780>)
 80015bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff f8fb 	bl	80007bc <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c8:	e00c      	b.n	80015e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f8f7 	bl	80007bc <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d905      	bls.n	80015e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e013      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ec      	bne.n	80015ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4905      	ldr	r1, [pc, #20]	; (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x7b4>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e001      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	feeefffc 	.word	0xfeeefffc

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0e7      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b75      	ldr	r3, [pc, #468]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d910      	bls.n	8001658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4970      	ldr	r1, [pc, #448]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cf      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b66      	ldr	r3, [pc, #408]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001670:	429a      	cmp	r2, r3
 8001672:	d908      	bls.n	8001686 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4960      	ldr	r1, [pc, #384]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d04c      	beq.n	800172c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d121      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0a6      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d115      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09a      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ca:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e08e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e086      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 0203 	bic.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4943      	ldr	r1, [pc, #268]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016fc:	f7ff f85e 	bl	80007bc <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7ff f85a 	bl	80007bc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e06e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 020c 	and.w	r2, r3, #12
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d1eb      	bne.n	8001704 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001744:	429a      	cmp	r2, r3
 8001746:	d208      	bcs.n	800175a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	492b      	ldr	r1, [pc, #172]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d210      	bcs.n	800178a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 0207 	bic.w	r2, r3, #7
 8001770:	4923      	ldr	r1, [pc, #140]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e036      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4918      	ldr	r1, [pc, #96]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4910      	ldr	r1, [pc, #64]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c8:	f000 f824 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	490b      	ldr	r1, [pc, #44]	; (8001808 <HAL_RCC_ClockConfig+0x1f4>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1fc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fedb 	bl	80005a8 <HAL_InitTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f6:	7afb      	ldrb	r3, [r7, #11]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	08006050 	.word	0x08006050
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d121      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d11e      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001884:	e00a      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d102      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e004      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d101      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 800189a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d134      	bne.n	800190c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0xa6>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d003      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0xac>
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 80018bc:	617b      	str	r3, [r7, #20]
      break;
 80018be:	e005      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 80018c2:	617b      	str	r3, [r7, #20]
      break;
 80018c4:	e002      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	3301      	adds	r3, #1
 80018d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb03 f202 	mul.w	r2, r3, r2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0e5b      	lsrs	r3, r3, #25
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	3301      	adds	r3, #1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	08006068 	.word	0x08006068
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_GetHCLKFreq+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001948:	f7ff fff0 	bl	800192c <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4904      	ldr	r1, [pc, #16]	; (800196c <HAL_RCC_GetPCLK1Freq+0x28>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	08006060 	.word	0x08006060

08001970 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	220f      	movs	r2, #15
 800197e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCC_GetClockConfig+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0207 	and.w	r2, r3, #7
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40022000 	.word	0x40022000

080019d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019ec:	f7ff f9d2 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 80019f0:	6178      	str	r0, [r7, #20]
 80019f2:	e014      	b.n	8001a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a0c:	f7ff f9c2 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a24:	d10b      	bne.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d919      	bls.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a30:	d902      	bls.n	8001a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a32:	2302      	movs	r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e013      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a38:	2301      	movs	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	e010      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b80      	cmp	r3, #128	; 0x80
 8001a42:	d902      	bls.n	8001a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a44:	2303      	movs	r3, #3
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	e00a      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d102      	bne.n	8001a56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a50:	2302      	movs	r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	e004      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b70      	cmp	r3, #112	; 0x70
 8001a5a:	d101      	bne.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0207 	bic.w	r2, r3, #7
 8001a68:	4909      	ldr	r1, [pc, #36]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e049      	b.n	8001b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f841 	bl	8001b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 f9da 	bl	8001e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e04f      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d018      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x76>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d115      	bne.n	8001bfa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d015      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d011      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf8:	e008      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e000      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00
 8001c2c:	40013400 	.word	0x40013400
 8001c30:	40014000 	.word	0x40014000
 8001c34:	00010007 	.word	0x00010007

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d020      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0202 	mvn.w	r2, #2
 8001c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8e4 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8d6 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8e7 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d020      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0204 	mvn.w	r2, #4
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8be 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8b0 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8c1 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f898 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f88a 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f89b 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0210 	mvn.w	r2, #16
 8001d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2208      	movs	r2, #8
 8001d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f872 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f864 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f875 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0201 	mvn.w	r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fbb0 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f906 	bl	8001fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8fe 	bl	8001fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f834 	bl	8001e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0220 	mvn.w	r2, #32
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8c6 	bl	8001fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eaa:	d00f      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3d      	ldr	r2, [pc, #244]	; (8001fa4 <TIM_Base_SetConfig+0x118>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <TIM_Base_SetConfig+0x11c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <TIM_Base_SetConfig+0x120>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d01b      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <TIM_Base_SetConfig+0x118>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d017      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <TIM_Base_SetConfig+0x11c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <TIM_Base_SetConfig+0x120>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00f      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00b      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <TIM_Base_SetConfig+0x128>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <TIM_Base_SetConfig+0x12c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0x9a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <TIM_Base_SetConfig+0x130>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <TIM_Base_SetConfig+0x114>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00f      	beq.n	8001f84 <TIM_Base_SetConfig+0xf8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <TIM_Base_SetConfig+0x124>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00b      	beq.n	8001f84 <TIM_Base_SetConfig+0xf8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <TIM_Base_SetConfig+0x128>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <TIM_Base_SetConfig+0xf8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <TIM_Base_SetConfig+0x12c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0xf8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <TIM_Base_SetConfig+0x130>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d103      	bne.n	8001f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40013400 	.word	0x40013400
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40014800 	.word	0x40014800

08001fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <__NVIC_SetPriority>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Handler+0x1c>)
 8002056:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002058:	f002 fb92 	bl	8004780 <xTaskGetSchedulerState>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002062:	f003 fc19 	bl	8005898 <xPortSysTickHandler>
  }
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002074:	2100      	movs	r1, #0
 8002076:	f06f 0004 	mvn.w	r0, #4
 800207a:	f7ff ffbf 	bl	8001ffc <__NVIC_SetPriority>
#endif
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208a:	f3ef 8305 	mrs	r3, IPSR
 800208e:	603b      	str	r3, [r7, #0]
  return(result);
 8002090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002096:	f06f 0305 	mvn.w	r3, #5
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	e00c      	b.n	80020b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <osKernelInitialize+0x44>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <osKernelInitialize+0x44>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	e002      	b.n	80020b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200000e4 	.word	0x200000e4

080020cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020d2:	f3ef 8305 	mrs	r3, IPSR
 80020d6:	603b      	str	r3, [r7, #0]
  return(result);
 80020d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80020de:	f06f 0305 	mvn.w	r3, #5
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	e010      	b.n	8002108 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <osKernelStart+0x48>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d109      	bne.n	8002102 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80020ee:	f7ff ffbf 	bl	8002070 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <osKernelStart+0x48>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80020f8:	f001 fee6 	bl	8003ec8 <vTaskStartScheduler>
      stat = osOK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e002      	b.n	8002108 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200000e4 	.word	0x200000e4

08002118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	; 0x38
 800211c:	af04      	add	r7, sp, #16
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002128:	f3ef 8305 	mrs	r3, IPSR
 800212c:	617b      	str	r3, [r7, #20]
  return(result);
 800212e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002130:	2b00      	cmp	r3, #0
 8002132:	d17e      	bne.n	8002232 <osThreadNew+0x11a>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d07b      	beq.n	8002232 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800213e:	2318      	movs	r3, #24
 8002140:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d045      	beq.n	80021de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <osThreadNew+0x48>
        name = attr->name;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <osThreadNew+0x6e>
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b38      	cmp	r3, #56	; 0x38
 8002178:	d805      	bhi.n	8002186 <osThreadNew+0x6e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <osThreadNew+0x72>
        return (NULL);
 8002186:	2300      	movs	r3, #0
 8002188:	e054      	b.n	8002234 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <osThreadNew+0xa8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2ba7      	cmp	r3, #167	; 0xa7
 80021a8:	d90a      	bls.n	80021c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <osThreadNew+0xa8>
        mem = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e010      	b.n	80021e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <osThreadNew+0xca>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <osThreadNew+0xca>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <osThreadNew+0xca>
          mem = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e001      	b.n	80021e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d110      	bne.n	800220a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021f0:	9202      	str	r2, [sp, #8]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f001 fc0c 	bl	8003a1c <xTaskCreateStatic>
 8002204:	4603      	mov	r3, r0
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e013      	b.n	8002232 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d110      	bne.n	8002232 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 fc57 	bl	8003ad6 <xTaskCreate>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <osThreadNew+0x11a>
            hTask = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002232:	693b      	ldr	r3, [r7, #16]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800224a:	f3ef 8305 	mrs	r3, IPSR
 800224e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002250:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8002256:	f06f 0305 	mvn.w	r3, #5
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e013      	b.n	8002286 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <osThreadSetPriority+0x34>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dd02      	ble.n	8002270 <osThreadSetPriority+0x34>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b38      	cmp	r3, #56	; 0x38
 800226e:	dd03      	ble.n	8002278 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8002270:	f06f 0303 	mvn.w	r3, #3
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e006      	b.n	8002286 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	6938      	ldr	r0, [r7, #16]
 8002282:	f001 fd83 	bl	8003d8c <vTaskPrioritySet>
  }

  return (stat);
 8002286:	697b      	ldr	r3, [r7, #20]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <osThreadFlagsSet+0x1a>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da03      	bge.n	80022b2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80022aa:	f06f 0303 	mvn.w	r3, #3
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e035      	b.n	800231e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b8:	f3ef 8305 	mrs	r3, IPSR
 80022bc:	613b      	str	r3, [r7, #16]
  return(result);
 80022be:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01f      	beq.n	8002304 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2201      	movs	r2, #1
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f002 fc9b 	bl	8004c10 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	2200      	movs	r2, #0
 80022e0:	9200      	str	r2, [sp, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f002 fc92 	bl	8004c10 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <osThreadFlagsSet+0x8e>
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <osThreadFlagsSet+0x98>)
 80022f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	e00c      	b.n	800231e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8002304:	2300      	movs	r3, #0
 8002306:	2201      	movs	r2, #1
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f002 fbc2 	bl	8004a94 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f002 fbbb 	bl	8004a94 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002338:	f3ef 8305 	mrs	r3, IPSR
 800233c:	60fb      	str	r3, [r7, #12]
  return(result);
 800233e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002340:	2b00      	cmp	r3, #0
 8002342:	d12d      	bne.n	80023a0 <osEventFlagsNew+0x74>
    mem = -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <osEventFlagsNew+0x3a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b1f      	cmp	r3, #31
 800235e:	d902      	bls.n	8002366 <osEventFlagsNew+0x3a>
        mem = 1;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e00c      	b.n	8002380 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <osEventFlagsNew+0x54>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <osEventFlagsNew+0x54>
          mem = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e001      	b.n	8002380 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d106      	bne.n	8002394 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f9e6 	bl	800275c <xEventGroupCreateStatic>
 8002390:	6178      	str	r0, [r7, #20]
 8002392:	e005      	b.n	80023a0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800239a:	f000 fa16 	bl	80027ca <xEventGroupCreate>
 800239e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80023a0:	697b      	ldr	r3, [r7, #20]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b6:	f3ef 8305 	mrs	r3, IPSR
 80023ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80023bc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d174      	bne.n	80024ac <osMutexNew+0x102>
    if (attr != NULL) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e001      	b.n	80023d4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <osMutexNew+0x3a>
      rmtx = 1U;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e001      	b.n	80023e8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d15c      	bne.n	80024ac <osMutexNew+0x102>
      mem = -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <osMutexNew+0x6a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b4f      	cmp	r3, #79	; 0x4f
 800240c:	d902      	bls.n	8002414 <osMutexNew+0x6a>
          mem = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e00c      	b.n	800242e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <osMutexNew+0x84>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <osMutexNew+0x84>
            mem = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e001      	b.n	800242e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d112      	bne.n	800245a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4619      	mov	r1, r3
 8002440:	2004      	movs	r0, #4
 8002442:	f000 fc00 	bl	8002c46 <xQueueCreateMutexStatic>
 8002446:	61f8      	str	r0, [r7, #28]
 8002448:	e016      	b.n	8002478 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4619      	mov	r1, r3
 8002450:	2001      	movs	r0, #1
 8002452:	f000 fbf8 	bl	8002c46 <xQueueCreateMutexStatic>
 8002456:	61f8      	str	r0, [r7, #28]
 8002458:	e00e      	b.n	8002478 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002466:	2004      	movs	r0, #4
 8002468:	f000 fbd5 	bl	8002c16 <xQueueCreateMutex>
 800246c:	61f8      	str	r0, [r7, #28]
 800246e:	e003      	b.n	8002478 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002470:	2001      	movs	r0, #1
 8002472:	f000 fbd0 	bl	8002c16 <xQueueCreateMutex>
 8002476:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <osMutexNew+0xee>
        if (attr != NULL) {
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <osMutexNew+0xe2>
          name = attr->name;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e001      	b.n	8002490 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	69f8      	ldr	r0, [r7, #28]
 8002494:	f001 fa3a 	bl	800390c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <osMutexNew+0x102>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80024ac:	69fb      	ldr	r3, [r7, #28]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b08a      	sub	sp, #40	; 0x28
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024c6:	f3ef 8305 	mrs	r3, IPSR
 80024ca:	613b      	str	r3, [r7, #16]
  return(result);
 80024cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d175      	bne.n	80025be <osSemaphoreNew+0x108>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d072      	beq.n	80025be <osSemaphoreNew+0x108>
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d86e      	bhi.n	80025be <osSemaphoreNew+0x108>
    mem = -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <osSemaphoreNew+0x4c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b4f      	cmp	r3, #79	; 0x4f
 80024fa:	d902      	bls.n	8002502 <osSemaphoreNew+0x4c>
        mem = 1;
 80024fc:	2301      	movs	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e00c      	b.n	800251c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <osSemaphoreNew+0x66>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <osSemaphoreNew+0x66>
          mem = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e001      	b.n	800251c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d04c      	beq.n	80025be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d128      	bne.n	800257c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10a      	bne.n	8002546 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2203      	movs	r2, #3
 8002536:	9200      	str	r2, [sp, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2001      	movs	r0, #1
 800253e:	f000 fa7b 	bl	8002a38 <xQueueGenericCreateStatic>
 8002542:	61f8      	str	r0, [r7, #28]
 8002544:	e005      	b.n	8002552 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002546:	2203      	movs	r2, #3
 8002548:	2100      	movs	r1, #0
 800254a:	2001      	movs	r0, #1
 800254c:	f000 faec 	bl	8002b28 <xQueueGenericCreate>
 8002550:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d022      	beq.n	800259e <osSemaphoreNew+0xe8>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01f      	beq.n	800259e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800255e:	2300      	movs	r3, #0
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	69f8      	ldr	r0, [r7, #28]
 8002566:	f000 fbf3 	bl	8002d50 <xQueueGenericSend>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d016      	beq.n	800259e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002570:	69f8      	ldr	r0, [r7, #28]
 8002572:	f001 f87f 	bl	8003674 <vQueueDelete>
            hSemaphore = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e010      	b.n	800259e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	461a      	mov	r2, r3
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fb76 	bl	8002c7c <xQueueCreateCountingSemaphoreStatic>
 8002590:	61f8      	str	r0, [r7, #28]
 8002592:	e004      	b.n	800259e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fba7 	bl	8002cea <xQueueCreateCountingSemaphore>
 800259c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e001      	b.n	80025b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	69f8      	ldr	r0, [r7, #28]
 80025ba:	f001 f9a7 	bl	800390c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80025be:	69fb      	ldr	r3, [r7, #28]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025e0:	f06f 0303 	mvn.w	r3, #3
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e039      	b.n	800265c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e8:	f3ef 8305 	mrs	r3, IPSR
 80025ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80025fa:	f06f 0303 	mvn.w	r3, #3
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e02c      	b.n	800265c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	461a      	mov	r2, r3
 800260c:	2100      	movs	r1, #0
 800260e:	6938      	ldr	r0, [r7, #16]
 8002610:	f000 ffb0 	bl	8003574 <xQueueReceiveFromISR>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d003      	beq.n	8002622 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800261a:	f06f 0302 	mvn.w	r3, #2
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	e01c      	b.n	800265c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d019      	beq.n	800265c <osSemaphoreAcquire+0x94>
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <osSemaphoreAcquire+0xa0>)
 800262a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	e010      	b.n	800265c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	6938      	ldr	r0, [r7, #16]
 800263e:	f000 fe8d 	bl	800335c <xQueueSemaphoreTake>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d009      	beq.n	800265c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800264e:	f06f 0301 	mvn.w	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e002      	b.n	800265c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002656:	f06f 0302 	mvn.w	r3, #2
 800265a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800265c:	697b      	ldr	r3, [r7, #20]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000ed04 	.word	0xe000ed04

0800266c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002682:	f06f 0303 	mvn.w	r3, #3
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e02c      	b.n	80026e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268a:	f3ef 8305 	mrs	r3, IPSR
 800268e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002690:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01a      	beq.n	80026cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	4619      	mov	r1, r3
 80026a0:	6938      	ldr	r0, [r7, #16]
 80026a2:	f000 fcee 	bl	8003082 <xQueueGiveFromISR>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d003      	beq.n	80026b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80026ac:	f06f 0302 	mvn.w	r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e017      	b.n	80026e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d014      	beq.n	80026e4 <osSemaphoreRelease+0x78>
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <osSemaphoreRelease+0x84>)
 80026bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	e00b      	b.n	80026e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80026cc:	2300      	movs	r3, #0
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f000 fb3c 	bl	8002d50 <xQueueGenericSend>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d002      	beq.n	80026e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80026de:	f06f 0302 	mvn.w	r3, #2
 80026e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80026e4:	697b      	ldr	r3, [r7, #20]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <vApplicationGetIdleTaskMemory+0x2c>)
 8002704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <vApplicationGetIdleTaskMemory+0x30>)
 800270a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	200000e8 	.word	0x200000e8
 8002724:	20000190 	.word	0x20000190

08002728 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <vApplicationGetTimerTaskMemory+0x2c>)
 8002738:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <vApplicationGetTimerTaskMemory+0x30>)
 800273e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	20000390 	.word	0x20000390
 8002758:	20000438 	.word	0x20000438

0800275c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002780:	2320      	movs	r3, #32
 8002782:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b20      	cmp	r3, #32
 8002788:	d00a      	beq.n	80027a0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	60fb      	str	r3, [r7, #12]
}
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f822 	bl	80027fe <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2201      	movs	r2, #1
 80027be:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80027c0:	697b      	ldr	r3, [r7, #20]
	}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80027d0:	2020      	movs	r0, #32
 80027d2:	f003 f8f1 	bl	80059b8 <pvPortMalloc>
 80027d6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f808 	bl	80027fe <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80027f4:	687b      	ldr	r3, [r7, #4]
	}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f103 0208 	add.w	r2, r3, #8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f04f 32ff 	mov.w	r2, #4294967295
 8002816:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0208 	add.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f103 0208 	add.w	r2, r3, #8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e00c      	b.n	80028da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3308      	adds	r3, #8
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e002      	b.n	80028ce <vListInsert+0x2e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d2f6      	bcs.n	80028c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6852      	ldr	r2, [r2, #4]
 8002932:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d103      	bne.n	8002946 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <xQueueGenericReset+0x2a>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	60bb      	str	r3, [r7, #8]
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002992:	f002 feef 	bl	8005774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	441a      	add	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	3b01      	subs	r3, #1
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	441a      	add	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d114      	bne.n	8002a12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01a      	beq.n	8002a26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3310      	adds	r3, #16
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fd01 	bl	80043fc <xTaskRemoveFromEventList>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <xQueueGenericReset+0xcc>)
 8002a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	e009      	b.n	8002a26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3310      	adds	r3, #16
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fef1 	bl	80027fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3324      	adds	r3, #36	; 0x24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff feec 	bl	80027fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a26:	f002 fed5 	bl	80057d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	e000ed04 	.word	0xe000ed04

08002a38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	; 0x38
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <xQueueGenericCreateStatic+0x52>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <xQueueGenericCreateStatic+0x56>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericCreateStatic+0x58>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	623b      	str	r3, [r7, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <xQueueGenericCreateStatic+0x7e>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <xQueueGenericCreateStatic+0x82>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueGenericCreateStatic+0x84>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	61fb      	str	r3, [r7, #28]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ad6:	2350      	movs	r3, #80	; 0x50
 8002ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b50      	cmp	r3, #80	; 0x50
 8002ade:	d00a      	beq.n	8002af6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61bb      	str	r3, [r7, #24]
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002af6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f83f 	bl	8002b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3730      	adds	r7, #48	; 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	613b      	str	r3, [r7, #16]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3350      	adds	r3, #80	; 0x50
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 ff29 	bl	80059b8 <pvPortMalloc>
 8002b66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3350      	adds	r3, #80	; 0x50
 8002b76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f805 	bl	8002b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b92:	69bb      	ldr	r3, [r7, #24]
	}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e002      	b.n	8002bbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bca:	2101      	movs	r1, #1
 8002bcc:	69b8      	ldr	r0, [r7, #24]
 8002bce:	f7ff fecb 	bl	8002968 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002c02:	2300      	movs	r3, #0
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8a1 	bl	8002d50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c20:	2301      	movs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff7a 	bl	8002b28 <xQueueGenericCreate>
 8002c34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff ffd3 	bl	8002be2 <prvInitialiseMutex>

		return xNewQueue;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
	}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6039      	str	r1, [r7, #0]
 8002c50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c52:	2301      	movs	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	6939      	ldr	r1, [r7, #16]
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff fee7 	bl	8002a38 <xQueueGenericCreateStatic>
 8002c6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ffb8 	bl	8002be2 <prvInitialiseMutex>

		return xNewQueue;
 8002c72:	68fb      	ldr	r3, [r7, #12]
	}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	61bb      	str	r3, [r7, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d90a      	bls.n	8002cc2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	617b      	str	r3, [r7, #20]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff feb3 	bl	8002a38 <xQueueGenericCreateStatic>
 8002cd2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
	}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	613b      	str	r3, [r7, #16]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d90a      	bls.n	8002d2e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60fb      	str	r3, [r7, #12]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d2e:	2202      	movs	r2, #2
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fef8 	bl	8002b28 <xQueueGenericCreate>
 8002d38:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d46:	697b      	ldr	r3, [r7, #20]
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericSend+0x32>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <xQueueGenericSend+0x40>
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <xQueueGenericSend+0x44>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <xQueueGenericSend+0x46>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <xQueueGenericSend+0x60>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d103      	bne.n	8002dbe <xQueueGenericSend+0x6e>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSend+0x72>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSend+0x74>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueGenericSend+0x8e>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	623b      	str	r3, [r7, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dde:	f001 fccf 	bl	8004780 <xTaskGetSchedulerState>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <xQueueGenericSend+0x9e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueGenericSend+0xa2>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueGenericSend+0xa4>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericSend+0xbe>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e0e:	f002 fcb1 	bl	8005774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <xQueueGenericSend+0xd4>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d129      	bne.n	8002e78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e2a:	f000 fc5e 	bl	80036ea <prvCopyDataToQueue>
 8002e2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fadd 	bl	80043fc <xTaskRemoveFromEventList>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e48:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <xQueueGenericSend+0x1f8>)
 8002e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	e00a      	b.n	8002e70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <xQueueGenericSend+0x1f8>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e70:	f002 fcb0 	bl	80057d4 <vPortExitCritical>
				return pdPASS;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e063      	b.n	8002f40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e7e:	f002 fca9 	bl	80057d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e05c      	b.n	8002f40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fb17 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e96:	2301      	movs	r3, #1
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e9a:	f002 fc9b 	bl	80057d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e9e:	f001 f883 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea2:	f002 fc67 	bl	8005774 <vPortEnterCritical>
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d103      	bne.n	8002ebc <xQueueGenericSend+0x16c>
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d103      	bne.n	8002ed2 <xQueueGenericSend+0x182>
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed2:	f002 fc7f 	bl	80057d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ed6:	1d3a      	adds	r2, r7, #4
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fb06 	bl	80044f0 <xTaskCheckForTimeOut>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d124      	bne.n	8002f34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eec:	f000 fcf5 	bl	80038da <prvIsQueueFull>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d018      	beq.n	8002f28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	3310      	adds	r3, #16
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 fa2c 	bl	800435c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f06:	f000 fc80 	bl	800380a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f0a:	f001 f85b 	bl	8003fc4 <xTaskResumeAll>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f af7c 	bne.w	8002e0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <xQueueGenericSend+0x1f8>)
 8002f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	e772      	b.n	8002e0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2a:	f000 fc6e 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f2e:	f001 f849 	bl	8003fc4 <xTaskResumeAll>
 8002f32:	e76c      	b.n	8002e0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f36:	f000 fc68 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f3a:	f001 f843 	bl	8003fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3738      	adds	r7, #56	; 0x38
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b090      	sub	sp, #64	; 0x40
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <xQueueGenericSendFromISR+0x3c>
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <xQueueGenericSendFromISR+0x40>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <xQueueGenericSendFromISR+0x42>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d103      	bne.n	8002fb6 <xQueueGenericSendFromISR+0x6a>
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <xQueueGenericSendFromISR+0x6e>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueGenericSendFromISR+0x70>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	623b      	str	r3, [r7, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fd6:	f002 fcaf 	bl	8005938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fda:	f3ef 8211 	mrs	r2, BASEPRI
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <xQueueGenericSendFromISR+0xbc>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d12f      	bne.n	8003068 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800301e:	f000 fb64 	bl	80036ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003022:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d112      	bne.n	8003052 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d016      	beq.n	8003062 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f9df 	bl	80043fc <xTaskRemoveFromEventList>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003056:	3301      	adds	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	b25a      	sxtb	r2, r3
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003062:	2301      	movs	r3, #1
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003066:	e001      	b.n	800306c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003068:	2300      	movs	r3, #0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800307a:	4618      	mov	r0, r3
 800307c:	3740      	adds	r7, #64	; 0x40
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08e      	sub	sp, #56	; 0x38
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	623b      	str	r3, [r7, #32]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <xQueueGiveFromISR+0x48>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61fb      	str	r3, [r7, #28]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <xQueueGiveFromISR+0x58>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <xQueueGiveFromISR+0x5c>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xQueueGiveFromISR+0x5e>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueGiveFromISR+0x78>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61bb      	str	r3, [r7, #24]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030fa:	f002 fc1d 	bl	8005938 <vPortValidateInterruptPriority>
	__asm volatile
 80030fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	617a      	str	r2, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003116:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	429a      	cmp	r2, r3
 8003128:	d22b      	bcs.n	8003182 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800313c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d112      	bne.n	800316c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	3324      	adds	r3, #36	; 0x24
 8003152:	4618      	mov	r0, r3
 8003154:	f001 f952 	bl	80043fc <xTaskRemoveFromEventList>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e007      	b.n	800317c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800316c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003170:	3301      	adds	r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	b25a      	sxtb	r2, r3
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800317c:	2301      	movs	r3, #1
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
 8003180:	e001      	b.n	8003186 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003182:	2300      	movs	r3, #0
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f383 8811 	msr	BASEPRI, r3
}
 8003190:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003194:	4618      	mov	r0, r3
 8003196:	3738      	adds	r7, #56	; 0x38
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <xQueueReceive+0x30>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	623b      	str	r3, [r7, #32]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <xQueueReceive+0x3e>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <xQueueReceive+0x42>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <xQueueReceive+0x44>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xQueueReceive+0x5e>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61fb      	str	r3, [r7, #28]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fa:	f001 fac1 	bl	8004780 <xTaskGetSchedulerState>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <xQueueReceive+0x6e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <xQueueReceive+0x72>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueReceive+0x74>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueReceive+0x8e>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61bb      	str	r3, [r7, #24]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800322a:	f002 faa3 	bl	8005774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01f      	beq.n	800327a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323e:	f000 fabe 	bl	80037be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00f      	beq.n	8003272 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	3310      	adds	r3, #16
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f8d0 	bl	80043fc <xTaskRemoveFromEventList>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003262:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <xQueueReceive+0x1bc>)
 8003264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003272:	f002 faaf 	bl	80057d4 <vPortExitCritical>
				return pdPASS;
 8003276:	2301      	movs	r3, #1
 8003278:	e069      	b.n	800334e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003280:	f002 faa8 	bl	80057d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003284:	2300      	movs	r3, #0
 8003286:	e062      	b.n	800334e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4618      	mov	r0, r3
 8003294:	f001 f916 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800329c:	f002 fa9a 	bl	80057d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a0:	f000 fe82 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032a4:	f002 fa66 	bl	8005774 <vPortEnterCritical>
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d103      	bne.n	80032be <xQueueReceive+0x122>
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d103      	bne.n	80032d4 <xQueueReceive+0x138>
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d4:	f002 fa7e 	bl	80057d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032d8:	1d3a      	adds	r2, r7, #4
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f905 	bl	80044f0 <xTaskCheckForTimeOut>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d123      	bne.n	8003334 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ee:	f000 fade 	bl	80038ae <prvIsQueueEmpty>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d017      	beq.n	8003328 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	3324      	adds	r3, #36	; 0x24
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f82b 	bl	800435c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003308:	f000 fa7f 	bl	800380a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800330c:	f000 fe5a 	bl	8003fc4 <xTaskResumeAll>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d189      	bne.n	800322a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <xQueueReceive+0x1bc>)
 8003318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	e780      	b.n	800322a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332a:	f000 fa6e 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800332e:	f000 fe49 	bl	8003fc4 <xTaskResumeAll>
 8003332:	e77a      	b.n	800322a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003336:	f000 fa68 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800333a:	f000 fe43 	bl	8003fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800333e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003340:	f000 fab5 	bl	80038ae <prvIsQueueEmpty>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f43f af6f 	beq.w	800322a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800334c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800334e:	4618      	mov	r0, r3
 8003350:	3730      	adds	r7, #48	; 0x30
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	; 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	623b      	str	r3, [r7, #32]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	61fb      	str	r3, [r7, #28]
}
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ac:	f001 f9e8 	bl	8004780 <xTaskGetSchedulerState>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xQueueSemaphoreTake+0x60>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueSemaphoreTake+0x64>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xQueueSemaphoreTake+0x66>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	61bb      	str	r3, [r7, #24]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033dc:	f002 f9ca 	bl	8005774 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d024      	beq.n	8003436 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033fc:	f001 fb36 	bl	8004a6c <pvTaskIncrementMutexHeldCount>
 8003400:	4602      	mov	r2, r0
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00f      	beq.n	800342e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	3310      	adds	r3, #16
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fff2 	bl	80043fc <xTaskRemoveFromEventList>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800341e:	4b54      	ldr	r3, [pc, #336]	; (8003570 <xQueueSemaphoreTake+0x214>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800342e:	f002 f9d1 	bl	80057d4 <vPortExitCritical>
				return pdPASS;
 8003432:	2301      	movs	r3, #1
 8003434:	e097      	b.n	8003566 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	617b      	str	r3, [r7, #20]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003458:	f002 f9bc 	bl	80057d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800345c:	2300      	movs	r3, #0
 800345e:	e082      	b.n	8003566 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	4618      	mov	r0, r3
 800346c:	f001 f82a 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003474:	f002 f9ae 	bl	80057d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003478:	f000 fd96 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800347c:	f002 f97a 	bl	8005774 <vPortEnterCritical>
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003486:	b25b      	sxtb	r3, r3
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d103      	bne.n	8003496 <xQueueSemaphoreTake+0x13a>
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800349c:	b25b      	sxtb	r3, r3
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d103      	bne.n	80034ac <xQueueSemaphoreTake+0x150>
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ac:	f002 f992 	bl	80057d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b0:	463a      	mov	r2, r7
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f819 	bl	80044f0 <xTaskCheckForTimeOut>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d132      	bne.n	800352a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034c6:	f000 f9f2 	bl	80038ae <prvIsQueueEmpty>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d026      	beq.n	800351e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80034d8:	f002 f94c 	bl	8005774 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 f96b 	bl	80047bc <xTaskPriorityInherit>
 80034e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80034e8:	f002 f974 	bl	80057d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 ff31 	bl	800435c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034fc:	f000 f985 	bl	800380a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003500:	f000 fd60 	bl	8003fc4 <xTaskResumeAll>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f af68 	bne.w	80033dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <xQueueSemaphoreTake+0x214>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	e75e      	b.n	80033dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800351e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003520:	f000 f973 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003524:	f000 fd4e 	bl	8003fc4 <xTaskResumeAll>
 8003528:	e758      	b.n	80033dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800352a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800352c:	f000 f96d 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003530:	f000 fd48 	bl	8003fc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003536:	f000 f9ba 	bl	80038ae <prvIsQueueEmpty>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	f43f af4d 	beq.w	80033dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003548:	f002 f914 	bl	8005774 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800354c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800354e:	f000 f8b4 	bl	80036ba <prvGetDisinheritPriorityAfterTimeout>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fa04 	bl	8004968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003560:	f002 f938 	bl	80057d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003566:	4618      	mov	r0, r3
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	623b      	str	r3, [r7, #32]
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <xQueueReceiveFromISR+0x3a>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <xQueueReceiveFromISR+0x3e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueReceiveFromISR+0x40>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61fb      	str	r3, [r7, #28]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ce:	f002 f9b3 	bl	8005938 <vPortValidateInterruptPriority>
	__asm volatile
 80035d2:	f3ef 8211 	mrs	r2, BASEPRI
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	61ba      	str	r2, [r7, #24]
 80035e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02f      	beq.n	800365a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003608:	f000 f8d9 	bl	80037be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d112      	bne.n	8003644 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	3310      	adds	r3, #16
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fee6 	bl	80043fc <xTaskRemoveFromEventList>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003648:	3301      	adds	r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	b25a      	sxtb	r2, r3
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003654:	2301      	movs	r3, #1
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
 8003658:	e001      	b.n	800365e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f383 8811 	msr	BASEPRI, r3
}
 8003668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800366c:	4618      	mov	r0, r3
 800366e:	3738      	adds	r7, #56	; 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <vQueueDelete+0x28>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	60bb      	str	r3, [r7, #8]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f95f 	bl	8003960 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f002 fa4f 	bl	8005b50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e001      	b.n	80036dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036dc:	68fb      	ldr	r3, [r7, #12]
	}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d14d      	bne.n	80037ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f8b9 	bl	800488c <xTaskPriorityDisinherit>
 800371a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	e043      	b.n	80037ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d119      	bne.n	800375e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6858      	ldr	r0, [r3, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	461a      	mov	r2, r3
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	f002 fbad 	bl	8005e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d32b      	bcc.n	80037ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	e026      	b.n	80037ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68d8      	ldr	r0, [r3, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	461a      	mov	r2, r3
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	f002 fb93 	bl	8005e94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	425b      	negs	r3, r3
 8003778:	441a      	add	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d207      	bcs.n	800379a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	425b      	negs	r3, r3
 8003794:	441a      	add	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d105      	bne.n	80037ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d303      	bcc.n	80037f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	461a      	mov	r2, r3
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f002 fb49 	bl	8005e94 <memcpy>
	}
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003812:	f001 ffaf 	bl	8005774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800381e:	e011      	b.n	8003844 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fde5 	bl	80043fc <xTaskRemoveFromEventList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003838:	f000 febc 	bl	80045b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3b01      	subs	r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	dce9      	bgt.n	8003820 <prvUnlockQueue+0x16>
 800384c:	e000      	b.n	8003850 <prvUnlockQueue+0x46>
					break;
 800384e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003858:	f001 ffbc 	bl	80057d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800385c:	f001 ff8a 	bl	8005774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003866:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003868:	e011      	b.n	800388e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3310      	adds	r3, #16
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fdc0 	bl	80043fc <xTaskRemoveFromEventList>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003882:	f000 fe97 	bl	80045b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003886:	7bbb      	ldrb	r3, [r7, #14]
 8003888:	3b01      	subs	r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003892:	2b00      	cmp	r3, #0
 8003894:	dce9      	bgt.n	800386a <prvUnlockQueue+0x60>
 8003896:	e000      	b.n	800389a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003898:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 ff97 	bl	80057d4 <vPortExitCritical>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b6:	f001 ff5d 	bl	8005774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e001      	b.n	80038cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038cc:	f001 ff82 	bl	80057d4 <vPortExitCritical>

	return xReturn;
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e2:	f001 ff47 	bl	8005774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d102      	bne.n	80038f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e001      	b.n	80038fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fc:	f001 ff6a 	bl	80057d4 <vPortExitCritical>

	return xReturn;
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e014      	b.n	8003946 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <vQueueAddToRegistry+0x50>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <vQueueAddToRegistry+0x50>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <vQueueAddToRegistry+0x50>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800393e:	e006      	b.n	800394e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b07      	cmp	r3, #7
 800394a:	d9e7      	bls.n	800391c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000838 	.word	0x20000838

08003960 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e016      	b.n	800399c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800396e:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <vQueueUnregisterQueue+0x50>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d10b      	bne.n	8003996 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <vQueueUnregisterQueue+0x50>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2100      	movs	r1, #0
 8003984:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003988:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <vQueueUnregisterQueue+0x50>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
				break;
 8003994:	e006      	b.n	80039a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d9e5      	bls.n	800396e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000838 	.word	0x20000838

080039b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039c4:	f001 fed6 	bl	8005774 <vPortEnterCritical>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <vQueueWaitForMessageRestricted+0x2a>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d103      	bne.n	80039f4 <vQueueWaitForMessageRestricted+0x40>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f4:	f001 feee 	bl	80057d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3324      	adds	r3, #36	; 0x24
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fccb 	bl	80043a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff fefb 	bl	800380a <prvUnlockQueue>
	}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08e      	sub	sp, #56	; 0x38
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	623b      	str	r3, [r7, #32]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	61fb      	str	r3, [r7, #28]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a62:	23a8      	movs	r3, #168	; 0xa8
 8003a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2ba8      	cmp	r3, #168	; 0xa8
 8003a6a:	d00a      	beq.n	8003a82 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61bb      	str	r3, [r7, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01e      	beq.n	8003ac8 <xTaskCreateStatic+0xac>
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f850 	bl	8003b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac2:	f000 f8f3 	bl	8003cac <prvAddNewTaskToReadyList>
 8003ac6:	e001      	b.n	8003acc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003acc:	697b      	ldr	r3, [r7, #20]
	}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3728      	adds	r7, #40	; 0x28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b08c      	sub	sp, #48	; 0x30
 8003ada:	af04      	add	r7, sp, #16
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 ff64 	bl	80059b8 <pvPortMalloc>
 8003af0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003af8:	20a8      	movs	r0, #168	; 0xa8
 8003afa:	f001 ff5d 	bl	80059b8 <pvPortMalloc>
 8003afe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0c:	e005      	b.n	8003b1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f002 f81e 	bl	8005b50 <vPortFree>
 8003b14:	e001      	b.n	8003b1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9303      	str	r3, [sp, #12]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f80e 	bl	8003b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b44:	69f8      	ldr	r0, [r7, #28]
 8003b46:	f000 f8b1 	bl	8003cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e002      	b.n	8003b56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b56:	69bb      	ldr	r3, [r7, #24]
	}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	461a      	mov	r2, r3
 8003b78:	21a5      	movs	r1, #165	; 0xa5
 8003b7a:	f002 f907 	bl	8005d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f023 0307 	bic.w	r3, r3, #7
 8003b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	617b      	str	r3, [r7, #20]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01f      	beq.n	8003bfe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e012      	b.n	8003bea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	7819      	ldrb	r1, [r3, #0]
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3334      	adds	r3, #52	; 0x34
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d9e9      	bls.n	8003bc4 <prvInitialiseNewTask+0x64>
 8003bf0:	e000      	b.n	8003bf4 <prvInitialiseNewTask+0x94>
			{
				break;
 8003bf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bfc:	e003      	b.n	8003c06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	2b37      	cmp	r3, #55	; 0x37
 8003c0a:	d901      	bls.n	8003c10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c0c:	2337      	movs	r3, #55	; 0x37
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	2200      	movs	r2, #0
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fe09 	bl	800283e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fe04 	bl	800283e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	3354      	adds	r3, #84	; 0x54
 8003c60:	224c      	movs	r2, #76	; 0x4c
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 f891 	bl	8005d8c <memset>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <prvInitialiseNewTask+0x140>)
 8003c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <prvInitialiseNewTask+0x144>)
 8003c74:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <prvInitialiseNewTask+0x148>)
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f001 fc4b 	bl	800551c <pxPortInitialiseStack>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20001e6c 	.word	0x20001e6c
 8003ca4:	20001ed4 	.word	0x20001ed4
 8003ca8:	20001f3c 	.word	0x20001f3c

08003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cb4:	f001 fd5e 	bl	8005774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cca:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cd8:	f000 fc90 	bl	80045fc <prvInitialiseTaskLists>
 8003cdc:	e00d      	b.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d802      	bhi.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <prvAddNewTaskToReadyList+0xd4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <prvAddNewTaskToReadyList+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <prvAddNewTaskToReadyList+0xd4>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <prvAddNewTaskToReadyList+0xd8>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fd8e 	bl	8002858 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d3c:	f001 fd4a 	bl	80057d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d207      	bcs.n	8003d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <prvAddNewTaskToReadyList+0xdc>)
 8003d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000d4c 	.word	0x20000d4c
 8003d74:	20000878 	.word	0x20000878
 8003d78:	20000d58 	.word	0x20000d58
 8003d7c:	20000d68 	.word	0x20000d68
 8003d80:	20000d54 	.word	0x20000d54
 8003d84:	2000087c 	.word	0x2000087c
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b37      	cmp	r3, #55	; 0x37
 8003d9e:	d90a      	bls.n	8003db6 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b37      	cmp	r3, #55	; 0x37
 8003dba:	d901      	bls.n	8003dc0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dbc:	2337      	movs	r3, #55	; 0x37
 8003dbe:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003dc0:	f001 fcd8 	bl	8005774 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <vTaskPrioritySet+0x44>
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <vTaskPrioritySet+0x12c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	e000      	b.n	8003dd2 <vTaskPrioritySet+0x46>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d063      	beq.n	8003eaa <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d90d      	bls.n	8003e06 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003dea:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <vTaskPrioritySet+0x12c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d00f      	beq.n	8003e14 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <vTaskPrioritySet+0x12c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d309      	bcc.n	8003e14 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e006      	b.n	8003e14 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <vTaskPrioritySet+0x12c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d101      	bne.n	8003e14 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d102      	bne.n	8003e2c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db04      	blt.n	8003e44 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6959      	ldr	r1, [r3, #20]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <vTaskPrioritySet+0x130>)
 8003e54:	4413      	add	r3, r2
 8003e56:	4299      	cmp	r1, r3
 8003e58:	d11c      	bne.n	8003e94 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fd57 	bl	8002912 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <vTaskPrioritySet+0x134>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d903      	bls.n	8003e78 <vTaskPrioritySet+0xec>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <vTaskPrioritySet+0x134>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <vTaskPrioritySet+0x130>)
 8003e86:	441a      	add	r2, r3
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fce2 	bl	8002858 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <vTaskPrioritySet+0x138>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003eaa:	f001 fc93 	bl	80057d4 <vPortExitCritical>
	}
 8003eae:	bf00      	nop
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000878 	.word	0x20000878
 8003ebc:	2000087c 	.word	0x2000087c
 8003ec0:	20000d54 	.word	0x20000d54
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	1d39      	adds	r1, r7, #4
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fc08 	bl	80026f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	4924      	ldr	r1, [pc, #144]	; (8003f88 <vTaskStartScheduler+0xc0>)
 8003ef8:	4824      	ldr	r0, [pc, #144]	; (8003f8c <vTaskStartScheduler+0xc4>)
 8003efa:	f7ff fd8f 	bl	8003a1c <xTaskCreateStatic>
 8003efe:	4603      	mov	r3, r0
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <vTaskStartScheduler+0xc8>)
 8003f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <vTaskStartScheduler+0xc8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e001      	b.n	8003f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f1c:	f000 ffb0 	bl	8004e80 <xTimerCreateTimerTask>
 8003f20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d11b      	bne.n	8003f60 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	613b      	str	r3, [r7, #16]
}
 8003f3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <vTaskStartScheduler+0xcc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3354      	adds	r3, #84	; 0x54
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <vTaskStartScheduler+0xd0>)
 8003f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <vTaskStartScheduler+0xd4>)
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <vTaskStartScheduler+0xd8>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <vTaskStartScheduler+0xdc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f5a:	f001 fb69 	bl	8005630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f5e:	e00e      	b.n	8003f7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d10a      	bne.n	8003f7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60fb      	str	r3, [r7, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <vTaskStartScheduler+0xb4>
}
 8003f7e:	bf00      	nop
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	08005fac 	.word	0x08005fac
 8003f8c:	080045cd 	.word	0x080045cd
 8003f90:	20000d70 	.word	0x20000d70
 8003f94:	20000878 	.word	0x20000878
 8003f98:	2000005c 	.word	0x2000005c
 8003f9c:	20000d6c 	.word	0x20000d6c
 8003fa0:	20000d58 	.word	0x20000d58
 8003fa4:	20000d50 	.word	0x20000d50

08003fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <vTaskSuspendAll+0x18>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a03      	ldr	r2, [pc, #12]	; (8003fc0 <vTaskSuspendAll+0x18>)
 8003fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000d74 	.word	0x20000d74

08003fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fd2:	4b42      	ldr	r3, [pc, #264]	; (80040dc <xTaskResumeAll+0x118>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	603b      	str	r3, [r7, #0]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ff0:	f001 fbc0 	bl	8005774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ff4:	4b39      	ldr	r3, [pc, #228]	; (80040dc <xTaskResumeAll+0x118>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <xTaskResumeAll+0x118>)
 8003ffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffe:	4b37      	ldr	r3, [pc, #220]	; (80040dc <xTaskResumeAll+0x118>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d162      	bne.n	80040cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004006:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <xTaskResumeAll+0x11c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d05e      	beq.n	80040cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800400e:	e02f      	b.n	8004070 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <xTaskResumeAll+0x120>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3318      	adds	r3, #24
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fc78 	bl	8002912 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3304      	adds	r3, #4
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fc73 	bl	8002912 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <xTaskResumeAll+0x124>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d903      	bls.n	8004040 <xTaskResumeAll+0x7c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <xTaskResumeAll+0x124>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <xTaskResumeAll+0x128>)
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7fe fbfe 	bl	8002858 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <xTaskResumeAll+0x12c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <xTaskResumeAll+0x130>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <xTaskResumeAll+0x120>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1cb      	bne.n	8004010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800407e:	f000 fb5f 	bl	8004740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <xTaskResumeAll+0x134>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d010      	beq.n	80040b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800408e:	f000 f847 	bl	8004120 <xTaskIncrementTick>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <xTaskResumeAll+0x130>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f1      	bne.n	800408e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <xTaskResumeAll+0x134>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <xTaskResumeAll+0x130>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040b8:	2301      	movs	r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <xTaskResumeAll+0x138>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040cc:	f001 fb82 	bl	80057d4 <vPortExitCritical>

	return xAlreadyYielded;
 80040d0:	68bb      	ldr	r3, [r7, #8]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000d74 	.word	0x20000d74
 80040e0:	20000d4c 	.word	0x20000d4c
 80040e4:	20000d0c 	.word	0x20000d0c
 80040e8:	20000d54 	.word	0x20000d54
 80040ec:	2000087c 	.word	0x2000087c
 80040f0:	20000878 	.word	0x20000878
 80040f4:	20000d60 	.word	0x20000d60
 80040f8:	20000d5c 	.word	0x20000d5c
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <xTaskGetTickCount+0x1c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800410c:	687b      	ldr	r3, [r7, #4]
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000d50 	.word	0x20000d50

08004120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412a:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <xTaskIncrementTick+0x148>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 808f 	bne.w	8004252 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004134:	4b4d      	ldr	r3, [pc, #308]	; (800426c <xTaskIncrementTick+0x14c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800413c:	4a4b      	ldr	r2, [pc, #300]	; (800426c <xTaskIncrementTick+0x14c>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d120      	bne.n	800418a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004148:	4b49      	ldr	r3, [pc, #292]	; (8004270 <xTaskIncrementTick+0x150>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <xTaskIncrementTick+0x48>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xTaskIncrementTick+0x46>
 8004168:	4b41      	ldr	r3, [pc, #260]	; (8004270 <xTaskIncrementTick+0x150>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <xTaskIncrementTick+0x154>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3f      	ldr	r2, [pc, #252]	; (8004270 <xTaskIncrementTick+0x150>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4a3f      	ldr	r2, [pc, #252]	; (8004274 <xTaskIncrementTick+0x154>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <xTaskIncrementTick+0x158>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <xTaskIncrementTick+0x158>)
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	f000 fadb 	bl	8004740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800418a:	4b3c      	ldr	r3, [pc, #240]	; (800427c <xTaskIncrementTick+0x15c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d349      	bcc.n	8004228 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <xTaskIncrementTick+0x150>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <xTaskIncrementTick+0x15c>)
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	601a      	str	r2, [r3, #0]
					break;
 80041a6:	e03f      	b.n	8004228 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <xTaskIncrementTick+0x150>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d203      	bcs.n	80041c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041c0:	4a2e      	ldr	r2, [pc, #184]	; (800427c <xTaskIncrementTick+0x15c>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041c6:	e02f      	b.n	8004228 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fba0 	bl	8002912 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3318      	adds	r3, #24
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fb97 	bl	8002912 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <xTaskIncrementTick+0x160>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d903      	bls.n	80041f8 <xTaskIncrementTick+0xd8>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <xTaskIncrementTick+0x160>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <xTaskIncrementTick+0x164>)
 8004206:	441a      	add	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7fe fb22 	bl	8002858 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <xTaskIncrementTick+0x168>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	429a      	cmp	r2, r3
 8004220:	d3b8      	bcc.n	8004194 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004226:	e7b5      	b.n	8004194 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <xTaskIncrementTick+0x168>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4915      	ldr	r1, [pc, #84]	; (8004284 <xTaskIncrementTick+0x164>)
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d901      	bls.n	8004244 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <xTaskIncrementTick+0x16c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e004      	b.n	800425c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <xTaskIncrementTick+0x170>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <xTaskIncrementTick+0x170>)
 800425a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800425c:	697b      	ldr	r3, [r7, #20]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000d74 	.word	0x20000d74
 800426c:	20000d50 	.word	0x20000d50
 8004270:	20000d04 	.word	0x20000d04
 8004274:	20000d08 	.word	0x20000d08
 8004278:	20000d64 	.word	0x20000d64
 800427c:	20000d6c 	.word	0x20000d6c
 8004280:	20000d54 	.word	0x20000d54
 8004284:	2000087c 	.word	0x2000087c
 8004288:	20000878 	.word	0x20000878
 800428c:	20000d60 	.word	0x20000d60
 8004290:	20000d5c 	.word	0x20000d5c

08004294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800429a:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <vTaskSwitchContext+0xb0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <vTaskSwitchContext+0xb4>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042a8:	e046      	b.n	8004338 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <vTaskSwitchContext+0xb4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	4b26      	ldr	r3, [pc, #152]	; (800434c <vTaskSwitchContext+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e010      	b.n	80042da <vTaskSwitchContext+0x46>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	607b      	str	r3, [r7, #4]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <vTaskSwitchContext+0x3e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	491d      	ldr	r1, [pc, #116]	; (8004350 <vTaskSwitchContext+0xbc>)
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0e4      	beq.n	80042b8 <vTaskSwitchContext+0x24>
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a15      	ldr	r2, [pc, #84]	; (8004350 <vTaskSwitchContext+0xbc>)
 80042fa:	4413      	add	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3308      	adds	r3, #8
 8004310:	429a      	cmp	r2, r3
 8004312:	d104      	bne.n	800431e <vTaskSwitchContext+0x8a>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <vTaskSwitchContext+0xc0>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <vTaskSwitchContext+0xb8>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <vTaskSwitchContext+0xc0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3354      	adds	r3, #84	; 0x54
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <vTaskSwitchContext+0xc4>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000d74 	.word	0x20000d74
 8004348:	20000d60 	.word	0x20000d60
 800434c:	20000d54 	.word	0x20000d54
 8004350:	2000087c 	.word	0x2000087c
 8004354:	20000878 	.word	0x20000878
 8004358:	2000005c 	.word	0x2000005c

0800435c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <vTaskPlaceOnEventList+0x44>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3318      	adds	r3, #24
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe fa88 	bl	80028a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004390:	2101      	movs	r1, #1
 8004392:	6838      	ldr	r0, [r7, #0]
 8004394:	f000 fd20 	bl	8004dd8 <prvAddCurrentTaskToDelayedList>
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000878 	.word	0x20000878

080043a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	617b      	str	r3, [r7, #20]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3318      	adds	r3, #24
 80043d2:	4619      	mov	r1, r3
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7fe fa3f 	bl	8002858 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
 80043e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	68b8      	ldr	r0, [r7, #8]
 80043ea:	f000 fcf5 	bl	8004dd8 <prvAddCurrentTaskToDelayedList>
	}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000878 	.word	0x20000878

080043fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	3318      	adds	r3, #24
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fa70 	bl	8002912 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <xTaskRemoveFromEventList+0xb0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11d      	bne.n	8004476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3304      	adds	r3, #4
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fa67 	bl	8002912 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <xTaskRemoveFromEventList+0xb4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d903      	bls.n	8004458 <xTaskRemoveFromEventList+0x5c>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <xTaskRemoveFromEventList+0xb4>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <xTaskRemoveFromEventList+0xb8>)
 8004466:	441a      	add	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7fe f9f2 	bl	8002858 <vListInsertEnd>
 8004474:	e005      	b.n	8004482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3318      	adds	r3, #24
 800447a:	4619      	mov	r1, r3
 800447c:	480e      	ldr	r0, [pc, #56]	; (80044b8 <xTaskRemoveFromEventList+0xbc>)
 800447e:	f7fe f9eb 	bl	8002858 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <xTaskRemoveFromEventList+0xc0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d905      	bls.n	800449c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <xTaskRemoveFromEventList+0xc4>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e001      	b.n	80044a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044a0:	697b      	ldr	r3, [r7, #20]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000d74 	.word	0x20000d74
 80044b0:	20000d54 	.word	0x20000d54
 80044b4:	2000087c 	.word	0x2000087c
 80044b8:	20000d0c 	.word	0x20000d0c
 80044bc:	20000878 	.word	0x20000878
 80044c0:	20000d60 	.word	0x20000d60

080044c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <vTaskInternalSetTimeOutState+0x24>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <vTaskInternalSetTimeOutState+0x28>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000d64 	.word	0x20000d64
 80044ec:	20000d50 	.word	0x20000d50

080044f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	613b      	str	r3, [r7, #16]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004532:	f001 f91f 	bl	8005774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <xTaskCheckForTimeOut+0xbc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d102      	bne.n	8004556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e023      	b.n	800459e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <xTaskCheckForTimeOut+0xc0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d007      	beq.n	8004572 <xTaskCheckForTimeOut+0x82>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e015      	b.n	800459e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	429a      	cmp	r2, r3
 800457a:	d20b      	bcs.n	8004594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff9b 	bl	80044c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e004      	b.n	800459e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800459e:	f001 f919 	bl	80057d4 <vPortExitCritical>

	return xReturn;
 80045a2:	69fb      	ldr	r3, [r7, #28]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000d50 	.word	0x20000d50
 80045b0:	20000d64 	.word	0x20000d64

080045b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <vTaskMissedYield+0x14>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20000d60 	.word	0x20000d60

080045cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045d4:	f000 f852 	bl	800467c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <prvIdleTask+0x28>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d9f9      	bls.n	80045d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <prvIdleTask+0x2c>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045f0:	e7f0      	b.n	80045d4 <prvIdleTask+0x8>
 80045f2:	bf00      	nop
 80045f4:	2000087c 	.word	0x2000087c
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e00c      	b.n	8004622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <prvInitialiseTaskLists+0x60>)
 8004614:	4413      	add	r3, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f8f1 	bl	80027fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b37      	cmp	r3, #55	; 0x37
 8004626:	d9ef      	bls.n	8004608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004628:	480d      	ldr	r0, [pc, #52]	; (8004660 <prvInitialiseTaskLists+0x64>)
 800462a:	f7fe f8e8 	bl	80027fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800462e:	480d      	ldr	r0, [pc, #52]	; (8004664 <prvInitialiseTaskLists+0x68>)
 8004630:	f7fe f8e5 	bl	80027fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004634:	480c      	ldr	r0, [pc, #48]	; (8004668 <prvInitialiseTaskLists+0x6c>)
 8004636:	f7fe f8e2 	bl	80027fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800463a:	480c      	ldr	r0, [pc, #48]	; (800466c <prvInitialiseTaskLists+0x70>)
 800463c:	f7fe f8df 	bl	80027fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004640:	480b      	ldr	r0, [pc, #44]	; (8004670 <prvInitialiseTaskLists+0x74>)
 8004642:	f7fe f8dc 	bl	80027fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <prvInitialiseTaskLists+0x78>)
 8004648:	4a05      	ldr	r2, [pc, #20]	; (8004660 <prvInitialiseTaskLists+0x64>)
 800464a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <prvInitialiseTaskLists+0x7c>)
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <prvInitialiseTaskLists+0x68>)
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000087c 	.word	0x2000087c
 8004660:	20000cdc 	.word	0x20000cdc
 8004664:	20000cf0 	.word	0x20000cf0
 8004668:	20000d0c 	.word	0x20000d0c
 800466c:	20000d20 	.word	0x20000d20
 8004670:	20000d38 	.word	0x20000d38
 8004674:	20000d04 	.word	0x20000d04
 8004678:	20000d08 	.word	0x20000d08

0800467c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004682:	e019      	b.n	80046b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004684:	f001 f876 	bl	8005774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <prvCheckTasksWaitingTermination+0x50>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe f93c 	bl	8002912 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 80046a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ae:	f001 f891 	bl	80057d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f810 	bl	80046d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e1      	bne.n	8004684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000d20 	.word	0x20000d20
 80046d0:	20000d4c 	.word	0x20000d4c
 80046d4:	20000d34 	.word	0x20000d34

080046d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3354      	adds	r3, #84	; 0x54
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fb59 	bl	8005d9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fa29 	bl	8005b50 <vPortFree>
				vPortFree( pxTCB );
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f001 fa26 	bl	8005b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004704:	e018      	b.n	8004738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800470c:	2b01      	cmp	r3, #1
 800470e:	d103      	bne.n	8004718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 fa1d 	bl	8005b50 <vPortFree>
	}
 8004716:	e00f      	b.n	8004738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800471e:	2b02      	cmp	r3, #2
 8004720:	d00a      	beq.n	8004738 <prvDeleteTCB+0x60>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <prvDeleteTCB+0x5e>
	}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <prvResetNextTaskUnblockTime+0x38>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <prvResetNextTaskUnblockTime+0x3c>)
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004758:	e008      	b.n	800476c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <prvResetNextTaskUnblockTime+0x38>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <prvResetNextTaskUnblockTime+0x3c>)
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000d04 	.word	0x20000d04
 800477c:	20000d6c 	.word	0x20000d6c

08004780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <xTaskGetSchedulerState+0x34>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800478e:	2301      	movs	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e008      	b.n	80047a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <xTaskGetSchedulerState+0x38>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800479c:	2302      	movs	r3, #2
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	e001      	b.n	80047a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047a6:	687b      	ldr	r3, [r7, #4]
	}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000d58 	.word	0x20000d58
 80047b8:	20000d74 	.word	0x20000d74

080047bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d051      	beq.n	8004876 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <xTaskPriorityInherit+0xc4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d241      	bcs.n	8004864 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db06      	blt.n	80047f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <xTaskPriorityInherit+0xc4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6959      	ldr	r1, [r3, #20]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <xTaskPriorityInherit+0xc8>)
 8004808:	4413      	add	r3, r2
 800480a:	4299      	cmp	r1, r3
 800480c:	d122      	bne.n	8004854 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe f87d 	bl	8002912 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <xTaskPriorityInherit+0xc4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <xTaskPriorityInherit+0xcc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d903      	bls.n	8004836 <xTaskPriorityInherit+0x7a>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <xTaskPriorityInherit+0xcc>)
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <xTaskPriorityInherit+0xc8>)
 8004844:	441a      	add	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fe f803 	bl	8002858 <vListInsertEnd>
 8004852:	e004      	b.n	800485e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <xTaskPriorityInherit+0xc4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800485e:	2301      	movs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e008      	b.n	8004876 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <xTaskPriorityInherit+0xc4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	429a      	cmp	r2, r3
 8004870:	d201      	bcs.n	8004876 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004872:	2301      	movs	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004876:	68fb      	ldr	r3, [r7, #12]
	}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000878 	.word	0x20000878
 8004884:	2000087c 	.word	0x2000087c
 8004888:	20000d54 	.word	0x20000d54

0800488c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d056      	beq.n	8004950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <xTaskPriorityDisinherit+0xd0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d00a      	beq.n	80048c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	60bb      	str	r3, [r7, #8]
}
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d02c      	beq.n	8004950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d128      	bne.n	8004950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe f805 	bl	8002912 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <xTaskPriorityDisinherit+0xd4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d903      	bls.n	8004930 <xTaskPriorityDisinherit+0xa4>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <xTaskPriorityDisinherit+0xd4>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4a09      	ldr	r2, [pc, #36]	; (8004964 <xTaskPriorityDisinherit+0xd8>)
 800493e:	441a      	add	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7fd ff86 	bl	8002858 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004950:	697b      	ldr	r3, [r7, #20]
	}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000878 	.word	0x20000878
 8004960:	20000d54 	.word	0x20000d54
 8004964:	2000087c 	.word	0x2000087c

08004968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004976:	2301      	movs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d06a      	beq.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60fb      	str	r3, [r7, #12]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d902      	bls.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e002      	b.n	80049b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d04b      	beq.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d146      	bne.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d10a      	bne.n	80049e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db04      	blt.n	8004a06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6959      	ldr	r1, [r3, #20]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004a16:	4413      	add	r3, r2
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	d11c      	bne.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd ff76 	bl	8002912 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d903      	bls.n	8004a3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004a48:	441a      	add	r2, r3
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fd ff01 	bl	8002858 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a56:	bf00      	nop
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000878 	.word	0x20000878
 8004a64:	2000087c 	.word	0x2000087c
 8004a68:	20000d54 	.word	0x20000d54

08004a6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a7e:	3201      	adds	r2, #1
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004a82:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a84:	681b      	ldr	r3, [r3, #0]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	20000878 	.word	0x20000878

08004a94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <xTaskGenericNotify+0x30>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	61bb      	str	r3, [r7, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004ac8:	f000 fe54 	bl	8005774 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004ae2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d82d      	bhi.n	8004b4e <xTaskGenericNotify+0xba>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <xTaskGenericNotify+0x64>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b71 	.word	0x08004b71
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b1f 	.word	0x08004b1f
 8004b04:	08004b2f 	.word	0x08004b2f
 8004b08:	08004b39 	.word	0x08004b39
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004b1c:	e02b      	b.n	8004b76 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004b2c:	e023      	b.n	8004b76 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004b36:	e01e      	b.n	8004b76 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004b38:	7ffb      	ldrb	r3, [r7, #31]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d004      	beq.n	8004b48 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b46:	e016      	b.n	8004b76 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004b4c:	e013      	b.n	8004b76 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d00c      	beq.n	8004b74 <xTaskGenericNotify+0xe0>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	617b      	str	r3, [r7, #20]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xTaskGenericNotify+0xda>
					break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <xTaskGenericNotify+0xe2>

					break;
 8004b74:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d13a      	bne.n	8004bf2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fec6 	bl	8002912 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <xTaskGenericNotify+0x16c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d903      	bls.n	8004b9a <xTaskGenericNotify+0x106>
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <xTaskGenericNotify+0x16c>)
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <xTaskGenericNotify+0x170>)
 8004ba8:	441a      	add	r2, r3
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fd fe51 	bl	8002858 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <xTaskGenericNotify+0x140>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	613b      	str	r3, [r7, #16]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <xTaskGenericNotify+0x174>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d907      	bls.n	8004bf2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <xTaskGenericNotify+0x178>)
 8004be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004bf2:	f000 fdef 	bl	80057d4 <vPortExitCritical>

		return xReturn;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3728      	adds	r7, #40	; 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000d54 	.word	0x20000d54
 8004c04:	2000087c 	.word	0x2000087c
 8004c08:	20000878 	.word	0x20000878
 8004c0c:	e000ed04 	.word	0xe000ed04

08004c10 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004c20:	2301      	movs	r3, #1
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c40:	f000 fe7a 	bl	8005938 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004c48:	f3ef 8211 	mrs	r2, BASEPRI
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	623a      	str	r2, [r7, #32]
 8004c5e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004c60:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d82f      	bhi.n	8004cec <xTaskGenericNotifyFromISR+0xdc>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <xTaskGenericNotifyFromISR+0x84>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004d0f 	.word	0x08004d0f
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cbb 	.word	0x08004cbb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004cd5 	.word	0x08004cd5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004cb8:	e02c      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004cc8:	e024      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004cd2:	e01f      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d004      	beq.n	8004ce6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004ce4:	e016      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004cea:	e013      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d00c      	beq.n	8004d12 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61bb      	str	r3, [r7, #24]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <xTaskGenericNotifyFromISR+0x104>
					break;
 8004d12:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d146      	bne.n	8004daa <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	617b      	str	r3, [r7, #20]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3a:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <xTaskGenericNotifyFromISR+0x1b0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fde3 	bl	8002912 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <xTaskGenericNotifyFromISR+0x1b4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <xTaskGenericNotifyFromISR+0x150>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <xTaskGenericNotifyFromISR+0x1b4>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <xTaskGenericNotifyFromISR+0x1b8>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fd fd6e 	bl	8002858 <vListInsertEnd>
 8004d7c:	e005      	b.n	8004d8a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	3318      	adds	r3, #24
 8004d82:	4619      	mov	r1, r3
 8004d84:	4811      	ldr	r0, [pc, #68]	; (8004dcc <xTaskGenericNotifyFromISR+0x1bc>)
 8004d86:	f7fd fd67 	bl	8002858 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <xTaskGenericNotifyFromISR+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <xTaskGenericNotifyFromISR+0x1c4>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f383 8811 	msr	BASEPRI, r3
}
 8004db4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3738      	adds	r7, #56	; 0x38
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000d74 	.word	0x20000d74
 8004dc4:	20000d54 	.word	0x20000d54
 8004dc8:	2000087c 	.word	0x2000087c
 8004dcc:	20000d0c 	.word	0x20000d0c
 8004dd0:	20000878 	.word	0x20000878
 8004dd4:	20000d60 	.word	0x20000d60

08004dd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x90>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de8:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fd8f 	bl	8002912 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d10a      	bne.n	8004e12 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4819      	ldr	r0, [pc, #100]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e0c:	f7fd fd24 	bl	8002858 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e10:	e026      	b.n	8004e60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4413      	add	r3, r2
 8004e18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d209      	bcs.n	8004e3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fd fd32 	bl	80028a0 <vListInsert>
}
 8004e3c:	e010      	b.n	8004e60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fd fd28 	bl	80028a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d202      	bcs.n	8004e60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000d50 	.word	0x20000d50
 8004e6c:	20000878 	.word	0x20000878
 8004e70:	20000d38 	.word	0x20000d38
 8004e74:	20000d08 	.word	0x20000d08
 8004e78:	20000d04 	.word	0x20000d04
 8004e7c:	20000d6c 	.word	0x20000d6c

08004e80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	; 0x28
 8004e84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e8a:	f000 fb07 	bl	800549c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <xTimerCreateTimerTask+0x80>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d021      	beq.n	8004eda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e9e:	1d3a      	adds	r2, r7, #4
 8004ea0:	f107 0108 	add.w	r1, r7, #8
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fd fc3d 	bl	8002728 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	9202      	str	r2, [sp, #8]
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	2302      	movs	r3, #2
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	4910      	ldr	r1, [pc, #64]	; (8004f04 <xTimerCreateTimerTask+0x84>)
 8004ec2:	4811      	ldr	r0, [pc, #68]	; (8004f08 <xTimerCreateTimerTask+0x88>)
 8004ec4:	f7fe fdaa 	bl	8003a1c <xTaskCreateStatic>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <xTimerCreateTimerTask+0x8c>)
 8004ecc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <xTimerCreateTimerTask+0x8c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	613b      	str	r3, [r7, #16]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ef6:	697b      	ldr	r3, [r7, #20]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000da8 	.word	0x20000da8
 8004f04:	08005fb4 	.word	0x08005fb4
 8004f08:	08005045 	.word	0x08005045
 8004f0c:	20000dac 	.word	0x20000dac

08004f10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <xTimerGenericCommand+0x98>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02a      	beq.n	8004f9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	dc18      	bgt.n	8004f8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f58:	f7ff fc12 	bl	8004780 <xTaskGetSchedulerState>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d109      	bne.n	8004f76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <xTimerGenericCommand+0x98>)
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f107 0110 	add.w	r1, r7, #16
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	f7fd feef 	bl	8002d50 <xQueueGenericSend>
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24
 8004f74:	e012      	b.n	8004f9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <xTimerGenericCommand+0x98>)
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	f107 0110 	add.w	r1, r7, #16
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2200      	movs	r2, #0
 8004f82:	f7fd fee5 	bl	8002d50 <xQueueGenericSend>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24
 8004f88:	e008      	b.n	8004f9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <xTimerGenericCommand+0x98>)
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f107 0110 	add.w	r1, r7, #16
 8004f92:	2300      	movs	r3, #0
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	f7fd ffd9 	bl	8002f4c <xQueueGenericSendFromISR>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000da8 	.word	0x20000da8

08004fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb6:	4b22      	ldr	r3, [pc, #136]	; (8005040 <prvProcessExpiredTimer+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd fca4 	bl	8002912 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d022      	beq.n	800501e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	18d1      	adds	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	f000 f8d1 	bl	800518c <prvInsertTimerInActiveList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01f      	beq.n	8005030 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff ff88 	bl	8004f10 <xTimerGenericCommand>
 8005000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d113      	bne.n	8005030 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	4798      	blx	r3
}
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000da0 	.word	0x20000da0

08005044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f857 	bl	8005104 <prvGetNextExpireTime>
 8005056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4619      	mov	r1, r3
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f803 	bl	8005068 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005062:	f000 f8d5 	bl	8005210 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005066:	e7f1      	b.n	800504c <prvTimerTask+0x8>

08005068 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005072:	f7fe ff99 	bl	8003fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f866 	bl	800514c <prvSampleTimeNow>
 8005080:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d130      	bne.n	80050ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <prvProcessTimerOrBlockTask+0x3c>
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	429a      	cmp	r2, r3
 8005094:	d806      	bhi.n	80050a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005096:	f7fe ff95 	bl	8003fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff85 	bl	8004fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050a2:	e024      	b.n	80050ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <prvProcessTimerOrBlockTask+0x90>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <prvProcessTimerOrBlockTask+0x50>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <prvProcessTimerOrBlockTask+0x52>
 80050b8:	2300      	movs	r3, #0
 80050ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <prvProcessTimerOrBlockTask+0x94>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	f7fe fc73 	bl	80039b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050ce:	f7fe ff79 	bl	8003fc4 <xTaskResumeAll>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <prvProcessTimerOrBlockTask+0x98>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
}
 80050e8:	e001      	b.n	80050ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050ea:	f7fe ff6b 	bl	8003fc4 <xTaskResumeAll>
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000da4 	.word	0x20000da4
 80050fc:	20000da8 	.word	0x20000da8
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <prvGetNextExpireTime+0x44>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <prvGetNextExpireTime+0x16>
 8005116:	2201      	movs	r2, #1
 8005118:	e000      	b.n	800511c <prvGetNextExpireTime+0x18>
 800511a:	2200      	movs	r2, #0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <prvGetNextExpireTime+0x44>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e001      	b.n	8005138 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000da0 	.word	0x20000da0

0800514c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005154:	f7fe ffd4 	bl	8004100 <xTaskGetTickCount>
 8005158:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <prvSampleTimeNow+0x3c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d205      	bcs.n	8005170 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005164:	f000 f936 	bl	80053d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e002      	b.n	8005176 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <prvSampleTimeNow+0x3c>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800517c:	68fb      	ldr	r3, [r7, #12]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000db0 	.word	0x20000db0

0800518c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d812      	bhi.n	80051d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e01b      	b.n	80051fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <prvInsertTimerInActiveList+0x7c>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f7fd fb65 	bl	80028a0 <vListInsert>
 80051d6:	e012      	b.n	80051fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d206      	bcs.n	80051ee <prvInsertTimerInActiveList+0x62>
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d302      	bcc.n	80051ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e007      	b.n	80051fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <prvInsertTimerInActiveList+0x80>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7fd fb51 	bl	80028a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051fe:	697b      	ldr	r3, [r7, #20]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000da4 	.word	0x20000da4
 800520c:	20000da0 	.word	0x20000da0

08005210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005216:	e0ca      	b.n	80053ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	da18      	bge.n	8005250 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800521e:	1d3b      	adds	r3, r7, #4
 8005220:	3304      	adds	r3, #4
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61fb      	str	r3, [r7, #28]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005246:	6850      	ldr	r0, [r2, #4]
 8005248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524a:	6892      	ldr	r2, [r2, #8]
 800524c:	4611      	mov	r1, r2
 800524e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f2c0 80ab 	blt.w	80053ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fd fb52 	bl	8002912 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800526e:	463b      	mov	r3, r7
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff6b 	bl	800514c <prvSampleTimeNow>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b09      	cmp	r3, #9
 800527c:	f200 8096 	bhi.w	80053ac <prvProcessReceivedCommands+0x19c>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <prvProcessReceivedCommands+0x78>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b1 	.word	0x080052b1
 8005294:	08005325 	.word	0x08005325
 8005298:	08005339 	.word	0x08005339
 800529c:	08005383 	.word	0x08005383
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052b1 	.word	0x080052b1
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005339 	.word	0x08005339
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	18d1      	adds	r1, r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d0:	f7ff ff5c 	bl	800518c <prvInsertTimerInActiveList>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d069      	beq.n	80053ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05e      	beq.n	80053ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	441a      	add	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	2100      	movs	r1, #0
 8005300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005302:	f7ff fe05 	bl	8004f10 <xTimerGenericCommand>
 8005306:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d14f      	bne.n	80053ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	61bb      	str	r3, [r7, #24]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005336:	e03a      	b.n	80053ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	617b      	str	r3, [r7, #20]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537c:	f7ff ff06 	bl	800518c <prvInsertTimerInActiveList>
					break;
 8005380:	e015      	b.n	80053ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005392:	f000 fbdd 	bl	8005b50 <vPortFree>
 8005396:	e00a      	b.n	80053ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053aa:	e000      	b.n	80053ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80053ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <prvProcessReceivedCommands+0x1c0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1d39      	adds	r1, r7, #4
 80053b4:	2200      	movs	r2, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd fef0 	bl	800319c <xQueueReceive>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f47f af2a 	bne.w	8005218 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	3730      	adds	r7, #48	; 0x30
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000da8 	.word	0x20000da8

080053d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053da:	e048      	b.n	800546e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053dc:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <prvSwitchTimerLists+0xc0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <prvSwitchTimerLists+0xc0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fd fa8c 	bl	8002912 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02e      	beq.n	800546e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90e      	bls.n	8005440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800542e:	4b19      	ldr	r3, [pc, #100]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fd fa31 	bl	80028a0 <vListInsert>
 800543e:	e016      	b.n	800546e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005440:	2300      	movs	r3, #0
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	2100      	movs	r1, #0
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff fd60 	bl	8004f10 <xTimerGenericCommand>
 8005450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	603b      	str	r3, [r7, #0]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1b1      	bne.n	80053dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <prvSwitchTimerLists+0xc0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <prvSwitchTimerLists+0xc4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a04      	ldr	r2, [pc, #16]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005484:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <prvSwitchTimerLists+0xc4>)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000da0 	.word	0x20000da0
 8005498:	20000da4 	.word	0x20000da4

0800549c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054a2:	f000 f967 	bl	8005774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d120      	bne.n	80054f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054ae:	4814      	ldr	r0, [pc, #80]	; (8005500 <prvCheckForValidListAndQueue+0x64>)
 80054b0:	f7fd f9a5 	bl	80027fe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <prvCheckForValidListAndQueue+0x68>)
 80054b6:	f7fd f9a2 	bl	80027fe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <prvCheckForValidListAndQueue+0x6c>)
 80054bc:	4a10      	ldr	r2, [pc, #64]	; (8005500 <prvCheckForValidListAndQueue+0x64>)
 80054be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054c0:	4b12      	ldr	r3, [pc, #72]	; (800550c <prvCheckForValidListAndQueue+0x70>)
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <prvCheckForValidListAndQueue+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <prvCheckForValidListAndQueue+0x74>)
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <prvCheckForValidListAndQueue+0x78>)
 80054ce:	2110      	movs	r1, #16
 80054d0:	200a      	movs	r0, #10
 80054d2:	f7fd fab1 	bl	8002a38 <xQueueGenericCreateStatic>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	490b      	ldr	r1, [pc, #44]	; (8005518 <prvCheckForValidListAndQueue+0x7c>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fa0e 	bl	800390c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054f0:	f000 f970 	bl	80057d4 <vPortExitCritical>
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000da8 	.word	0x20000da8
 8005500:	20000d78 	.word	0x20000d78
 8005504:	20000d8c 	.word	0x20000d8c
 8005508:	20000da0 	.word	0x20000da0
 800550c:	20000da4 	.word	0x20000da4
 8005510:	20000e54 	.word	0x20000e54
 8005514:	20000db4 	.word	0x20000db4
 8005518:	08005fbc 	.word	0x08005fbc

0800551c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3b04      	subs	r3, #4
 800552c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b04      	subs	r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b04      	subs	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <pxPortInitialiseStack+0x64>)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3b14      	subs	r3, #20
 8005556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3b04      	subs	r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f06f 0202 	mvn.w	r2, #2
 800556a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b20      	subs	r3, #32
 8005570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	08005585 	.word	0x08005585

08005584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <prvTaskExitError+0x54>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d00a      	beq.n	80055ae <prvTaskExitError+0x2a>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60fb      	str	r3, [r7, #12]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <prvTaskExitError+0x28>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60bb      	str	r3, [r7, #8]
}
 80055c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055c2:	bf00      	nop
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0fc      	beq.n	80055c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	00000000 	.word	0x00000000

080055e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <pxCurrentTCBConst2>)
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	6808      	ldr	r0, [r1, #0]
 80055e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	f380 8809 	msr	PSP, r0
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8811 	msr	BASEPRI, r0
 80055fa:	4770      	bx	lr
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst2>:
 8005600:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005608:	4808      	ldr	r0, [pc, #32]	; (800562c <prvPortStartFirstTask+0x24>)
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	6800      	ldr	r0, [r0, #0]
 800560e:	f380 8808 	msr	MSP, r0
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8814 	msr	CONTROL, r0
 800561a:	b662      	cpsie	i
 800561c:	b661      	cpsie	f
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	df00      	svc	0
 8005628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800562a:	bf00      	nop
 800562c:	e000ed08 	.word	0xe000ed08

08005630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005636:	4b46      	ldr	r3, [pc, #280]	; (8005750 <xPortStartScheduler+0x120>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a46      	ldr	r2, [pc, #280]	; (8005754 <xPortStartScheduler+0x124>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10a      	bne.n	8005656 <xPortStartScheduler+0x26>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	613b      	str	r3, [r7, #16]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005656:	4b3e      	ldr	r3, [pc, #248]	; (8005750 <xPortStartScheduler+0x120>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <xPortStartScheduler+0x128>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d10a      	bne.n	8005676 <xPortStartScheduler+0x46>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005676:	4b39      	ldr	r3, [pc, #228]	; (800575c <xPortStartScheduler+0x12c>)
 8005678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005698:	b2da      	uxtb	r2, r3
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <xPortStartScheduler+0x130>)
 800569c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800569e:	4b31      	ldr	r3, [pc, #196]	; (8005764 <xPortStartScheduler+0x134>)
 80056a0:	2207      	movs	r2, #7
 80056a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056a4:	e009      	b.n	80056ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056a6:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <xPortStartScheduler+0x134>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <xPortStartScheduler+0x134>)
 80056ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d0ef      	beq.n	80056a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056c6:	4b27      	ldr	r3, [pc, #156]	; (8005764 <xPortStartScheduler+0x134>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1c3 0307 	rsb	r3, r3, #7
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d00a      	beq.n	80056e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056e8:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <xPortStartScheduler+0x134>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <xPortStartScheduler+0x134>)
 80056f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <xPortStartScheduler+0x134>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056fa:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <xPortStartScheduler+0x134>)
 80056fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005706:	4b18      	ldr	r3, [pc, #96]	; (8005768 <xPortStartScheduler+0x138>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <xPortStartScheduler+0x138>)
 800570c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <xPortStartScheduler+0x138>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <xPortStartScheduler+0x138>)
 8005718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800571c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800571e:	f000 f8dd 	bl	80058dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <xPortStartScheduler+0x13c>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005728:	f000 f8fc 	bl	8005924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800572c:	4b10      	ldr	r3, [pc, #64]	; (8005770 <xPortStartScheduler+0x140>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a0f      	ldr	r2, [pc, #60]	; (8005770 <xPortStartScheduler+0x140>)
 8005732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005738:	f7ff ff66 	bl	8005608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800573c:	f7fe fdaa 	bl	8004294 <vTaskSwitchContext>
	prvTaskExitError();
 8005740:	f7ff ff20 	bl	8005584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	e000ed00 	.word	0xe000ed00
 8005754:	410fc271 	.word	0x410fc271
 8005758:	410fc270 	.word	0x410fc270
 800575c:	e000e400 	.word	0xe000e400
 8005760:	20000ea4 	.word	0x20000ea4
 8005764:	20000ea8 	.word	0x20000ea8
 8005768:	e000ed20 	.word	0xe000ed20
 800576c:	2000000c 	.word	0x2000000c
 8005770:	e000ef34 	.word	0xe000ef34

08005774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	607b      	str	r3, [r7, #4]
}
 800578c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <vPortEnterCritical+0x58>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <vPortEnterCritical+0x58>)
 8005796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <vPortEnterCritical+0x58>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10f      	bne.n	80057c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortEnterCritical+0x5c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	603b      	str	r3, [r7, #0]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <vPortEnterCritical+0x4a>
	}
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	2000000c 	.word	0x2000000c
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <vPortExitCritical+0x50>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <vPortExitCritical+0x24>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	607b      	str	r3, [r7, #4]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <vPortExitCritical+0x50>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <vPortExitCritical+0x50>)
 8005800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <vPortExitCritical+0x50>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <vPortExitCritical+0x42>
 800580a:	2300      	movs	r3, #0
 800580c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f383 8811 	msr	BASEPRI, r3
}
 8005814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	2000000c 	.word	0x2000000c
	...

08005830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005830:	f3ef 8009 	mrs	r0, PSP
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4b15      	ldr	r3, [pc, #84]	; (8005890 <pxCurrentTCBConst>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f01e 0f10 	tst.w	lr, #16
 8005840:	bf08      	it	eq
 8005842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005854:	f380 8811 	msr	BASEPRI, r0
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f7fe fd18 	bl	8004294 <vTaskSwitchContext>
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f380 8811 	msr	BASEPRI, r0
 800586c:	bc09      	pop	{r0, r3}
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	6808      	ldr	r0, [r1, #0]
 8005872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005876:	f01e 0f10 	tst.w	lr, #16
 800587a:	bf08      	it	eq
 800587c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005880:	f380 8809 	msr	PSP, r0
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst>:
 8005890:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	607b      	str	r3, [r7, #4]
}
 80058b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058b2:	f7fe fc35 	bl	8004120 <xTaskIncrementTick>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <xPortSysTickHandler+0x40>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f383 8811 	msr	BASEPRI, r3
}
 80058ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <vPortSetupTimerInterrupt+0x34>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <vPortSetupTimerInterrupt+0x38>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <vPortSetupTimerInterrupt+0x3c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	; (800591c <vPortSetupTimerInterrupt+0x40>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <vPortSetupTimerInterrupt+0x44>)
 80058fa:	3b01      	subs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058fe:	4b04      	ldr	r3, [pc, #16]	; (8005910 <vPortSetupTimerInterrupt+0x34>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e010 	.word	0xe000e010
 8005914:	e000e018 	.word	0xe000e018
 8005918:	20000000 	.word	0x20000000
 800591c:	10624dd3 	.word	0x10624dd3
 8005920:	e000e014 	.word	0xe000e014

08005924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005934 <vPortEnableVFP+0x10>
 8005928:	6801      	ldr	r1, [r0, #0]
 800592a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800592e:	6001      	str	r1, [r0, #0]
 8005930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005932:	bf00      	nop
 8005934:	e000ed88 	.word	0xe000ed88

08005938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	d914      	bls.n	8005974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800594a:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <vPortValidateInterruptPriority+0x70>)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005954:	4b15      	ldr	r3, [pc, #84]	; (80059ac <vPortValidateInterruptPriority+0x74>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	7afa      	ldrb	r2, [r7, #11]
 800595a:	429a      	cmp	r2, r3
 800595c:	d20a      	bcs.n	8005974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <vPortValidateInterruptPriority+0x78>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <vPortValidateInterruptPriority+0x7c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d90a      	bls.n	800599a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	603b      	str	r3, [r7, #0]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vPortValidateInterruptPriority+0x60>
	}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	e000e3f0 	.word	0xe000e3f0
 80059ac:	20000ea4 	.word	0x20000ea4
 80059b0:	e000ed0c 	.word	0xe000ed0c
 80059b4:	20000ea8 	.word	0x20000ea8

080059b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059c4:	f7fe faf0 	bl	8003fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059c8:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <pvPortMalloc+0x180>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059d0:	f000 f920 	bl	8005c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059d4:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <pvPortMalloc+0x184>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 8093 	bne.w	8005b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01d      	beq.n	8005a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059e8:	2208      	movs	r2, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d014      	beq.n	8005a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f023 0307 	bic.w	r3, r3, #7
 8005a00:	3308      	adds	r3, #8
 8005a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <pvPortMalloc+0x6c>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	617b      	str	r3, [r7, #20]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d06e      	beq.n	8005b08 <pvPortMalloc+0x150>
 8005a2a:	4b45      	ldr	r3, [pc, #276]	; (8005b40 <pvPortMalloc+0x188>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d869      	bhi.n	8005b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <pvPortMalloc+0x18c>)
 8005a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <pvPortMalloc+0x18c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a3e:	e004      	b.n	8005a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d903      	bls.n	8005a5c <pvPortMalloc+0xa4>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f1      	bne.n	8005a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <pvPortMalloc+0x180>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d050      	beq.n	8005b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d91f      	bls.n	8005ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	613b      	str	r3, [r7, #16]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ac2:	69b8      	ldr	r0, [r7, #24]
 8005ac4:	f000 f908 	bl	8005cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <pvPortMalloc+0x188>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <pvPortMalloc+0x188>)
 8005ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <pvPortMalloc+0x188>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <pvPortMalloc+0x190>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d203      	bcs.n	8005aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <pvPortMalloc+0x188>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <pvPortMalloc+0x190>)
 8005ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <pvPortMalloc+0x184>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005afe:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <pvPortMalloc+0x194>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <pvPortMalloc+0x194>)
 8005b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b08:	f7fe fa5c 	bl	8003fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <pvPortMalloc+0x174>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	60fb      	str	r3, [r7, #12]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <pvPortMalloc+0x172>
	return pvReturn;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20001e54 	.word	0x20001e54
 8005b3c:	20001e68 	.word	0x20001e68
 8005b40:	20001e58 	.word	0x20001e58
 8005b44:	20001e4c 	.word	0x20001e4c
 8005b48:	20001e5c 	.word	0x20001e5c
 8005b4c:	20001e60 	.word	0x20001e60

08005b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04d      	beq.n	8005bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b62:	2308      	movs	r3, #8
 8005b64:	425b      	negs	r3, r3
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <vPortFree+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <vPortFree+0x44>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <vPortFree+0x62>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60bb      	str	r3, [r7, #8]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <vPortFree+0xb8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11a      	bne.n	8005bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <vPortFree+0xb8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bd8:	f7fe f9e6 	bl	8003fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <vPortFree+0xbc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <vPortFree+0xbc>)
 8005be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f000 f874 	bl	8005cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <vPortFree+0xc0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <vPortFree+0xc0>)
 8005bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bfa:	f7fe f9e3 	bl	8003fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20001e68 	.word	0x20001e68
 8005c0c:	20001e58 	.word	0x20001e58
 8005c10:	20001e64 	.word	0x20001e64

08005c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c1a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <prvHeapInit+0xac>)
 8005c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3307      	adds	r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <prvHeapInit+0xac>)
 8005c44:	4413      	add	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <prvHeapInit+0xb0>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c60:	2208      	movs	r2, #8
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <prvHeapInit+0xb4>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <prvHeapInit+0xb8>)
 8005ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <prvHeapInit+0xbc>)
 8005caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <prvHeapInit+0xc0>)
 8005cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000eac 	.word	0x20000eac
 8005cc4:	20001e4c 	.word	0x20001e4c
 8005cc8:	20001e54 	.word	0x20001e54
 8005ccc:	20001e5c 	.word	0x20001e5c
 8005cd0:	20001e58 	.word	0x20001e58
 8005cd4:	20001e68 	.word	0x20001e68

08005cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ce0:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <prvInsertBlockIntoFreeList+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <prvInsertBlockIntoFreeList+0x14>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d8f7      	bhi.n	8005ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d108      	bne.n	8005d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d118      	bne.n	8005d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d00d      	beq.n	8005d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	441a      	add	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e008      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvInsertBlockIntoFreeList+0xb0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e003      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d002      	beq.n	8005d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20001e4c 	.word	0x20001e4c
 8005d88:	20001e54 	.word	0x20001e54

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <_reclaim_reent>:
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <_reclaim_reent+0xa8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4283      	cmp	r3, r0
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	d04b      	beq.n	8005e40 <_reclaim_reent+0xa4>
 8005da8:	69c3      	ldr	r3, [r0, #28]
 8005daa:	b143      	cbz	r3, 8005dbe <_reclaim_reent+0x22>
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d144      	bne.n	8005e3c <_reclaim_reent+0xa0>
 8005db2:	69e3      	ldr	r3, [r4, #28]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	b111      	cbz	r1, 8005dbe <_reclaim_reent+0x22>
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 f879 	bl	8005eb0 <_free_r>
 8005dbe:	6961      	ldr	r1, [r4, #20]
 8005dc0:	b111      	cbz	r1, 8005dc8 <_reclaim_reent+0x2c>
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f874 	bl	8005eb0 <_free_r>
 8005dc8:	69e1      	ldr	r1, [r4, #28]
 8005dca:	b111      	cbz	r1, 8005dd2 <_reclaim_reent+0x36>
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 f86f 	bl	8005eb0 <_free_r>
 8005dd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005dd4:	b111      	cbz	r1, 8005ddc <_reclaim_reent+0x40>
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f86a 	bl	8005eb0 <_free_r>
 8005ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dde:	b111      	cbz	r1, 8005de6 <_reclaim_reent+0x4a>
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f865 	bl	8005eb0 <_free_r>
 8005de6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005de8:	b111      	cbz	r1, 8005df0 <_reclaim_reent+0x54>
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 f860 	bl	8005eb0 <_free_r>
 8005df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005df2:	b111      	cbz	r1, 8005dfa <_reclaim_reent+0x5e>
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 f85b 	bl	8005eb0 <_free_r>
 8005dfa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005dfc:	b111      	cbz	r1, 8005e04 <_reclaim_reent+0x68>
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 f856 	bl	8005eb0 <_free_r>
 8005e04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e06:	b111      	cbz	r1, 8005e0e <_reclaim_reent+0x72>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 f851 	bl	8005eb0 <_free_r>
 8005e0e:	6a23      	ldr	r3, [r4, #32]
 8005e10:	b1b3      	cbz	r3, 8005e40 <_reclaim_reent+0xa4>
 8005e12:	4620      	mov	r0, r4
 8005e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e18:	4718      	bx	r3
 8005e1a:	5949      	ldr	r1, [r1, r5]
 8005e1c:	b941      	cbnz	r1, 8005e30 <_reclaim_reent+0x94>
 8005e1e:	3504      	adds	r5, #4
 8005e20:	69e3      	ldr	r3, [r4, #28]
 8005e22:	2d80      	cmp	r5, #128	; 0x80
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	d1f8      	bne.n	8005e1a <_reclaim_reent+0x7e>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f841 	bl	8005eb0 <_free_r>
 8005e2e:	e7c0      	b.n	8005db2 <_reclaim_reent+0x16>
 8005e30:	680e      	ldr	r6, [r1, #0]
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f83c 	bl	8005eb0 <_free_r>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	e7ef      	b.n	8005e1c <_reclaim_reent+0x80>
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	e7ef      	b.n	8005e20 <_reclaim_reent+0x84>
 8005e40:	bd70      	pop	{r4, r5, r6, pc}
 8005e42:	bf00      	nop
 8005e44:	2000005c 	.word	0x2000005c

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f000 f880 	bl	8005f60 <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08006098 	.word	0x08006098
 8005e84:	08006098 	.word	0x08006098
 8005e88:	08006098 	.word	0x08006098
 8005e8c:	0800609c 	.word	0x0800609c

08005e90 <__retarget_lock_acquire_recursive>:
 8005e90:	4770      	bx	lr

08005e92 <__retarget_lock_release_recursive>:
 8005e92:	4770      	bx	lr

08005e94 <memcpy>:
 8005e94:	440a      	add	r2, r1
 8005e96:	4291      	cmp	r1, r2
 8005e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e9c:	d100      	bne.n	8005ea0 <memcpy+0xc>
 8005e9e:	4770      	bx	lr
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	d1f9      	bne.n	8005ea2 <memcpy+0xe>
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <_free_r>:
 8005eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d044      	beq.n	8005f40 <_free_r+0x90>
 8005eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eba:	9001      	str	r0, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8005ec2:	bfb8      	it	lt
 8005ec4:	18e4      	addlt	r4, r4, r3
 8005ec6:	f000 f83f 	bl	8005f48 <__malloc_lock>
 8005eca:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <_free_r+0x94>)
 8005ecc:	9801      	ldr	r0, [sp, #4]
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	b933      	cbnz	r3, 8005ee0 <_free_r+0x30>
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	6014      	str	r4, [r2, #0]
 8005ed6:	b003      	add	sp, #12
 8005ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005edc:	f000 b83a 	b.w	8005f54 <__malloc_unlock>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d908      	bls.n	8005ef6 <_free_r+0x46>
 8005ee4:	6825      	ldr	r5, [r4, #0]
 8005ee6:	1961      	adds	r1, r4, r5
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf01      	itttt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	1949      	addeq	r1, r1, r5
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	e7ed      	b.n	8005ed2 <_free_r+0x22>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b10b      	cbz	r3, 8005f00 <_free_r+0x50>
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d9fa      	bls.n	8005ef6 <_free_r+0x46>
 8005f00:	6811      	ldr	r1, [r2, #0]
 8005f02:	1855      	adds	r5, r2, r1
 8005f04:	42a5      	cmp	r5, r4
 8005f06:	d10b      	bne.n	8005f20 <_free_r+0x70>
 8005f08:	6824      	ldr	r4, [r4, #0]
 8005f0a:	4421      	add	r1, r4
 8005f0c:	1854      	adds	r4, r2, r1
 8005f0e:	42a3      	cmp	r3, r4
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	d1e0      	bne.n	8005ed6 <_free_r+0x26>
 8005f14:	681c      	ldr	r4, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	6053      	str	r3, [r2, #4]
 8005f1a:	440c      	add	r4, r1
 8005f1c:	6014      	str	r4, [r2, #0]
 8005f1e:	e7da      	b.n	8005ed6 <_free_r+0x26>
 8005f20:	d902      	bls.n	8005f28 <_free_r+0x78>
 8005f22:	230c      	movs	r3, #12
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	e7d6      	b.n	8005ed6 <_free_r+0x26>
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1961      	adds	r1, r4, r5
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf04      	itt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	bf04      	itt	eq
 8005f38:	1949      	addeq	r1, r1, r5
 8005f3a:	6021      	streq	r1, [r4, #0]
 8005f3c:	6054      	str	r4, [r2, #4]
 8005f3e:	e7ca      	b.n	8005ed6 <_free_r+0x26>
 8005f40:	b003      	add	sp, #12
 8005f42:	bd30      	pop	{r4, r5, pc}
 8005f44:	20001fa8 	.word	0x20001fa8

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f7ff bfa1 	b.w	8005e90 <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20001fa4 	.word	0x20001fa4

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f7ff bf9c 	b.w	8005e92 <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	20001fa4 	.word	0x20001fa4

08005f60 <_init>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr

08005f6c <_fini>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr
