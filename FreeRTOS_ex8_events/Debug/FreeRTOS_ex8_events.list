
FreeRTOS_ex8_events.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054fc  080054fc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080054fc  080054fc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054fc  080054fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f44  20000060  08005564  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fa4  08005564  00021fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001641b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ae  00000000  00000000  000364ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  000397a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5e  00000000  00000000  0003aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000318c  00000000  00000000  0003bafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015264  00000000  00000000  0003ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7054  00000000  00000000  00053eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005644  00000000  00000000  0014af44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00150588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005400 	.word	0x08005400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005400 	.word	0x08005400

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa6f 	bl	8000706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83a 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f87e 	bl	800032c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fed6 	bl	8001fe0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <main+0x58>)
 8000236:	2100      	movs	r1, #0
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <main+0x5c>)
 800023a:	f001 ff1b 	bl	8002074 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x60>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0x64>)
 8000246:	2100      	movs	r1, #0
 8000248:	480f      	ldr	r0, [pc, #60]	; (8000288 <main+0x68>)
 800024a:	f001 ff13 	bl	8002074 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x6c>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0x70>)
 8000256:	2100      	movs	r1, #0
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x74>)
 800025a:	f001 ff0b 	bl	8002074 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0x78>)
 8000262:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  EventGroup1 = osEventFlagsNew(NULL);
 8000264:	2000      	movs	r0, #0
 8000266:	f001 ffb2 	bl	80021ce <osEventFlagsNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0b      	ldr	r2, [pc, #44]	; (800029c <main+0x7c>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000270:	f001 feda 	bl	8002028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x54>
 8000276:	bf00      	nop
 8000278:	08005448 	.word	0x08005448
 800027c:	08000439 	.word	0x08000439
 8000280:	2000007c 	.word	0x2000007c
 8000284:	0800546c 	.word	0x0800546c
 8000288:	0800045d 	.word	0x0800045d
 800028c:	20000080 	.word	0x20000080
 8000290:	08005490 	.word	0x08005490
 8000294:	08000485 	.word	0x08000485
 8000298:	20000084 	.word	0x20000084
 800029c:	20000088 	.word	0x20000088

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b096      	sub	sp, #88	; 0x58
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2244      	movs	r2, #68	; 0x44
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 ffbc 	bl	800522c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c6:	f000 fd21 	bl	8000d0c <HAL_PWREx_ControlVoltageScaling>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d0:	f000 f8fc 	bl	80004cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d4:	2310      	movs	r3, #16
 80002d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e0:	2360      	movs	r3, #96	; 0x60
 80002e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd63 	bl	8000db8 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002f8:	f000 f8e8 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000310:	463b      	mov	r3, r7
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 f92b 	bl	8001570 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000320:	f000 f8d4 	bl	80004cc <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3758      	adds	r7, #88	; 0x58
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a28      	ldr	r2, [pc, #160]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <MX_GPIO_Init+0xbc>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_GPIO_Init+0xbc>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000392:	f000 fc7d 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800039c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	4619      	mov	r1, r3
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <MX_GPIO_Init+0xc0>)
 80003ae:	f000 fac5 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003b2:	2320      	movs	r3, #32
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f000 fab6 	bl	800093c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2105      	movs	r1, #5
 80003d4:	2028      	movs	r0, #40	; 0x28
 80003d6:	f000 fa87 	bl	80008e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003da:	2028      	movs	r0, #40	; 0x28
 80003dc:	f000 faa0 	bl	8000920 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000800 	.word	0x48000800

080003f0 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fee7 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 8000402:	200a      	movs	r0, #10
 8000404:	f7ff fee4 	bl	80001d0 <ITM_SendChar>
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(EventGroup1, 0x50);
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_GPIO_EXTI_Callback+0x24>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2150      	movs	r1, #80	; 0x50
 8000420:	4618      	mov	r0, r3
 8000422:	f001 ff13 	bl	800224c <osEventFlagsSet>
	task_action('!');
 8000426:	2021      	movs	r0, #33	; 0x21
 8000428:	f7ff ffe2 	bl	80003f0 <task_action>
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000088 	.word	0x20000088

08000438 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	for(;;)
	{
	  osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <StartTask1+0x20>)
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	f04f 33ff 	mov.w	r3, #4294967295
 8000448:	2201      	movs	r2, #1
 800044a:	2151      	movs	r1, #81	; 0x51
 800044c:	f001 ff42 	bl	80022d4 <osEventFlagsWait>
	  task_action('1');
 8000450:	2031      	movs	r0, #49	; 0x31
 8000452:	f7ff ffcd 	bl	80003f0 <task_action>
	  osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000456:	e7f3      	b.n	8000440 <StartTask1+0x8>
 8000458:	20000088 	.word	0x20000088

0800045c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsSet(EventGroup1, 0x01);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <StartTask2+0x24>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f001 feee 	bl	800224c <osEventFlagsSet>
	  task_action('2');
 8000470:	2032      	movs	r0, #50	; 0x32
 8000472:	f7ff ffbd 	bl	80003f0 <task_action>
	  osDelay(3000);
 8000476:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800047a:	f001 fe8d 	bl	8002198 <osDelay>
	  osEventFlagsSet(EventGroup1, 0x01);
 800047e:	e7f1      	b.n	8000464 <StartTask2+0x8>
 8000480:	20000088 	.word	0x20000088

08000484 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {

	  osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <StartTask3+0x20>)
 800048e:	6818      	ldr	r0, [r3, #0]
 8000490:	f04f 33ff 	mov.w	r3, #4294967295
 8000494:	2201      	movs	r2, #1
 8000496:	2151      	movs	r1, #81	; 0x51
 8000498:	f001 ff1c 	bl	80022d4 <osEventFlagsWait>
	  task_action('3');
 800049c:	2033      	movs	r0, #51	; 0x33
 800049e:	f7ff ffa7 	bl	80003f0 <task_action>
	  osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 80004a2:	e7f3      	b.n	800048c <StartTask3+0x8>
 80004a4:	20000088 	.word	0x20000088

080004a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d101      	bne.n	80004be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ba:	f000 f93d 	bl	8000738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40001000 	.word	0x40001000

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>
	...

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_MspInit+0x70>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e2:	4a19      	ldr	r2, [pc, #100]	; (8000548 <HAL_MspInit+0x70>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_MspInit+0x70>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_MspInit+0x70>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <HAL_MspInit+0x70>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	6593      	str	r3, [r2, #88]	; 0x58
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_MspInit+0x70>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2105      	movs	r1, #5
 8000512:	f06f 000b 	mvn.w	r0, #11
 8000516:	f000 f9e7 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2105      	movs	r1, #5
 800051e:	f06f 0004 	mvn.w	r0, #4
 8000522:	f000 f9e1 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2105      	movs	r1, #5
 800052a:	f06f 0003 	mvn.w	r0, #3
 800052e:	f000 f9db 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	210f      	movs	r1, #15
 8000536:	f06f 0001 	mvn.w	r0, #1
 800053a:	f000 f9d5 	bl	80008e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08e      	sub	sp, #56	; 0x38
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800055a:	4b34      	ldr	r3, [pc, #208]	; (800062c <HAL_InitTick+0xe0>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a33      	ldr	r2, [pc, #204]	; (800062c <HAL_InitTick+0xe0>)
 8000560:	f043 0310 	orr.w	r3, r3, #16
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <HAL_InitTick+0xe0>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 0310 	and.w	r3, r3, #16
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000572:	f107 0210 	add.w	r2, r7, #16
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f001 f9a5 	bl	80018cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000582:	6a3b      	ldr	r3, [r7, #32]
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000588:	2b00      	cmp	r3, #0
 800058a:	d103      	bne.n	8000594 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800058c:	f001 f988 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8000590:	6378      	str	r0, [r7, #52]	; 0x34
 8000592:	e004      	b.n	800059e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000594:	f001 f984 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8000598:	4603      	mov	r3, r0
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800059e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <HAL_InitTick+0xe4>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	0c9b      	lsrs	r3, r3, #18
 80005a8:	3b01      	subs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <HAL_InitTick+0xe8>)
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <HAL_InitTick+0xec>)
 80005b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HAL_InitTick+0xe8>)
 80005b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <HAL_InitTick+0xe8>)
 80005bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_InitTick+0xe8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_InitTick+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_InitTick+0xe8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005d2:	4818      	ldr	r0, [pc, #96]	; (8000634 <HAL_InitTick+0xe8>)
 80005d4:	f001 fa0c 	bl	80019f0 <HAL_TIM_Base_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d11b      	bne.n	800061e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <HAL_InitTick+0xe8>)
 80005e8:	f001 fa64 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d111      	bne.n	800061e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005fa:	2036      	movs	r0, #54	; 0x36
 80005fc:	f000 f990 	bl	8000920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b0f      	cmp	r3, #15
 8000604:	d808      	bhi.n	8000618 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000606:	2200      	movs	r2, #0
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	2036      	movs	r0, #54	; 0x36
 800060c:	f000 f96c 	bl	80008e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <HAL_InitTick+0xf0>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e002      	b.n	800061e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800061e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000622:	4618      	mov	r0, r3
 8000624:	3738      	adds	r7, #56	; 0x38
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	431bde83 	.word	0x431bde83
 8000634:	2000008c 	.word	0x2000008c
 8000638:	40001000 	.word	0x40001000
 800063c:	20000004 	.word	0x20000004

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000674:	f000 fb24 	bl	8000cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TIM6_DAC_IRQHandler+0x10>)
 8000682:	f001 fa87 	bl	8001b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000008c 	.word	0x2000008c

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SystemInit+0x20>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <SystemInit+0x20>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b8:	f7ff ffea 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	; (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e2:	f004 fe01 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e6:	f7ff fd9b 	bl	8000220 <main>

080006ea <LoopForever>:

LoopForever:
    b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006f8:	08005504 	.word	0x08005504
  ldr r2, =_sbss
 80006fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000700:	20001fa4 	.word	0x20001fa4

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>

08000706 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f8de 	bl	80008d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff ff18 	bl	800054c <HAL_InitTick>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	e001      	b.n	800072c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000728:	f7ff fed6 	bl	80004d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800072c:	79fb      	ldrb	r3, [r7, #7]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	200000d8 	.word	0x200000d8

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200000d8 	.word	0x200000d8

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff4c 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008fa:	f7ff ff61 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 80008fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f7ff ffb1 	bl	800086c <NVIC_EncodePriority>
 800090a:	4602      	mov	r2, r0
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff80 	bl	8000818 <__NVIC_SetPriority>
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff54 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e17f      	b.n	8000c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8171 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	2b01      	cmp	r3, #1
 800096e:	d005      	beq.n	800097c <HAL_GPIO_Init+0x40>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b02      	cmp	r3, #2
 800097a:	d130      	bne.n	80009de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b2:	2201      	movs	r2, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	f003 0201 	and.w	r2, r3, #1
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d118      	bne.n	8000a1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009f0:	2201      	movs	r2, #1
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	f003 0201 	and.w	r2, r3, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d017      	beq.n	8000a58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d123      	bne.n	8000aac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	08da      	lsrs	r2, r3, #3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3208      	adds	r2, #8
 8000a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	691a      	ldr	r2, [r3, #16]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	6939      	ldr	r1, [r7, #16]
 8000aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0203 	and.w	r2, r3, #3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 80ac 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a5e      	ldr	r2, [pc, #376]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b5c      	ldr	r3, [pc, #368]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b06:	4a5a      	ldr	r2, [pc, #360]	; (8000c70 <HAL_GPIO_Init+0x334>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b30:	d025      	beq.n	8000b7e <HAL_GPIO_Init+0x242>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_GPIO_Init+0x338>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d01f      	beq.n	8000b7a <HAL_GPIO_Init+0x23e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4e      	ldr	r2, [pc, #312]	; (8000c78 <HAL_GPIO_Init+0x33c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d019      	beq.n	8000b76 <HAL_GPIO_Init+0x23a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4d      	ldr	r2, [pc, #308]	; (8000c7c <HAL_GPIO_Init+0x340>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0x236>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <HAL_GPIO_Init+0x344>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d00d      	beq.n	8000b6e <HAL_GPIO_Init+0x232>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_GPIO_Init+0x348>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_GPIO_Init+0x22e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_GPIO_Init+0x22a>
 8000b62:	2306      	movs	r3, #6
 8000b64:	e00c      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b66:	2307      	movs	r3, #7
 8000b68:	e00a      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f002 0203 	and.w	r2, r2, #3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4937      	ldr	r1, [pc, #220]	; (8000c70 <HAL_GPIO_Init+0x334>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_GPIO_Init+0x350>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f ae78 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000c00 	.word	0x48000c00
 8000c80:	48001000 	.word	0x48001000
 8000c84:	48001400 	.word	0x48001400
 8000c88:	48001800 	.word	0x48001800
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb96 	bl	8000410 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40007000 	.word	0x40007000

08000d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d1a:	d130      	bne.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d28:	d038      	beq.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2232      	movs	r2, #50	; 0x32
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d50:	e002      	b.n	8000d58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d64:	d102      	bne.n	8000d6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f2      	bne.n	8000d52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d78:	d110      	bne.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e00f      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8a:	d007      	beq.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40007000 	.word	0x40007000
 8000db0:	20000000 	.word	0x20000000
 8000db4:	431bde83 	.word	0x431bde83

08000db8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e3ca      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dca:	4b97      	ldr	r3, [pc, #604]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dd4:	4b94      	ldr	r3, [pc, #592]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 80e4 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <HAL_RCC_OscConfig+0x4a>
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b0c      	cmp	r3, #12
 8000df6:	f040 808b 	bne.w	8000f10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	f040 8087 	bne.w	8000f10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <HAL_RCC_OscConfig+0x62>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e3a2      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	4b82      	ldr	r3, [pc, #520]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d004      	beq.n	8000e34 <HAL_RCC_OscConfig+0x7c>
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e32:	e005      	b.n	8000e40 <HAL_RCC_OscConfig+0x88>
 8000e34:	4b7c      	ldr	r3, [pc, #496]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d223      	bcs.n	8000e8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fd71 	bl	8001930 <RCC_SetFlashLatencyFromMSIRange>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e383      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e58:	4b73      	ldr	r3, [pc, #460]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a72      	ldr	r2, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b70      	ldr	r3, [pc, #448]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	496d      	ldr	r1, [pc, #436]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e76:	4b6c      	ldr	r3, [pc, #432]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	4968      	ldr	r1, [pc, #416]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
 8000e8a:	e025      	b.n	8000ed8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e8c:	4b66      	ldr	r3, [pc, #408]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a65      	ldr	r2, [pc, #404]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b63      	ldr	r3, [pc, #396]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4960      	ldr	r1, [pc, #384]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	495b      	ldr	r1, [pc, #364]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d109      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fd31 	bl	8001930 <RCC_SetFlashLatencyFromMSIRange>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e343      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ed8:	f000 fc4a 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b52      	ldr	r3, [pc, #328]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	4950      	ldr	r1, [pc, #320]	; (800102c <HAL_RCC_OscConfig+0x274>)
 8000eea:	5ccb      	ldrb	r3, [r1, r3]
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_RCC_OscConfig+0x278>)
 8000ef6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ef8:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb25 	bl	800054c <HAL_InitTick>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d052      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	e327      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d032      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a42      	ldr	r2, [pc, #264]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc1c 	bl	8000760 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc18 	bl	8000760 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e310      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a36      	ldr	r2, [pc, #216]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4931      	ldr	r1, [pc, #196]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	492c      	ldr	r1, [pc, #176]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	e01a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a29      	ldr	r2, [pc, #164]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fbe9 	bl	8000760 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f92:	f7ff fbe5 	bl	8000760 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e2dd      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f0      	bne.n	8000f92 <HAL_RCC_OscConfig+0x1da>
 8000fb0:	e000      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d074      	beq.n	80010aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x21a>
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b0c      	cmp	r3, #12
 8000fca:	d10e      	bne.n	8000fea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d10b      	bne.n	8000fea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d064      	beq.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d160      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e2ba      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x24a>
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e026      	b.n	8001050 <HAL_RCC_OscConfig+0x298>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100a:	d115      	bne.n	8001038 <HAL_RCC_OscConfig+0x280>
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a02      	ldr	r2, [pc, #8]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e014      	b.n	8001050 <HAL_RCC_OscConfig+0x298>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	080054b4 	.word	0x080054b4
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004
 8001038:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a9f      	ldr	r2, [pc, #636]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a9c      	ldr	r2, [pc, #624]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001058:	f7ff fb82 	bl	8000760 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fb7e 	bl	8000760 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e276      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001072:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x2a8>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fb6e 	bl	8000760 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fb6a 	bl	8000760 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e262      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x2d0>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d060      	beq.n	8001178 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_OscConfig+0x310>
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d119      	bne.n	80010f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d116      	bne.n	80010f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c8:	4b7c      	ldr	r3, [pc, #496]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x328>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e23f      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	4973      	ldr	r1, [pc, #460]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010f4:	e040      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d023      	beq.n	8001146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6e      	ldr	r2, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fb29 	bl	8000760 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fb25 	bl	8000760 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e21d      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001124:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	061b      	lsls	r3, r3, #24
 800113e:	495f      	ldr	r1, [pc, #380]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
 8001144:	e018      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800114c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fb05 	bl	8000760 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fb01 	bl	8000760 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1f9      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d03c      	beq.n	80011fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fae0 	bl	8000760 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fadc 	bl	8000760 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1d4      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80011b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ef      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3ec>
 80011c4:	e01b      	b.n	80011fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80011c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011cc:	4a3b      	ldr	r2, [pc, #236]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d6:	f7ff fac3 	bl	8000760 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011de:	f7ff fabf 	bl	8000760 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1b7      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ef      	bne.n	80011de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80a6 	beq.w	8001358 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10d      	bne.n	8001238 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a26      	ldr	r2, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6593      	str	r3, [r2, #88]	; 0x58
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001234:	2301      	movs	r3, #1
 8001236:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_RCC_OscConfig+0x508>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d118      	bne.n	8001276 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_RCC_OscConfig+0x508>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_RCC_OscConfig+0x508>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001250:	f7ff fa86 	bl	8000760 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001258:	f7ff fa82 	bl	8000760 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e17a      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_RCC_OscConfig+0x508>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_RCC_OscConfig+0x4d8>
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800128e:	e029      	b.n	80012e4 <HAL_RCC_OscConfig+0x52c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d115      	bne.n	80012c4 <HAL_RCC_OscConfig+0x50c>
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <HAL_RCC_OscConfig+0x504>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b8:	e014      	b.n	80012e4 <HAL_RCC_OscConfig+0x52c>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40007000 	.word	0x40007000
 80012c4:	4b9c      	ldr	r3, [pc, #624]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80012c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ca:	4a9b      	ldr	r2, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d4:	4b98      	ldr	r3, [pc, #608]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	4a97      	ldr	r2, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d016      	beq.n	800131a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fa38 	bl	8000760 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fa34 	bl	8000760 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e12a      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800130c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ed      	beq.n	80012f4 <HAL_RCC_OscConfig+0x53c>
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131a:	f7ff fa21 	bl	8000760 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fa1d 	bl	8000760 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e113      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001338:	4b7f      	ldr	r3, [pc, #508]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ed      	bne.n	8001322 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001346:	7ffb      	ldrb	r3, [r7, #31]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134c:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4a79      	ldr	r2, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80fe 	beq.w	800155e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	2b02      	cmp	r3, #2
 8001368:	f040 80d0 	bne.w	800150c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800136c:	4b72      	ldr	r3, [pc, #456]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	429a      	cmp	r2, r3
 800137e:	d130      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	3b01      	subs	r3, #1
 800138c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d127      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d11f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013ac:	2a07      	cmp	r2, #7
 80013ae:	bf14      	ite	ne
 80013b0:	2201      	movne	r2, #1
 80013b2:	2200      	moveq	r2, #0
 80013b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d113      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	3b01      	subs	r3, #1
 80013dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d06e      	beq.n	80014c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d069      	beq.n	80014bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0ad      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001404:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800140a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001410:	f7ff f9a6 	bl	8000760 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f9a2 	bl	8000760 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e09a      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b40      	ldr	r3, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x784>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001446:	3a01      	subs	r2, #1
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	4311      	orrs	r1, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001450:	0212      	lsls	r2, r2, #8
 8001452:	4311      	orrs	r1, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001458:	0852      	lsrs	r2, r2, #1
 800145a:	3a01      	subs	r2, #1
 800145c:	0552      	lsls	r2, r2, #21
 800145e:	4311      	orrs	r1, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001464:	0852      	lsrs	r2, r2, #1
 8001466:	3a01      	subs	r2, #1
 8001468:	0652      	lsls	r2, r2, #25
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001470:	0912      	lsrs	r2, r2, #4
 8001472:	0452      	lsls	r2, r2, #17
 8001474:	430a      	orrs	r2, r1
 8001476:	4930      	ldr	r1, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001478:	4313      	orrs	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001494:	f7ff f964 	bl	8000760 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f960 	bl	8000760 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e058      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014ba:	e050      	b.n	800155e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e04f      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d148      	bne.n	800155e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014e4:	f7ff f93c 	bl	8000760 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff f938 	bl	8000760 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e030      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x734>
 800150a:	e028      	b.n	800155e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d023      	beq.n	800155a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x780>)
 8001518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff f91f 	bl	8000760 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001524:	e00c      	b.n	8001540 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff f91b 	bl	8000760 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d905      	bls.n	8001540 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e013      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
 8001538:	40021000 	.word	0x40021000
 800153c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x7b0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ec      	bne.n	8001526 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_OscConfig+0x7b0>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	4905      	ldr	r1, [pc, #20]	; (8001568 <HAL_RCC_OscConfig+0x7b0>)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_OscConfig+0x7b4>)
 8001554:	4013      	ands	r3, r2
 8001556:	60cb      	str	r3, [r1, #12]
 8001558:	e001      	b.n	800155e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	feeefffc 	.word	0xfeeefffc

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0e7      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b75      	ldr	r3, [pc, #468]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4970      	ldr	r1, [pc, #448]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b6e      	ldr	r3, [pc, #440]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cf      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d010      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b66      	ldr	r3, [pc, #408]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d908      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4960      	ldr	r1, [pc, #384]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d04c      	beq.n	8001688 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f6:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d121      	bne.n	8001646 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0a6      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d115      	bne.n	8001646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e09a      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e08e      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e086      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4943      	ldr	r1, [pc, #268]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001658:	f7ff f882 	bl	8000760 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff f87e 	bl	8000760 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e06e      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d010      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d208      	bcs.n	80016b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	492b      	ldr	r1, [pc, #172]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d210      	bcs.n	80016e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 0207 	bic.w	r2, r3, #7
 80016cc:	4923      	ldr	r1, [pc, #140]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_ClockConfig+0x1ec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e036      	b.n	8001754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4918      	ldr	r1, [pc, #96]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d009      	beq.n	8001724 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4910      	ldr	r1, [pc, #64]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001724:	f000 f824 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	490b      	ldr	r1, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x1f4>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1f8>)
 8001742:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1fc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feff 	bl	800054c <HAL_InitTick>
 800174e:	4603      	mov	r3, r0
 8001750:	72fb      	strb	r3, [r7, #11]

  return status;
 8001752:	7afb      	ldrb	r3, [r7, #11]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	080054b4 	.word	0x080054b4
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d11e      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e005      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_RCC_GetSysClockFreq+0x10c>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e004      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_RCC_GetSysClockFreq+0x114>)
 80017f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d134      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0xa6>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d003      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0xac>
 8001814:	e005      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_RCC_GetSysClockFreq+0x110>)
 8001818:	617b      	str	r3, [r7, #20]
      break;
 800181a:	e005      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_GetSysClockFreq+0x114>)
 800181e:	617b      	str	r3, [r7, #20]
      break;
 8001820:	e002      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	617b      	str	r3, [r7, #20]
      break;
 8001826:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	3301      	adds	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	fb03 f202 	mul.w	r2, r3, r2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	0e5b      	lsrs	r3, r3, #25
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	3301      	adds	r3, #1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001868:	69bb      	ldr	r3, [r7, #24]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	080054cc 	.word	0x080054cc
 8001880:	00f42400 	.word	0x00f42400
 8001884:	007a1200 	.word	0x007a1200

08001888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_GetHCLKFreq+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018a4:	f7ff fff0 	bl	8001888 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4904      	ldr	r1, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	080054c4 	.word	0x080054c4

080018cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	220f      	movs	r2, #15
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_RCC_GetClockConfig+0x60>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0207 	and.w	r2, r3, #7
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40022000 	.word	0x40022000

08001930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001948:	f7ff f9d2 	bl	8000cf0 <HAL_PWREx_GetVoltageRange>
 800194c:	6178      	str	r0, [r7, #20]
 800194e:	e014      	b.n	800197a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195a:	6593      	str	r3, [r2, #88]	; 0x58
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001968:	f7ff f9c2 	bl	8000cf0 <HAL_PWREx_GetVoltageRange>
 800196c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d10b      	bne.n	800199a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b80      	cmp	r3, #128	; 0x80
 8001986:	d919      	bls.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2ba0      	cmp	r3, #160	; 0xa0
 800198c:	d902      	bls.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800198e:	2302      	movs	r3, #2
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e013      	b.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e010      	b.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b80      	cmp	r3, #128	; 0x80
 800199e:	d902      	bls.n	80019a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019a0:	2303      	movs	r3, #3
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	e00a      	b.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b80      	cmp	r3, #128	; 0x80
 80019aa:	d102      	bne.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	e004      	b.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b70      	cmp	r3, #112	; 0x70
 80019b6:	d101      	bne.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b8:	2301      	movs	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e049      	b.n	8001a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f841 	bl	8001a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f000 f9da 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e04f      	b.n	8001b6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d018      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_TIM_Base_Start_IT+0x76>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d115      	bne.n	8001b56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d015      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0xb4>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d011      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b54:	e008      	b.n	8001b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e000      	b.n	8001b6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40000c00 	.word	0x40000c00
 8001b88:	40013400 	.word	0x40013400
 8001b8c:	40014000 	.word	0x40014000
 8001b90:	00010007 	.word	0x00010007

08001b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d020      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0202 	mvn.w	r2, #2
 8001bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8e4 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001be4:	e005      	b.n	8001bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8d6 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8e7 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0204 	mvn.w	r2, #4
 8001c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8be 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c30:	e005      	b.n	8001c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8b0 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8c1 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d020      	beq.n	8001c90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0208 	mvn.w	r2, #8
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2204      	movs	r2, #4
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f898 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f88a 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f89b 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d020      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0210 	mvn.w	r2, #16
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f872 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f864 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f875 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0201 	mvn.w	r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fbd4 	bl	80004a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f906 	bl	8001f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8fe 	bl	8001f44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f834 	bl	8001dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0220 	mvn.w	r2, #32
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8c6 	bl	8001f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d00f      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00b      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <TIM_Base_SetConfig+0x128>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <TIM_Base_SetConfig+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00f      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <TIM_Base_SetConfig+0x128>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <TIM_Base_SetConfig+0x130>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40013400 	.word	0x40013400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40014400 	.word	0x40014400
 8001f18:	40014800 	.word	0x40014800

08001f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <__NVIC_SetPriority>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Handler+0x1c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fb4:	f002 f89c 	bl	80040f0 <xTaskGetSchedulerState>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fbe:	f002 febb 	bl	8004d38 <xPortSysTickHandler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f06f 0004 	mvn.w	r0, #4
 8001fd6:	f7ff ffbf 	bl	8001f58 <__NVIC_SetPriority>
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe6:	f3ef 8305 	mrs	r3, IPSR
 8001fea:	603b      	str	r3, [r7, #0]
  return(result);
 8001fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ff2:	f06f 0305 	mvn.w	r3, #5
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	e00c      	b.n	8002014 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <osKernelInitialize+0x44>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <osKernelInitialize+0x44>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	e002      	b.n	8002014 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200000dc 	.word	0x200000dc

08002028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800202e:	f3ef 8305 	mrs	r3, IPSR
 8002032:	603b      	str	r3, [r7, #0]
  return(result);
 8002034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800203a:	f06f 0305 	mvn.w	r3, #5
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e010      	b.n	8002064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <osKernelStart+0x48>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d109      	bne.n	800205e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800204a:	f7ff ffbf 	bl	8001fcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <osKernelStart+0x48>)
 8002050:	2202      	movs	r2, #2
 8002052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002054:	f001 fb52 	bl	80036fc <vTaskStartScheduler>
      stat = osOK;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e002      	b.n	8002064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200000dc 	.word	0x200000dc

08002074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af04      	add	r7, sp, #16
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002084:	f3ef 8305 	mrs	r3, IPSR
 8002088:	617b      	str	r3, [r7, #20]
  return(result);
 800208a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800208c:	2b00      	cmp	r3, #0
 800208e:	d17e      	bne.n	800218e <osThreadNew+0x11a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d07b      	beq.n	800218e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800209a:	2318      	movs	r3, #24
 800209c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d045      	beq.n	800213a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <osThreadNew+0x48>
        name = attr->name;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <osThreadNew+0x6e>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b38      	cmp	r3, #56	; 0x38
 80020d4:	d805      	bhi.n	80020e2 <osThreadNew+0x6e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <osThreadNew+0x72>
        return (NULL);
 80020e2:	2300      	movs	r3, #0
 80020e4:	e054      	b.n	8002190 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <osThreadNew+0xa8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2ba7      	cmp	r3, #167	; 0xa7
 8002104:	d90a      	bls.n	800211c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <osThreadNew+0xa8>
        mem = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e010      	b.n	800213e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <osThreadNew+0xca>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <osThreadNew+0xca>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <osThreadNew+0xca>
          mem = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e001      	b.n	800213e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d110      	bne.n	8002166 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800214c:	9202      	str	r2, [sp, #8]
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6a3a      	ldr	r2, [r7, #32]
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 f8e2 	bl	8003324 <xTaskCreateStatic>
 8002160:	4603      	mov	r3, r0
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e013      	b.n	800218e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d110      	bne.n	800218e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	b29a      	uxth	r2, r3
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f001 f92d 	bl	80033de <xTaskCreate>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <osThreadNew+0x11a>
            hTask = NULL;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800218e:	693b      	ldr	r3, [r7, #16]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a0:	f3ef 8305 	mrs	r3, IPSR
 80021a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80021a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <osDelay+0x1c>
    stat = osErrorISR;
 80021ac:	f06f 0305 	mvn.w	r3, #5
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e007      	b.n	80021c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f001 fa68 	bl	8003694 <vTaskDelay>
    }
  }

  return (stat);
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021da:	f3ef 8305 	mrs	r3, IPSR
 80021de:	60fb      	str	r3, [r7, #12]
  return(result);
 80021e0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d12d      	bne.n	8002242 <osEventFlagsNew+0x74>
    mem = -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <osEventFlagsNew+0x3a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b1f      	cmp	r3, #31
 8002200:	d902      	bls.n	8002208 <osEventFlagsNew+0x3a>
        mem = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e00c      	b.n	8002222 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d108      	bne.n	8002222 <osEventFlagsNew+0x54>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <osEventFlagsNew+0x54>
          mem = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e001      	b.n	8002222 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f8eb 	bl	8002408 <xEventGroupCreateStatic>
 8002232:	6178      	str	r0, [r7, #20]
 8002234:	e005      	b.n	8002242 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800223c:	f000 f91b 	bl	8002476 <xEventGroupCreate>
 8002240:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002242:	697b      	ldr	r3, [r7, #20]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <osEventFlagsSet+0x1e>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800226a:	f06f 0303 	mvn.w	r3, #3
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e028      	b.n	80022c4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002272:	f3ef 8305 	mrs	r3, IPSR
 8002276:	60fb      	str	r3, [r7, #12]
  return(result);
 8002278:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01d      	beq.n	80022ba <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	461a      	mov	r2, r3
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6938      	ldr	r0, [r7, #16]
 800228c:	f000 fa96 	bl	80027bc <xEventGroupSetBitsFromISR>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8002296:	f06f 0302 	mvn.w	r3, #2
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e012      	b.n	80022c4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <osEventFlagsSet+0x78>
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <osEventFlagsSet+0x84>)
 80022aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	e004      	b.n	80022c4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	6938      	ldr	r0, [r7, #16]
 80022be:	f000 f9c3 	bl	8002648 <xEventGroupSetBits>
 80022c2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80022c4:	697b      	ldr	r3, [r7, #20]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000ed04 	.word	0xe000ed04

080022d4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <osEventFlagsWait+0x22>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80022f6:	f06f 0303 	mvn.w	r3, #3
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e04b      	b.n	8002396 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022fe:	f3ef 8305 	mrs	r3, IPSR
 8002302:	617b      	str	r3, [r7, #20]
  return(result);
 8002304:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800230a:	f06f 0305 	mvn.w	r3, #5
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e041      	b.n	8002396 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	e001      	b.n	8002326 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	e001      	b.n	800233a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002336:	2301      	movs	r3, #1
 8002338:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	69b8      	ldr	r0, [r7, #24]
 8002346:	f000 f8b1 	bl	80024ac <xEventGroupWaitBits>
 800234a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d019      	beq.n	8002396 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002368:	f06f 0301 	mvn.w	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e012      	b.n	8002396 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002370:	f06f 0302 	mvn.w	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e00e      	b.n	8002396 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002388:	f06f 0301 	mvn.w	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e002      	b.n	8002396 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002390:	f06f 0302 	mvn.w	r3, #2
 8002394:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002396:	69fb      	ldr	r3, [r7, #28]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <vApplicationGetIdleTaskMemory+0x2c>)
 80023b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <vApplicationGetIdleTaskMemory+0x30>)
 80023b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200000e0 	.word	0x200000e0
 80023d0:	20000188 	.word	0x20000188

080023d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <vApplicationGetTimerTaskMemory+0x2c>)
 80023e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <vApplicationGetTimerTaskMemory+0x30>)
 80023ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20000388 	.word	0x20000388
 8002404:	20000430 	.word	0x20000430

08002408 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002428:	bf00      	nop
 800242a:	e7fe      	b.n	800242a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800242c:	2320      	movs	r3, #32
 800242e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b20      	cmp	r3, #32
 8002434:	d00a      	beq.n	800244c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60fb      	str	r3, [r7, #12]
}
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3304      	adds	r3, #4
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f9bf 	bl	80027e4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2201      	movs	r2, #1
 800246a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800246c:	697b      	ldr	r3, [r7, #20]
	}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800247c:	2020      	movs	r0, #32
 800247e:	f002 fceb 	bl	8004e58 <pvPortMalloc>
 8002482:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f9a5 	bl	80027e4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80024a0:	687b      	ldr	r3, [r7, #4]
	}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b090      	sub	sp, #64	; 0x40
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	623b      	str	r3, [r7, #32]
}
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <xEventGroupWaitBits+0x56>
	__asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	61fb      	str	r3, [r7, #28]
}
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xEventGroupWaitBits+0x72>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61bb      	str	r3, [r7, #24]
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800251e:	f001 fde7 	bl	80040f0 <xTaskGetSchedulerState>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <xEventGroupWaitBits+0x82>
 8002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <xEventGroupWaitBits+0x86>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <xEventGroupWaitBits+0x88>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	617b      	str	r3, [r7, #20]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800254e:	f001 f945 	bl	80037dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800255e:	f000 f90b 	bl	8002778 <prvTestWaitCondition>
 8002562:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800256e:	2300      	movs	r3, #0
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	43db      	mvns	r3, r3
 8002580:	401a      	ands	r2, r3
 8002582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e020      	b.n	80025ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002592:	2301      	movs	r3, #1
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	e018      	b.n	80025ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	1d18      	adds	r0, r3, #4
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	4313      	orrs	r3, r2
 80025be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c0:	4619      	mov	r1, r3
 80025c2:	f001 fb09 	bl	8003bd8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80025ca:	f001 f915 	bl	80037f8 <xTaskResumeAll>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80025d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d031      	beq.n	800263a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <xEventGroupWaitBits+0x198>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80025ec:	f001 fe0c 	bl	8004208 <uxTaskResetEventItemValue>
 80025f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80025f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11a      	bne.n	8002632 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80025fc:	f002 fb0a 	bl	8004c14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800260c:	f000 f8b4 	bl	8002778 <prvTestWaitCondition>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800262a:	2301      	movs	r3, #1
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800262e:	f002 fb21 	bl	8004c74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800263c:	4618      	mov	r0, r3
 800263e:	3740      	adds	r7, #64	; 0x40
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	; 0x38
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xEventGroupSetBits+0x32>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	613b      	str	r3, [r7, #16]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <xEventGroupSetBits+0x52>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	60fb      	str	r3, [r7, #12]
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	3304      	adds	r3, #4
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3308      	adds	r3, #8
 80026a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80026a6:	f001 f899 	bl	80037dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80026bc:	e03c      	b.n	8002738 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d108      	bne.n	80026fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	e008      	b.n	800270c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d101      	bne.n	800270c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800271c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800272c:	4619      	mov	r1, r3
 800272e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002730:	f001 fb1e 	bl	8003d70 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	429a      	cmp	r2, r3
 800273e:	d1be      	bne.n	80026be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	43db      	mvns	r3, r3
 8002748:	401a      	ands	r2, r3
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800274e:	f001 f853 	bl	80037f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	681b      	ldr	r3, [r3, #0]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3738      	adds	r7, #56	; 0x38
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff6c 	bl	8002648 <xEventGroupSetBits>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e007      	b.n	80027ae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4013      	ands	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d101      	bne.n	80027ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80027ae:	697b      	ldr	r3, [r7, #20]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <xEventGroupSetBitsFromISR+0x24>)
 80027d0:	f002 f8d4 	bl	800497c <xTimerPendFunctionCallFromISR>
 80027d4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80027d6:	697b      	ldr	r3, [r7, #20]
	}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	0800275f 	.word	0x0800275f

080027e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 0208 	add.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0208 	add.w	r2, r3, #8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f103 0208 	add.w	r2, r3, #8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d103      	bne.n	80028a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e00c      	b.n	80028c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3308      	adds	r3, #8
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e002      	b.n	80028b4 <vListInsert+0x2e>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d2f6      	bcs.n	80028ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d103      	bne.n	800292c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericReset+0x2a>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60bb      	str	r3, [r7, #8]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002976:	f002 f94d 	bl	8004c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	441a      	add	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	3b01      	subs	r3, #1
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d114      	bne.n	80029f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01a      	beq.n	8002a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3310      	adds	r3, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 f965 	bl	8003ca8 <xTaskRemoveFromEventList>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <xQueueGenericReset+0xcc>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	e009      	b.n	8002a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3310      	adds	r3, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fef2 	bl	80027e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff feed 	bl	80027e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a0a:	f002 f933 	bl	8004c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <xQueueGenericCreateStatic+0x52>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <xQueueGenericCreateStatic+0x56>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <xQueueGenericCreateStatic+0x58>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	623b      	str	r3, [r7, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueGenericCreateStatic+0x7e>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueGenericCreateStatic+0x82>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <xQueueGenericCreateStatic+0x84>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61fb      	str	r3, [r7, #28]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aba:	2350      	movs	r3, #80	; 0x50
 8002abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b50      	cmp	r3, #80	; 0x50
 8002ac2:	d00a      	beq.n	8002ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	61bb      	str	r3, [r7, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f805 	bl	8002b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3730      	adds	r7, #48	; 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	69b8      	ldr	r0, [r7, #24]
 8002b3e:	f7ff ff05 	bl	800294c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericSend+0x32>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueGenericSend+0x40>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <xQueueGenericSend+0x44>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <xQueueGenericSend+0x46>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xQueueGenericSend+0x60>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d103      	bne.n	8002bc2 <xQueueGenericSend+0x6e>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSend+0x72>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericSend+0x74>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	623b      	str	r3, [r7, #32]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002be2:	f001 fa85 	bl	80040f0 <xTaskGetSchedulerState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xQueueGenericSend+0x9e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <xQueueGenericSend+0xa2>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueGenericSend+0xa4>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	61fb      	str	r3, [r7, #28]
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c12:	f001 ffff 	bl	8004c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <xQueueGenericSend+0xd4>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d129      	bne.n	8002c7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2e:	f000 fa0b 	bl	8003048 <prvCopyDataToQueue>
 8002c32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	3324      	adds	r3, #36	; 0x24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f831 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	e00a      	b.n	8002c74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c74:	f001 fffe 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e063      	b.n	8002d44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c82:	f001 fff7 	bl	8004c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e05c      	b.n	8002d44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f8cd 	bl	8003e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c9e:	f001 ffe9 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ca2:	f000 fd9b 	bl	80037dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ca6:	f001 ffb5 	bl	8004c14 <vPortEnterCritical>
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d103      	bne.n	8002cc0 <xQueueGenericSend+0x16c>
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d103      	bne.n	8002cd6 <xQueueGenericSend+0x182>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd6:	f001 ffcd 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cda:	1d3a      	adds	r2, r7, #4
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 f8bc 	bl	8003e60 <xTaskCheckForTimeOut>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d124      	bne.n	8002d38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf0:	f000 faa2 	bl	8003238 <prvIsQueueFull>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 ff44 	bl	8003b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0a:	f000 fa2d 	bl	8003168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d0e:	f000 fd73 	bl	80037f8 <xTaskResumeAll>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af7c 	bne.w	8002c12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	e772      	b.n	8002c12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2e:	f000 fa1b 	bl	8003168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d32:	f000 fd61 	bl	80037f8 <xTaskResumeAll>
 8002d36:	e76c      	b.n	8002c12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3a:	f000 fa15 	bl	8003168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d3e:	f000 fd5b 	bl	80037f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3738      	adds	r7, #56	; 0x38
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <xQueueGenericSendFromISR+0x3c>
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericSendFromISR+0x40>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericSendFromISR+0x42>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d103      	bne.n	8002dba <xQueueGenericSendFromISR+0x6a>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSendFromISR+0x6e>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueGenericSendFromISR+0x70>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	623b      	str	r3, [r7, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dda:	f001 fffd 	bl	8004dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dde:	f3ef 8211 	mrs	r2, BASEPRI
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002df6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <xQueueGenericSendFromISR+0xbc>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d12f      	bne.n	8002e6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e22:	f000 f911 	bl	8003048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d112      	bne.n	8002e56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ff33 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e007      	b.n	8002e66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	b25a      	sxtb	r2, r3
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e66:	2301      	movs	r3, #1
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e6a:	e001      	b.n	8002e70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3740      	adds	r7, #64	; 0x40
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <xQueueReceive+0x30>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	623b      	str	r3, [r7, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueReceive+0x3e>
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueReceive+0x42>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueReceive+0x44>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueReceive+0x5e>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee6:	f001 f903 	bl	80040f0 <xTaskGetSchedulerState>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <xQueueReceive+0x6e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueReceive+0x72>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueReceive+0x74>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueReceive+0x8e>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61bb      	str	r3, [r7, #24]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f16:	f001 fe7d 	bl	8004c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01f      	beq.n	8002f66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f8f7 	bl	800311c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00f      	beq.n	8002f5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	3310      	adds	r3, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 feb0 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <xQueueReceive+0x1bc>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f5e:	f001 fe89 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e069      	b.n	800303a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f6c:	f001 fe82 	bl	8004c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e062      	b.n	800303a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 ff58 	bl	8003e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f88:	f001 fe74 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f8c:	f000 fc26 	bl	80037dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f90:	f001 fe40 	bl	8004c14 <vPortEnterCritical>
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <xQueueReceive+0x122>
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d103      	bne.n	8002fc0 <xQueueReceive+0x138>
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fe58 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fc4:	1d3a      	adds	r2, r7, #4
 8002fc6:	f107 0310 	add.w	r3, r7, #16
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 ff47 	bl	8003e60 <xTaskCheckForTimeOut>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d123      	bne.n	8003020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fda:	f000 f917 	bl	800320c <prvIsQueueEmpty>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	3324      	adds	r3, #36	; 0x24
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fdcf 	bl	8003b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff4:	f000 f8b8 	bl	8003168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ff8:	f000 fbfe 	bl	80037f8 <xTaskResumeAll>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d189      	bne.n	8002f16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <xQueueReceive+0x1bc>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	e780      	b.n	8002f16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003016:	f000 f8a7 	bl	8003168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800301a:	f000 fbed 	bl	80037f8 <xTaskResumeAll>
 800301e:	e77a      	b.n	8002f16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003022:	f000 f8a1 	bl	8003168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003026:	f000 fbe7 	bl	80037f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800302a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800302c:	f000 f8ee 	bl	800320c <prvIsQueueEmpty>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f43f af6f 	beq.w	8002f16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800303a:	4618      	mov	r0, r3
 800303c:	3730      	adds	r7, #48	; 0x30
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14d      	bne.n	800310a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f85a 	bl	800412c <xTaskPriorityDisinherit>
 8003078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e043      	b.n	800310a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d119      	bne.n	80030bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6858      	ldr	r0, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	f002 f94e 	bl	8005334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	441a      	add	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d32b      	bcc.n	800310a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	e026      	b.n	800310a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68d8      	ldr	r0, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	461a      	mov	r2, r3
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	f002 f934 	bl	8005334 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	425b      	negs	r3, r3
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	425b      	negs	r3, r3
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d105      	bne.n	800310a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3b01      	subs	r3, #1
 8003108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003112:	697b      	ldr	r3, [r7, #20]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d303      	bcc.n	8003150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	461a      	mov	r2, r3
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f002 f8ea 	bl	8005334 <memcpy>
	}
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003170:	f001 fd50 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800317c:	e011      	b.n	80031a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3324      	adds	r3, #36	; 0x24
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fd8c 	bl	8003ca8 <xTaskRemoveFromEventList>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003196:	f000 fec5 	bl	8003f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	3b01      	subs	r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dce9      	bgt.n	800317e <prvUnlockQueue+0x16>
 80031aa:	e000      	b.n	80031ae <prvUnlockQueue+0x46>
					break;
 80031ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	22ff      	movs	r2, #255	; 0xff
 80031b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031b6:	f001 fd5d 	bl	8004c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031ba:	f001 fd2b 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c6:	e011      	b.n	80031ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3310      	adds	r3, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fd67 	bl	8003ca8 <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031e0:	f000 fea0 	bl	8003f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	dce9      	bgt.n	80031c8 <prvUnlockQueue+0x60>
 80031f4:	e000      	b.n	80031f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003200:	f001 fd38 	bl	8004c74 <vPortExitCritical>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003214:	f001 fcfe 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800322a:	f001 fd23 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003240:	f001 fce8 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	429a      	cmp	r2, r3
 800324e:	d102      	bne.n	8003256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e001      	b.n	800325a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800325a:	f001 fd0b 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e014      	b.n	80032a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <vQueueAddToRegistry+0x50>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <vQueueAddToRegistry+0x50>)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <vQueueAddToRegistry+0x50>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800329a:	e006      	b.n	80032aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d9e7      	bls.n	8003278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000830 	.word	0x20000830

080032bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032cc:	f001 fca2 	bl	8004c14 <vPortEnterCritical>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d103      	bne.n	80032e6 <vQueueWaitForMessageRestricted+0x2a>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d103      	bne.n	80032fc <vQueueWaitForMessageRestricted+0x40>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fc:	f001 fcba 	bl	8004c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fc9d 	bl	8003c50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff26 	bl	8003168 <prvUnlockQueue>
	}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af04      	add	r7, sp, #16
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	623b      	str	r3, [r7, #32]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xTaskCreateStatic+0x46>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800336a:	23a8      	movs	r3, #168	; 0xa8
 800336c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2ba8      	cmp	r3, #168	; 0xa8
 8003372:	d00a      	beq.n	800338a <xTaskCreateStatic+0x66>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61bb      	str	r3, [r7, #24]
}
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800338a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01e      	beq.n	80033d0 <xTaskCreateStatic+0xac>
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033aa:	2300      	movs	r3, #0
 80033ac:	9303      	str	r3, [sp, #12]
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f850 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ca:	f000 f8f3 	bl	80035b4 <prvAddNewTaskToReadyList>
 80033ce:	e001      	b.n	80033d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033d4:	697b      	ldr	r3, [r7, #20]
	}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08c      	sub	sp, #48	; 0x30
 80033e2:	af04      	add	r7, sp, #16
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fd30 	bl	8004e58 <pvPortMalloc>
 80033f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003400:	20a8      	movs	r0, #168	; 0xa8
 8003402:	f001 fd29 	bl	8004e58 <pvPortMalloc>
 8003406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	e005      	b.n	8003422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f001 fdea 	bl	8004ff0 <vPortFree>
 800341c:	e001      	b.n	8003422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d017      	beq.n	8003458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	2300      	movs	r3, #0
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f80e 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800344c:	69f8      	ldr	r0, [r7, #28]
 800344e:	f000 f8b1 	bl	80035b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e002      	b.n	800345e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800345e:	69bb      	ldr	r3, [r7, #24]
	}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	461a      	mov	r2, r3
 8003480:	21a5      	movs	r1, #165	; 0xa5
 8003482:	f001 fed3 	bl	800522c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003490:	3b01      	subs	r3, #1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	617b      	str	r3, [r7, #20]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01f      	beq.n	8003506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e012      	b.n	80034f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	7819      	ldrb	r1, [r3, #0]
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	3334      	adds	r3, #52	; 0x34
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d9e9      	bls.n	80034cc <prvInitialiseNewTask+0x64>
 80034f8:	e000      	b.n	80034fc <prvInitialiseNewTask+0x94>
			{
				break;
 80034fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003504:	e003      	b.n	800350e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b37      	cmp	r3, #55	; 0x37
 8003512:	d901      	bls.n	8003518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003514:	2337      	movs	r3, #55	; 0x37
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f978 	bl	8002824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	3318      	adds	r3, #24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f973 	bl	8002824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	3354      	adds	r3, #84	; 0x54
 8003568:	224c      	movs	r2, #76	; 0x4c
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fe5d 	bl	800522c <memset>
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <prvInitialiseNewTask+0x140>)
 8003576:	659a      	str	r2, [r3, #88]	; 0x58
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <prvInitialiseNewTask+0x144>)
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <prvInitialiseNewTask+0x148>)
 8003582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	69b8      	ldr	r0, [r7, #24]
 800358a:	f001 fa17 	bl	80049bc <pxPortInitialiseStack>
 800358e:	4602      	mov	r2, r0
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20001e64 	.word	0x20001e64
 80035ac:	20001ecc 	.word	0x20001ecc
 80035b0:	20001f34 	.word	0x20001f34

080035b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035bc:	f001 fb2a 	bl	8004c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <prvAddNewTaskToReadyList+0xc4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <prvAddNewTaskToReadyList+0xc4>)
 80035c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <prvAddNewTaskToReadyList+0xc8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035d2:	4a2a      	ldr	r2, [pc, #168]	; (800367c <prvAddNewTaskToReadyList+0xc8>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <prvAddNewTaskToReadyList+0xc4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d110      	bne.n	8003602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035e0:	f000 fcc4 	bl	8003f6c <prvInitialiseTaskLists>
 80035e4:	e00d      	b.n	8003602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <prvAddNewTaskToReadyList+0xcc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <prvAddNewTaskToReadyList+0xc8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d802      	bhi.n	8003602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035fc:	4a1f      	ldr	r2, [pc, #124]	; (800367c <prvAddNewTaskToReadyList+0xc8>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <prvAddNewTaskToReadyList+0xd0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <prvAddNewTaskToReadyList+0xd0>)
 800360a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <prvAddNewTaskToReadyList+0xd0>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <prvAddNewTaskToReadyList+0xd4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d903      	bls.n	8003628 <prvAddNewTaskToReadyList+0x74>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <prvAddNewTaskToReadyList+0xd4>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <prvAddNewTaskToReadyList+0xd8>)
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7ff f8fd 	bl	800283e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003644:	f001 fb16 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <prvAddNewTaskToReadyList+0xcc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <prvAddNewTaskToReadyList+0xc8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	429a      	cmp	r2, r3
 800365c:	d207      	bcs.n	800366e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <prvAddNewTaskToReadyList+0xdc>)
 8003660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000d44 	.word	0x20000d44
 800367c:	20000870 	.word	0x20000870
 8003680:	20000d50 	.word	0x20000d50
 8003684:	20000d60 	.word	0x20000d60
 8003688:	20000d4c 	.word	0x20000d4c
 800368c:	20000874 	.word	0x20000874
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <vTaskDelay+0x60>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <vTaskDelay+0x30>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	60bb      	str	r3, [r7, #8]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036c4:	f000 f88a 	bl	80037dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fdb4 	bl	8004238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036d0:	f000 f892 	bl	80037f8 <xTaskResumeAll>
 80036d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <vTaskDelay+0x64>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000d6c 	.word	0x20000d6c
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800370a:	463a      	mov	r2, r7
 800370c:	1d39      	adds	r1, r7, #4
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fe44 	bl	80023a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	9202      	str	r2, [sp, #8]
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	460a      	mov	r2, r1
 800372a:	4924      	ldr	r1, [pc, #144]	; (80037bc <vTaskStartScheduler+0xc0>)
 800372c:	4824      	ldr	r0, [pc, #144]	; (80037c0 <vTaskStartScheduler+0xc4>)
 800372e:	f7ff fdf9 	bl	8003324 <xTaskCreateStatic>
 8003732:	4603      	mov	r3, r0
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <vTaskStartScheduler+0xc8>)
 8003736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <vTaskStartScheduler+0xc8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e001      	b.n	800374a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003750:	f000 fdc6 	bl	80042e0 <xTimerCreateTimerTask>
 8003754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d11b      	bne.n	8003794 <vTaskStartScheduler+0x98>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	613b      	str	r3, [r7, #16]
}
 800376e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <vTaskStartScheduler+0xcc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3354      	adds	r3, #84	; 0x54
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <vTaskStartScheduler+0xd0>)
 8003778:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <vTaskStartScheduler+0xd4>)
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <vTaskStartScheduler+0xd8>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <vTaskStartScheduler+0xdc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800378e:	f001 f99f 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003792:	e00e      	b.n	80037b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d10a      	bne.n	80037b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <vTaskStartScheduler+0xb4>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	08005430 	.word	0x08005430
 80037c0:	08003f3d 	.word	0x08003f3d
 80037c4:	20000d68 	.word	0x20000d68
 80037c8:	20000870 	.word	0x20000870
 80037cc:	2000005c 	.word	0x2000005c
 80037d0:	20000d64 	.word	0x20000d64
 80037d4:	20000d50 	.word	0x20000d50
 80037d8:	20000d48 	.word	0x20000d48

080037dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <vTaskSuspendAll+0x18>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <vTaskSuspendAll+0x18>)
 80037e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000d6c 	.word	0x20000d6c

080037f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003806:	4b42      	ldr	r3, [pc, #264]	; (8003910 <xTaskResumeAll+0x118>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <xTaskResumeAll+0x2c>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	603b      	str	r3, [r7, #0]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003824:	f001 f9f6 	bl	8004c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <xTaskResumeAll+0x118>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	4a38      	ldr	r2, [pc, #224]	; (8003910 <xTaskResumeAll+0x118>)
 8003830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <xTaskResumeAll+0x118>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d162      	bne.n	8003900 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <xTaskResumeAll+0x11c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d05e      	beq.n	8003900 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003842:	e02f      	b.n	80038a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <xTaskResumeAll+0x120>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3318      	adds	r3, #24
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f851 	bl	80028f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f84c 	bl	80028f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <xTaskResumeAll+0x124>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d903      	bls.n	8003874 <xTaskResumeAll+0x7c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <xTaskResumeAll+0x124>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <xTaskResumeAll+0x128>)
 8003882:	441a      	add	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f7fe ffd7 	bl	800283e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <xTaskResumeAll+0x12c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <xTaskResumeAll+0x130>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <xTaskResumeAll+0x120>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1cb      	bne.n	8003844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038b2:	f000 fbfd 	bl	80040b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <xTaskResumeAll+0x134>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038c2:	f000 f847 	bl	8003954 <xTaskIncrementTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <xTaskResumeAll+0x130>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f1      	bne.n	80038c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <xTaskResumeAll+0x134>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <xTaskResumeAll+0x130>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskResumeAll+0x138>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003900:	f001 f9b8 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 8003904:	68bb      	ldr	r3, [r7, #8]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000d6c 	.word	0x20000d6c
 8003914:	20000d44 	.word	0x20000d44
 8003918:	20000d04 	.word	0x20000d04
 800391c:	20000d4c 	.word	0x20000d4c
 8003920:	20000874 	.word	0x20000874
 8003924:	20000870 	.word	0x20000870
 8003928:	20000d58 	.word	0x20000d58
 800392c:	20000d54 	.word	0x20000d54
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <xTaskGetTickCount+0x1c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003940:	687b      	ldr	r3, [r7, #4]
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000d48 	.word	0x20000d48

08003954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395e:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <xTaskIncrementTick+0x148>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 808f 	bne.w	8003a86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003968:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <xTaskIncrementTick+0x14c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003970:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <xTaskIncrementTick+0x14c>)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d120      	bne.n	80039be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <xTaskIncrementTick+0x150>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <xTaskIncrementTick+0x48>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	603b      	str	r3, [r7, #0]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <xTaskIncrementTick+0x46>
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <xTaskIncrementTick+0x150>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <xTaskIncrementTick+0x154>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <xTaskIncrementTick+0x150>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4a3f      	ldr	r2, [pc, #252]	; (8003aa8 <xTaskIncrementTick+0x154>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <xTaskIncrementTick+0x158>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <xTaskIncrementTick+0x158>)
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	f000 fb79 	bl	80040b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <xTaskIncrementTick+0x15c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d349      	bcc.n	8003a5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c8:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <xTaskIncrementTick+0x150>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <xTaskIncrementTick+0x15c>)
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	601a      	str	r2, [r3, #0]
					break;
 80039da:	e03f      	b.n	8003a5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xTaskIncrementTick+0x150>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d203      	bcs.n	80039fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039f4:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <xTaskIncrementTick+0x15c>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039fa:	e02f      	b.n	8003a5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe ff79 	bl	80028f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ff70 	bl	80028f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <xTaskIncrementTick+0x160>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d903      	bls.n	8003a2c <xTaskIncrementTick+0xd8>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <xTaskIncrementTick+0x160>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <xTaskIncrementTick+0x164>)
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fe fefb 	bl	800283e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <xTaskIncrementTick+0x168>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d3b8      	bcc.n	80039c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a5a:	e7b5      	b.n	80039c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <xTaskIncrementTick+0x168>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	4915      	ldr	r1, [pc, #84]	; (8003ab8 <xTaskIncrementTick+0x164>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d901      	bls.n	8003a78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <xTaskIncrementTick+0x16c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e004      	b.n	8003a90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <xTaskIncrementTick+0x170>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <xTaskIncrementTick+0x170>)
 8003a8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000d6c 	.word	0x20000d6c
 8003aa0:	20000d48 	.word	0x20000d48
 8003aa4:	20000cfc 	.word	0x20000cfc
 8003aa8:	20000d00 	.word	0x20000d00
 8003aac:	20000d5c 	.word	0x20000d5c
 8003ab0:	20000d64 	.word	0x20000d64
 8003ab4:	20000d4c 	.word	0x20000d4c
 8003ab8:	20000874 	.word	0x20000874
 8003abc:	20000870 	.word	0x20000870
 8003ac0:	20000d58 	.word	0x20000d58
 8003ac4:	20000d54 	.word	0x20000d54

08003ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ace:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <vTaskSwitchContext+0xb4>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003adc:	e046      	b.n	8003b6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <vTaskSwitchContext+0xb4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <vTaskSwitchContext+0xb8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e010      	b.n	8003b0e <vTaskSwitchContext+0x46>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <vTaskSwitchContext+0x40>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	607b      	str	r3, [r7, #4]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vTaskSwitchContext+0x3e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	491d      	ldr	r1, [pc, #116]	; (8003b84 <vTaskSwitchContext+0xbc>)
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0e4      	beq.n	8003aec <vTaskSwitchContext+0x24>
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <vTaskSwitchContext+0xbc>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3308      	adds	r3, #8
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d104      	bne.n	8003b52 <vTaskSwitchContext+0x8a>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <vTaskSwitchContext+0xc0>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <vTaskSwitchContext+0xb8>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <vTaskSwitchContext+0xc0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3354      	adds	r3, #84	; 0x54
 8003b68:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <vTaskSwitchContext+0xc4>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20000d6c 	.word	0x20000d6c
 8003b7c:	20000d58 	.word	0x20000d58
 8003b80:	20000d4c 	.word	0x20000d4c
 8003b84:	20000874 	.word	0x20000874
 8003b88:	20000870 	.word	0x20000870
 8003b8c:	2000005c 	.word	0x2000005c

08003b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <vTaskPlaceOnEventList+0x44>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fe fe61 	bl	8002886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	6838      	ldr	r0, [r7, #0]
 8003bc8:	f000 fb36 	bl	8004238 <prvAddCurrentTaskToDelayedList>
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000870 	.word	0x20000870

08003bd8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	617b      	str	r3, [r7, #20]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	613b      	str	r3, [r7, #16]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c28:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7fe fe03 	bl	800283e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fafc 	bl	8004238 <prvAddCurrentTaskToDelayedList>
}
 8003c40:	bf00      	nop
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000d6c 	.word	0x20000d6c
 8003c4c:	20000870 	.word	0x20000870

08003c50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	617b      	str	r3, [r7, #20]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	4619      	mov	r1, r3
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7fe fddc 	bl	800283e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f000 facf 	bl	8004238 <prvAddCurrentTaskToDelayedList>
	}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000870 	.word	0x20000870

08003ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	60fb      	str	r3, [r7, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fe0d 	bl	80028f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <xTaskRemoveFromEventList+0xb0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11d      	bne.n	8003d22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fe04 	bl	80028f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <xTaskRemoveFromEventList+0xb4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <xTaskRemoveFromEventList+0x5c>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <xTaskRemoveFromEventList+0xb4>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <xTaskRemoveFromEventList+0xb8>)
 8003d12:	441a      	add	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7fe fd8f 	bl	800283e <vListInsertEnd>
 8003d20:	e005      	b.n	8003d2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	3318      	adds	r3, #24
 8003d26:	4619      	mov	r1, r3
 8003d28:	480e      	ldr	r0, [pc, #56]	; (8003d64 <xTaskRemoveFromEventList+0xbc>)
 8003d2a:	f7fe fd88 	bl	800283e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <xTaskRemoveFromEventList+0xc0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d905      	bls.n	8003d48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <xTaskRemoveFromEventList+0xc4>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e001      	b.n	8003d4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d4c:	697b      	ldr	r3, [r7, #20]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000d6c 	.word	0x20000d6c
 8003d5c:	20000d4c 	.word	0x20000d4c
 8003d60:	20000874 	.word	0x20000874
 8003d64:	20000d04 	.word	0x20000d04
 8003d68:	20000870 	.word	0x20000870
 8003d6c:	20000d58 	.word	0x20000d58

08003d70 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	613b      	str	r3, [r7, #16]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60fb      	str	r3, [r7, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fe fd97 	bl	80028f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fd92 	bl	80028f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d903      	bls.n	8003de8 <vTaskRemoveFromUnorderedEventList+0x78>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003df6:	441a      	add	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f7fe fd1d 	bl	800283e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d902      	bls.n	8003e18 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000d6c 	.word	0x20000d6c
 8003e24:	20000d4c 	.word	0x20000d4c
 8003e28:	20000874 	.word	0x20000874
 8003e2c:	20000870 	.word	0x20000870
 8003e30:	20000d58 	.word	0x20000d58

08003e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <vTaskInternalSetTimeOutState+0x24>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <vTaskInternalSetTimeOutState+0x28>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	605a      	str	r2, [r3, #4]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000d5c 	.word	0x20000d5c
 8003e5c:	20000d48 	.word	0x20000d48

08003e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	613b      	str	r3, [r7, #16]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60fb      	str	r3, [r7, #12]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ea2:	f000 feb7 	bl	8004c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <xTaskCheckForTimeOut+0xbc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d102      	bne.n	8003ec6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e023      	b.n	8003f0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <xTaskCheckForTimeOut+0xc0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d007      	beq.n	8003ee2 <xTaskCheckForTimeOut+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e015      	b.n	8003f0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d20b      	bcs.n	8003f04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff9b 	bl	8003e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e004      	b.n	8003f0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f0e:	f000 feb1 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003f12:	69fb      	ldr	r3, [r7, #28]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000d48 	.word	0x20000d48
 8003f20:	20000d5c 	.word	0x20000d5c

08003f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <vTaskMissedYield+0x14>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	20000d58 	.word	0x20000d58

08003f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f44:	f000 f852 	bl	8003fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <prvIdleTask+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9f9      	bls.n	8003f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <prvIdleTask+0x2c>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f60:	e7f0      	b.n	8003f44 <prvIdleTask+0x8>
 8003f62:	bf00      	nop
 8003f64:	20000874 	.word	0x20000874
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvInitialiseTaskLists>:
		the calling task. */
		pxTCB = prvGetTCBFromHandle( xTaskToModify );

		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
	}

 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	e00c      	b.n	8003f92 <prvInitialiseTaskLists+0x26>
static void prvInitialiseTaskLists( void )
{
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <prvInitialiseTaskLists+0x60>)
 8003f84:	4413      	add	r3, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fc2c 	bl	80027e4 <vListInitialise>

 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b37      	cmp	r3, #55	; 0x37
 8003f96:	d9ef      	bls.n	8003f78 <prvInitialiseTaskLists+0xc>
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003f9a:	f7fe fc23 	bl	80027e4 <vListInitialise>
	{
 8003f9e:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fa0:	f7fe fc20 	bl	80027e4 <vListInitialise>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa4:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <prvInitialiseTaskLists+0x6c>)
 8003fa6:	f7fe fc1d 	bl	80027e4 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
	vListInitialise( &xDelayedTaskList2 );
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <prvInitialiseTaskLists+0x70>)
 8003fac:	f7fe fc1a 	bl	80027e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
	}
 8003fb0:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <prvInitialiseTaskLists+0x74>)
 8003fb2:	f7fe fc17 	bl	80027e4 <vListInitialise>
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
	}
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <prvInitialiseTaskLists+0x78>)
 8003fb8:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003fba:	601a      	str	r2, [r3, #0]
	#endif /* INCLUDE_vTaskSuspend */
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvInitialiseTaskLists+0x7c>)
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	601a      	str	r2, [r3, #0]

 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000874 	.word	0x20000874
 8003fd0:	20000cd4 	.word	0x20000cd4
 8003fd4:	20000ce8 	.word	0x20000ce8
 8003fd8:	20000d04 	.word	0x20000d04
 8003fdc:	20000d18 	.word	0x20000d18
 8003fe0:	20000d30 	.word	0x20000d30
 8003fe4:	20000cfc 	.word	0x20000cfc
 8003fe8:	20000d00 	.word	0x20000d00

08003fec <prvCheckTasksWaitingTermination>:
	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
{

	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/

	#if ( INCLUDE_vTaskDelete == 1 )
	{
 8003ff2:	e019      	b.n	8004028 <prvCheckTasksWaitingTermination+0x3c>
		TCB_t *pxTCB;

 8003ff4:	f000 fe0e 	bl	8004c14 <vPortEnterCritical>
		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <prvCheckTasksWaitingTermination+0x50>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	607b      	str	r3, [r7, #4]
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fc77 	bl	80028f8 <uxListRemove>
		{
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <prvCheckTasksWaitingTermination+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <prvCheckTasksWaitingTermination+0x54>)
 8004012:	6013      	str	r3, [r2, #0]
			taskENTER_CRITICAL();
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800401c:	6013      	str	r3, [r2, #0]
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401e:	f000 fe29 	bl	8004c74 <vPortExitCritical>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f810 	bl	8004048 <prvDeleteTCB>
	{
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e1      	bne.n	8003ff4 <prvCheckTasksWaitingTermination+0x8>
				--uxDeletedTasksWaitingCleanUp;
			}
			taskEXIT_CRITICAL();

 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000d18 	.word	0x20000d18
 8004040:	20000d44 	.word	0x20000d44
 8004044:	20000d2c 	.word	0x20000d2c

08004048 <prvDeleteTCB>:

		return uxReturn;
	}

#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls.  The call is also used by ports/demos that
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level.
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3354      	adds	r3, #84	; 0x54
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f8f1 	bl	800523c <_reclaim_reent>
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
			vPortFree( pxTCB );
		}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <prvDeleteTCB+0x2e>
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4618      	mov	r0, r3
 800406a:	f000 ffc1 	bl	8004ff0 <vPortFree>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 ffbe 	bl	8004ff0 <vPortFree>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004074:	e018      	b.n	80040a8 <prvDeleteTCB+0x60>
				/* Both the stack and TCB were allocated dynamically, so both
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800407c:	2b01      	cmp	r3, #1
 800407e:	d103      	bne.n	8004088 <prvDeleteTCB+0x40>
			}
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 ffb5 	bl	8004ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004086:	e00f      	b.n	80040a8 <prvDeleteTCB+0x60>
			}
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800408e:	2b02      	cmp	r3, #2
 8004090:	d00a      	beq.n	80040a8 <prvDeleteTCB+0x60>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	60fb      	str	r3, [r7, #12]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvResetNextTaskUnblockTime>:
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}

 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvResetNextTaskUnblockTime+0x38>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <prvResetNextTaskUnblockTime+0x1a>
static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
	{
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvResetNextTaskUnblockTime+0x3c>)
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
 80040c8:	e008      	b.n	80040dc <prvResetNextTaskUnblockTime+0x2c>
	{
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <prvResetNextTaskUnblockTime+0x38>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	607b      	str	r3, [r7, #4]
		/* The new current delayed list is not empty, get the value of
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <prvResetNextTaskUnblockTime+0x3c>)
 80040da:	6013      	str	r3, [r2, #0]
		which the task at the head of the delayed list should be removed
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000cfc 	.word	0x20000cfc
 80040ec:	20000d64 	.word	0x20000d64

080040f0 <xTaskGetSchedulerState>:

		return xReturn;
	}

#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <xTaskGetSchedulerState+0x34>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <xTaskGetSchedulerState+0x14>
	BaseType_t xTaskGetSchedulerState( void )
	{
 80040fe:	2301      	movs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	e008      	b.n	8004116 <xTaskGetSchedulerState+0x26>
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <xTaskGetSchedulerState+0x38>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
 800410c:	2302      	movs	r3, #2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e001      	b.n	8004116 <xTaskGetSchedulerState+0x26>
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
 8004116:	687b      	ldr	r3, [r7, #4]
				xReturn = taskSCHEDULER_SUSPENDED;
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20000d50 	.word	0x20000d50
 8004128:	20000d6c 	.word	0x20000d6c

0800412c <xTaskPriorityDisinherit>:

		return xReturn;
	}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	613b      	str	r3, [r7, #16]
#if ( configUSE_MUTEXES == 1 )
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d056      	beq.n	80041f0 <xTaskPriorityDisinherit+0xc4>
	{
	TCB_t * const pxTCB = pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
		{
 8004142:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <xTaskPriorityDisinherit+0xd0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d00a      	beq.n	8004162 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskPriorityDisinherit+0x34>
			/* A task can only have an inherited priority if it holds the mutex.
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60bb      	str	r3, [r7, #8]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <xTaskPriorityDisinherit+0x52>
			If the mutex is held by a task then it cannot be given from an
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	429a      	cmp	r2, r3
 8004194:	d02c      	beq.n	80041f0 <xTaskPriorityDisinherit+0xc4>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d128      	bne.n	80041f0 <xTaskPriorityDisinherit+0xc4>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
				{
					/* A task can only have an inherited priority if it holds
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fba8 	bl	80028f8 <uxListRemove>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	619a      	str	r2, [r3, #24]

 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <xTaskPriorityDisinherit+0xd4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d903      	bls.n	80041d0 <xTaskPriorityDisinherit+0xa4>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <xTaskPriorityDisinherit+0xd4>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <xTaskPriorityDisinherit+0xd8>)
 80041de:	441a      	add	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f7fe fb29 	bl	800283e <vListInsertEnd>
					prvAddTaskToReadyList( pxTCB );

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken.
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else
 80041f0:	697b      	ldr	r3, [r7, #20]
		{
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000870 	.word	0x20000870
 8004200:	20000d4c 	.word	0x20000d4c
 8004204:	20000874 	.word	0x20000874

08004208 <uxTaskResetEventItemValue>:
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <uxTaskResetEventItemValue+0x2c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	607b      	str	r3, [r7, #4]
TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <uxTaskResetEventItemValue+0x2c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <uxTaskResetEventItemValue+0x2c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004224:	619a      	str	r2, [r3, #24]
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );

 8004226:	687b      	ldr	r3, [r7, #4]
	/* Reset the event list item to its normal value - so it can be used with
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000870 	.word	0x20000870

08004238 <prvAddCurrentTaskToDelayedList>:

	uint32_t ulTaskGetIdleRunTimeCounter( void )
	{
		return xIdleTaskHandle->ulRunTimeCounter;
	}

 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
#endif
/*-----------------------------------------------------------*/
 8004242:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
	}
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <prvAddCurrentTaskToDelayedList+0x94>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fb52 	bl	80028f8 <uxListRemove>
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d10a      	bne.n	8004272 <prvAddCurrentTaskToDelayedList+0x3a>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <prvAddCurrentTaskToDelayedList+0x3a>
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4819      	ldr	r0, [pc, #100]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800426c:	f7fe fae7 	bl	800283e <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

 8004270:	e026      	b.n	80042c0 <prvAddCurrentTaskToDelayedList+0x88>
		else
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	60bb      	str	r3, [r7, #8]
			does not occur.  This may overflow but this doesn't matter, the
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <prvAddCurrentTaskToDelayedList+0x94>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	605a      	str	r2, [r3, #4]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	429a      	cmp	r2, r3
 8004288:	d209      	bcs.n	800429e <prvAddCurrentTaskToDelayedList+0x66>

 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7fe faf5 	bl	8002886 <vListInsert>

 800429c:	e010      	b.n	80042c0 <prvAddCurrentTaskToDelayedList+0x88>
			}
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvAddCurrentTaskToDelayedList+0x94>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7fe faeb 	bl	8002886 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d202      	bcs.n	80042c0 <prvAddCurrentTaskToDelayedList+0x88>
				/* If the task entering the blocked state was placed at the
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6013      	str	r3, [r2, #0]

 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000d48 	.word	0x20000d48
 80042cc:	20000870 	.word	0x20000870
 80042d0:	20000d30 	.word	0x20000d30
 80042d4:	20000d00 	.word	0x20000d00
 80042d8:	20000cfc 	.word	0x20000cfc
 80042dc:	20000d64 	.word	0x20000d64

080042e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042ea:	f000 fb07 	bl	80048fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <xTimerCreateTimerTask+0x80>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d021      	beq.n	800433a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042fe:	1d3a      	adds	r2, r7, #4
 8004300:	f107 0108 	add.w	r1, r7, #8
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe f863 	bl	80023d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	9202      	str	r2, [sp, #8]
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	2302      	movs	r3, #2
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2300      	movs	r3, #0
 800431e:	460a      	mov	r2, r1
 8004320:	4910      	ldr	r1, [pc, #64]	; (8004364 <xTimerCreateTimerTask+0x84>)
 8004322:	4811      	ldr	r0, [pc, #68]	; (8004368 <xTimerCreateTimerTask+0x88>)
 8004324:	f7fe fffe 	bl	8003324 <xTaskCreateStatic>
 8004328:	4603      	mov	r3, r0
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <xTimerCreateTimerTask+0x8c>)
 800432c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <xTimerCreateTimerTask+0x8c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004336:	2301      	movs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	613b      	str	r3, [r7, #16]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004356:	697b      	ldr	r3, [r7, #20]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000da0 	.word	0x20000da0
 8004364:	08005438 	.word	0x08005438
 8004368:	080044a5 	.word	0x080044a5
 800436c:	20000da4 	.word	0x20000da4

08004370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	623b      	str	r3, [r7, #32]
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <xTimerGenericCommand+0x98>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d02a      	beq.n	80043fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	dc18      	bgt.n	80043ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043b8:	f7ff fe9a 	bl	80040f0 <xTaskGetSchedulerState>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d109      	bne.n	80043d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <xTimerGenericCommand+0x98>)
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f107 0110 	add.w	r1, r7, #16
 80043ca:	2300      	movs	r3, #0
 80043cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ce:	f7fe fbc1 	bl	8002b54 <xQueueGenericSend>
 80043d2:	6278      	str	r0, [r7, #36]	; 0x24
 80043d4:	e012      	b.n	80043fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <xTimerGenericCommand+0x98>)
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f107 0110 	add.w	r1, r7, #16
 80043de:	2300      	movs	r3, #0
 80043e0:	2200      	movs	r2, #0
 80043e2:	f7fe fbb7 	bl	8002b54 <xQueueGenericSend>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24
 80043e8:	e008      	b.n	80043fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <xTimerGenericCommand+0x98>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f107 0110 	add.w	r1, r7, #16
 80043f2:	2300      	movs	r3, #0
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	f7fe fcab 	bl	8002d50 <xQueueGenericSendFromISR>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000da0 	.word	0x20000da0

0800440c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <prvProcessExpiredTimer+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3304      	adds	r3, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fa67 	bl	80028f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d022      	beq.n	800447e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	18d1      	adds	r1, r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	6978      	ldr	r0, [r7, #20]
 8004446:	f000 f8d1 	bl	80045ec <prvInsertTimerInActiveList>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01f      	beq.n	8004490 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004450:	2300      	movs	r3, #0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	2100      	movs	r1, #0
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f7ff ff88 	bl	8004370 <xTimerGenericCommand>
 8004460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d113      	bne.n	8004490 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	4798      	blx	r3
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000d98 	.word	0x20000d98

080044a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f857 	bl	8004564 <prvGetNextExpireTime>
 80044b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f803 	bl	80044c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044c2:	f000 f8d5 	bl	8004670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044c6:	e7f1      	b.n	80044ac <prvTimerTask+0x8>

080044c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044d2:	f7ff f983 	bl	80037dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f866 	bl	80045ac <prvSampleTimeNow>
 80044e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d130      	bne.n	800454a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <prvProcessTimerOrBlockTask+0x3c>
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d806      	bhi.n	8004504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044f6:	f7ff f97f 	bl	80037f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff85 	bl	800440c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004502:	e024      	b.n	800454e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <prvProcessTimerOrBlockTask+0x90>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <prvProcessTimerOrBlockTask+0x50>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <prvProcessTimerOrBlockTask+0x52>
 8004518:	2300      	movs	r3, #0
 800451a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <prvProcessTimerOrBlockTask+0x94>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	f7fe fec7 	bl	80032bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800452e:	f7ff f963 	bl	80037f8 <xTaskResumeAll>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <prvProcessTimerOrBlockTask+0x98>)
 800453a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	f3bf 8f6f 	isb	sy
}
 8004548:	e001      	b.n	800454e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800454a:	f7ff f955 	bl	80037f8 <xTaskResumeAll>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000d9c 	.word	0x20000d9c
 800455c:	20000da0 	.word	0x20000da0
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <prvGetNextExpireTime+0x44>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <prvGetNextExpireTime+0x16>
 8004576:	2201      	movs	r2, #1
 8004578:	e000      	b.n	800457c <prvGetNextExpireTime+0x18>
 800457a:	2200      	movs	r2, #0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <prvGetNextExpireTime+0x44>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e001      	b.n	8004598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000d98 	.word	0x20000d98

080045ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045b4:	f7ff f9be 	bl	8003934 <xTaskGetTickCount>
 80045b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <prvSampleTimeNow+0x3c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d205      	bcs.n	80045d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045c4:	f000 f936 	bl	8004834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045d6:	4a04      	ldr	r2, [pc, #16]	; (80045e8 <prvSampleTimeNow+0x3c>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000da8 	.word	0x20000da8

080045ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d812      	bhi.n	8004638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e01b      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <prvInsertTimerInActiveList+0x7c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7fe f928 	bl	8002886 <vListInsert>
 8004636:	e012      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d206      	bcs.n	800464e <prvInsertTimerInActiveList+0x62>
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e007      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <prvInsertTimerInActiveList+0x80>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe f914 	bl	8002886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000d9c 	.word	0x20000d9c
 800466c:	20000d98 	.word	0x20000d98

08004670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004676:	e0ca      	b.n	800480e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da18      	bge.n	80046b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	3304      	adds	r3, #4
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fb      	str	r3, [r7, #28]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	6850      	ldr	r0, [r2, #4]
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	4611      	mov	r1, r2
 80046ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f2c0 80ab 	blt.w	800480e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f915 	bl	80028f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ce:	463b      	mov	r3, r7
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff6b 	bl	80045ac <prvSampleTimeNow>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b09      	cmp	r3, #9
 80046dc:	f200 8096 	bhi.w	800480c <prvProcessReceivedCommands+0x19c>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <prvProcessReceivedCommands+0x78>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004711 	.word	0x08004711
 80046f4:	08004785 	.word	0x08004785
 80046f8:	08004799 	.word	0x08004799
 80046fc:	080047e3 	.word	0x080047e3
 8004700:	08004711 	.word	0x08004711
 8004704:	08004711 	.word	0x08004711
 8004708:	08004785 	.word	0x08004785
 800470c:	08004799 	.word	0x08004799
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004730:	f7ff ff5c 	bl	80045ec <prvInsertTimerInActiveList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d069      	beq.n	800480e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05e      	beq.n	800480e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	441a      	add	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	2100      	movs	r1, #0
 8004760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004762:	f7ff fe05 	bl	8004370 <xTimerGenericCommand>
 8004766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d14f      	bne.n	800480e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	61bb      	str	r3, [r7, #24]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004796:	e03a      	b.n	800480e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	617b      	str	r3, [r7, #20]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	18d1      	adds	r1, r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047dc:	f7ff ff06 	bl	80045ec <prvInsertTimerInActiveList>
					break;
 80047e0:	e015      	b.n	800480e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80047f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f2:	f000 fbfd 	bl	8004ff0 <vPortFree>
 80047f6:	e00a      	b.n	800480e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800480a:	e000      	b.n	800480e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800480c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <prvProcessReceivedCommands+0x1c0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	1d39      	adds	r1, r7, #4
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fb36 	bl	8002e88 <xQueueReceive>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f47f af2a 	bne.w	8004678 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	3730      	adds	r7, #48	; 0x30
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000da0 	.word	0x20000da0

08004834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800483a:	e048      	b.n	80048ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800483c:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f84f 	bl	80028f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02e      	beq.n	80048ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90e      	bls.n	80048a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7fd fff4 	bl	8002886 <vListInsert>
 800489e:	e016      	b.n	80048ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2300      	movs	r3, #0
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	2100      	movs	r1, #0
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fd60 	bl	8004370 <xTimerGenericCommand>
 80048b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	603b      	str	r3, [r7, #0]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1b1      	bne.n	800483c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvSwitchTimerLists+0xc4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <prvSwitchTimerLists+0xc0>)
 80048e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048e6:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <prvSwitchTimerLists+0xc4>)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6013      	str	r3, [r2, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000d98 	.word	0x20000d98
 80048f8:	20000d9c 	.word	0x20000d9c

080048fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004902:	f000 f987 	bl	8004c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <prvCheckForValidListAndQueue+0x60>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d120      	bne.n	8004950 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800490e:	4814      	ldr	r0, [pc, #80]	; (8004960 <prvCheckForValidListAndQueue+0x64>)
 8004910:	f7fd ff68 	bl	80027e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004914:	4813      	ldr	r0, [pc, #76]	; (8004964 <prvCheckForValidListAndQueue+0x68>)
 8004916:	f7fd ff65 	bl	80027e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <prvCheckForValidListAndQueue+0x6c>)
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <prvCheckForValidListAndQueue+0x64>)
 800491e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <prvCheckForValidListAndQueue+0x70>)
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <prvCheckForValidListAndQueue+0x68>)
 8004924:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004926:	2300      	movs	r3, #0
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <prvCheckForValidListAndQueue+0x74>)
 800492c:	4a11      	ldr	r2, [pc, #68]	; (8004974 <prvCheckForValidListAndQueue+0x78>)
 800492e:	2110      	movs	r1, #16
 8004930:	200a      	movs	r0, #10
 8004932:	f7fe f873 	bl	8002a1c <xQueueGenericCreateStatic>
 8004936:	4603      	mov	r3, r0
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <prvCheckForValidListAndQueue+0x60>)
 800493a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <prvCheckForValidListAndQueue+0x60>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <prvCheckForValidListAndQueue+0x60>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	490b      	ldr	r1, [pc, #44]	; (8004978 <prvCheckForValidListAndQueue+0x7c>)
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fc8c 	bl	8003268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004950:	f000 f990 	bl	8004c74 <vPortExitCritical>
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000da0 	.word	0x20000da0
 8004960:	20000d70 	.word	0x20000d70
 8004964:	20000d84 	.word	0x20000d84
 8004968:	20000d98 	.word	0x20000d98
 800496c:	20000d9c 	.word	0x20000d9c
 8004970:	20000e4c 	.word	0x20000e4c
 8004974:	20000dac 	.word	0x20000dac
 8004978:	08005440 	.word	0x08005440

0800497c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800498a:	f06f 0301 	mvn.w	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <xTimerPendFunctionCallFromISR+0x3c>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	f107 0114 	add.w	r1, r7, #20
 80049a4:	2300      	movs	r3, #0
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	f7fe f9d2 	bl	8002d50 <xQueueGenericSendFromISR>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000da0 	.word	0x20000da0

080049bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3b04      	subs	r3, #4
 80049cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3b04      	subs	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049ec:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <pxPortInitialiseStack+0x64>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3b14      	subs	r3, #20
 80049f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b04      	subs	r3, #4
 8004a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f06f 0202 	mvn.w	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3b20      	subs	r3, #32
 8004a10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	08004a25 	.word	0x08004a25

08004a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <prvTaskExitError+0x54>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d00a      	beq.n	8004a4e <prvTaskExitError+0x2a>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <prvTaskExitError+0x28>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60bb      	str	r3, [r7, #8]
}
 8004a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a62:	bf00      	nop
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0fc      	beq.n	8004a64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	2000000c 	.word	0x2000000c
 8004a7c:	00000000 	.word	0x00000000

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10a      	bne.n	8004af6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <xPortStartScheduler+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10a      	bne.n	8004b16 <xPortStartScheduler+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <xPortStartScheduler+0x12c>)
 8004b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <xPortStartScheduler+0x130>)
 8004b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b44:	e009      	b.n	8004b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d0ef      	beq.n	8004b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00a      	beq.n	8004b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bbe:	f000 f8dd 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <xPortStartScheduler+0x13c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bc8:	f000 f8fc 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd8:	f7ff ff66 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bdc:	f7fe ff74 	bl	8003ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8004be0:	f7ff ff20 	bl	8004a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00
 8004bf4:	410fc271 	.word	0x410fc271
 8004bf8:	410fc270 	.word	0x410fc270
 8004bfc:	e000e400 	.word	0xe000e400
 8004c00:	20000e9c 	.word	0x20000e9c
 8004c04:	20000ea0 	.word	0x20000ea0
 8004c08:	e000ed20 	.word	0xe000ed20
 8004c0c:	2000000c 	.word	0x2000000c
 8004c10:	e000ef34 	.word	0xe000ef34

08004c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10f      	bne.n	8004c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	603b      	str	r3, [r7, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x4a>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	2000000c 	.word	0x2000000c
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortExitCritical+0x24>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <vPortExitCritical+0x42>
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
}
 8004cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c
	...

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7fe fee2 	bl	8003ac8 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7fe fdff 	bl	8003954 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <xPortSysTickHandler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d914      	bls.n	8004e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <vPortValidateInterruptPriority+0x70>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df4:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <vPortValidateInterruptPriority+0x74>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	7afa      	ldrb	r2, [r7, #11]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20a      	bcs.n	8004e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <vPortValidateInterruptPriority+0x78>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <vPortValidateInterruptPriority+0x7c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d90a      	bls.n	8004e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	603b      	str	r3, [r7, #0]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <vPortValidateInterruptPriority+0x60>
	}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e3f0 	.word	0xe000e3f0
 8004e4c:	20000e9c 	.word	0x20000e9c
 8004e50:	e000ed0c 	.word	0xe000ed0c
 8004e54:	20000ea0 	.word	0x20000ea0

08004e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e64:	f7fe fcba 	bl	80037dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <pvPortMalloc+0x180>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e70:	f000 f920 	bl	80050b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e74:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <pvPortMalloc+0x184>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8093 	bne.w	8004fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01d      	beq.n	8004ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06e      	beq.n	8004fa8 <pvPortMalloc+0x150>
 8004eca:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <pvPortMalloc+0x188>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d869      	bhi.n	8004fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ede:	e004      	b.n	8004eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d903      	bls.n	8004efc <pvPortMalloc+0xa4>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f1      	bne.n	8004ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <pvPortMalloc+0x180>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d050      	beq.n	8004fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	2308      	movs	r3, #8
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d91f      	bls.n	8004f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <pvPortMalloc+0xf8>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	613b      	str	r3, [r7, #16]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f62:	69b8      	ldr	r0, [r7, #24]
 8004f64:	f000 f908 	bl	8005178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <pvPortMalloc+0x194>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <pvPortMalloc+0x194>)
 8004fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa8:	f7fe fc26 	bl	80037f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x174>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x172>
	return pvReturn;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20001e4c 	.word	0x20001e4c
 8004fdc:	20001e60 	.word	0x20001e60
 8004fe0:	20001e50 	.word	0x20001e50
 8004fe4:	20001e44 	.word	0x20001e44
 8004fe8:	20001e54 	.word	0x20001e54
 8004fec:	20001e58 	.word	0x20001e58

08004ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04d      	beq.n	800509e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005002:	2308      	movs	r3, #8
 8005004:	425b      	negs	r3, r3
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <vPortFree+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <vPortFree+0x44>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <vPortFree+0x62>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <vPortFree+0xb8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11a      	bne.n	800509e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <vPortFree+0xb8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005078:	f7fe fbb0 	bl	80037dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vPortFree+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4413      	add	r3, r2
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortFree+0xbc>)
 8005088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f000 f874 	bl	8005178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <vPortFree+0xc0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vPortFree+0xc0>)
 8005098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800509a:	f7fe fbad 	bl	80037f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20001e60 	.word	0x20001e60
 80050ac:	20001e50 	.word	0x20001e50
 80050b0:	20001e5c 	.word	0x20001e5c

080050b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ba:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80050be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <prvHeapInit+0xac>)
 80050c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <prvHeapInit+0xac>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <prvHeapInit+0xb0>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <prvHeapInit+0xb0>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvHeapInit+0xb4>)
 8005114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <prvHeapInit+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <prvHeapInit+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvHeapInit+0xb4>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <prvHeapInit+0xb8>)
 8005142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvHeapInit+0xbc>)
 800514a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <prvHeapInit+0xc0>)
 800514e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000ea4 	.word	0x20000ea4
 8005164:	20001e44 	.word	0x20001e44
 8005168:	20001e4c 	.word	0x20001e4c
 800516c:	20001e54 	.word	0x20001e54
 8005170:	20001e50 	.word	0x20001e50
 8005174:	20001e60 	.word	0x20001e60

08005178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <prvInsertBlockIntoFreeList+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e002      	b.n	800518c <prvInsertBlockIntoFreeList+0x14>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d8f7      	bhi.n	8005186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d108      	bne.n	80051ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d118      	bne.n	8005200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d00d      	beq.n	80051f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e008      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e003      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d002      	beq.n	8005216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20001e44 	.word	0x20001e44
 8005228:	20001e4c 	.word	0x20001e4c

0800522c <memset>:
 800522c:	4402      	add	r2, r0
 800522e:	4603      	mov	r3, r0
 8005230:	4293      	cmp	r3, r2
 8005232:	d100      	bne.n	8005236 <memset+0xa>
 8005234:	4770      	bx	lr
 8005236:	f803 1b01 	strb.w	r1, [r3], #1
 800523a:	e7f9      	b.n	8005230 <memset+0x4>

0800523c <_reclaim_reent>:
 800523c:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <_reclaim_reent+0xa8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4283      	cmp	r3, r0
 8005242:	b570      	push	{r4, r5, r6, lr}
 8005244:	4604      	mov	r4, r0
 8005246:	d04b      	beq.n	80052e0 <_reclaim_reent+0xa4>
 8005248:	69c3      	ldr	r3, [r0, #28]
 800524a:	b143      	cbz	r3, 800525e <_reclaim_reent+0x22>
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d144      	bne.n	80052dc <_reclaim_reent+0xa0>
 8005252:	69e3      	ldr	r3, [r4, #28]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	b111      	cbz	r1, 800525e <_reclaim_reent+0x22>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f879 	bl	8005350 <_free_r>
 800525e:	6961      	ldr	r1, [r4, #20]
 8005260:	b111      	cbz	r1, 8005268 <_reclaim_reent+0x2c>
 8005262:	4620      	mov	r0, r4
 8005264:	f000 f874 	bl	8005350 <_free_r>
 8005268:	69e1      	ldr	r1, [r4, #28]
 800526a:	b111      	cbz	r1, 8005272 <_reclaim_reent+0x36>
 800526c:	4620      	mov	r0, r4
 800526e:	f000 f86f 	bl	8005350 <_free_r>
 8005272:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005274:	b111      	cbz	r1, 800527c <_reclaim_reent+0x40>
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f86a 	bl	8005350 <_free_r>
 800527c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800527e:	b111      	cbz	r1, 8005286 <_reclaim_reent+0x4a>
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f865 	bl	8005350 <_free_r>
 8005286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005288:	b111      	cbz	r1, 8005290 <_reclaim_reent+0x54>
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f860 	bl	8005350 <_free_r>
 8005290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005292:	b111      	cbz	r1, 800529a <_reclaim_reent+0x5e>
 8005294:	4620      	mov	r0, r4
 8005296:	f000 f85b 	bl	8005350 <_free_r>
 800529a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800529c:	b111      	cbz	r1, 80052a4 <_reclaim_reent+0x68>
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f856 	bl	8005350 <_free_r>
 80052a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80052a6:	b111      	cbz	r1, 80052ae <_reclaim_reent+0x72>
 80052a8:	4620      	mov	r0, r4
 80052aa:	f000 f851 	bl	8005350 <_free_r>
 80052ae:	6a23      	ldr	r3, [r4, #32]
 80052b0:	b1b3      	cbz	r3, 80052e0 <_reclaim_reent+0xa4>
 80052b2:	4620      	mov	r0, r4
 80052b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052b8:	4718      	bx	r3
 80052ba:	5949      	ldr	r1, [r1, r5]
 80052bc:	b941      	cbnz	r1, 80052d0 <_reclaim_reent+0x94>
 80052be:	3504      	adds	r5, #4
 80052c0:	69e3      	ldr	r3, [r4, #28]
 80052c2:	2d80      	cmp	r5, #128	; 0x80
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	d1f8      	bne.n	80052ba <_reclaim_reent+0x7e>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 f841 	bl	8005350 <_free_r>
 80052ce:	e7c0      	b.n	8005252 <_reclaim_reent+0x16>
 80052d0:	680e      	ldr	r6, [r1, #0]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f83c 	bl	8005350 <_free_r>
 80052d8:	4631      	mov	r1, r6
 80052da:	e7ef      	b.n	80052bc <_reclaim_reent+0x80>
 80052dc:	2500      	movs	r5, #0
 80052de:	e7ef      	b.n	80052c0 <_reclaim_reent+0x84>
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	bf00      	nop
 80052e4:	2000005c 	.word	0x2000005c

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4d0d      	ldr	r5, [pc, #52]	; (8005320 <__libc_init_array+0x38>)
 80052ec:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	2600      	movs	r6, #0
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	4d0b      	ldr	r5, [pc, #44]	; (8005328 <__libc_init_array+0x40>)
 80052fa:	4c0c      	ldr	r4, [pc, #48]	; (800532c <__libc_init_array+0x44>)
 80052fc:	f000 f880 	bl	8005400 <_init>
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	2600      	movs	r6, #0
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f855 3b04 	ldr.w	r3, [r5], #4
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	080054fc 	.word	0x080054fc
 8005324:	080054fc 	.word	0x080054fc
 8005328:	080054fc 	.word	0x080054fc
 800532c:	08005500 	.word	0x08005500

08005330 <__retarget_lock_acquire_recursive>:
 8005330:	4770      	bx	lr

08005332 <__retarget_lock_release_recursive>:
 8005332:	4770      	bx	lr

08005334 <memcpy>:
 8005334:	440a      	add	r2, r1
 8005336:	4291      	cmp	r1, r2
 8005338:	f100 33ff 	add.w	r3, r0, #4294967295
 800533c:	d100      	bne.n	8005340 <memcpy+0xc>
 800533e:	4770      	bx	lr
 8005340:	b510      	push	{r4, lr}
 8005342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800534a:	4291      	cmp	r1, r2
 800534c:	d1f9      	bne.n	8005342 <memcpy+0xe>
 800534e:	bd10      	pop	{r4, pc}

08005350 <_free_r>:
 8005350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005352:	2900      	cmp	r1, #0
 8005354:	d044      	beq.n	80053e0 <_free_r+0x90>
 8005356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535a:	9001      	str	r0, [sp, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f1a1 0404 	sub.w	r4, r1, #4
 8005362:	bfb8      	it	lt
 8005364:	18e4      	addlt	r4, r4, r3
 8005366:	f000 f83f 	bl	80053e8 <__malloc_lock>
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <_free_r+0x94>)
 800536c:	9801      	ldr	r0, [sp, #4]
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	b933      	cbnz	r3, 8005380 <_free_r+0x30>
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	6014      	str	r4, [r2, #0]
 8005376:	b003      	add	sp, #12
 8005378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800537c:	f000 b83a 	b.w	80053f4 <__malloc_unlock>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d908      	bls.n	8005396 <_free_r+0x46>
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	1961      	adds	r1, r4, r5
 8005388:	428b      	cmp	r3, r1
 800538a:	bf01      	itttt	eq
 800538c:	6819      	ldreq	r1, [r3, #0]
 800538e:	685b      	ldreq	r3, [r3, #4]
 8005390:	1949      	addeq	r1, r1, r5
 8005392:	6021      	streq	r1, [r4, #0]
 8005394:	e7ed      	b.n	8005372 <_free_r+0x22>
 8005396:	461a      	mov	r2, r3
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b10b      	cbz	r3, 80053a0 <_free_r+0x50>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d9fa      	bls.n	8005396 <_free_r+0x46>
 80053a0:	6811      	ldr	r1, [r2, #0]
 80053a2:	1855      	adds	r5, r2, r1
 80053a4:	42a5      	cmp	r5, r4
 80053a6:	d10b      	bne.n	80053c0 <_free_r+0x70>
 80053a8:	6824      	ldr	r4, [r4, #0]
 80053aa:	4421      	add	r1, r4
 80053ac:	1854      	adds	r4, r2, r1
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	d1e0      	bne.n	8005376 <_free_r+0x26>
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	6053      	str	r3, [r2, #4]
 80053ba:	440c      	add	r4, r1
 80053bc:	6014      	str	r4, [r2, #0]
 80053be:	e7da      	b.n	8005376 <_free_r+0x26>
 80053c0:	d902      	bls.n	80053c8 <_free_r+0x78>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	e7d6      	b.n	8005376 <_free_r+0x26>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf04      	itt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	bf04      	itt	eq
 80053d8:	1949      	addeq	r1, r1, r5
 80053da:	6021      	streq	r1, [r4, #0]
 80053dc:	6054      	str	r4, [r2, #4]
 80053de:	e7ca      	b.n	8005376 <_free_r+0x26>
 80053e0:	b003      	add	sp, #12
 80053e2:	bd30      	pop	{r4, r5, pc}
 80053e4:	20001fa0 	.word	0x20001fa0

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff bfa1 	b.w	8005330 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	20001f9c 	.word	0x20001f9c

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff bf9c 	b.w	8005332 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	20001f9c 	.word	0x20001f9c

08005400 <_init>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr

0800540c <_fini>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr
