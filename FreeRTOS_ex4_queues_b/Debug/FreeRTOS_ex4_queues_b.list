
FreeRTOS_ex4_queues_b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080051dc  080051dc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051dc  080051dc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f48  20000060  08005244  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  08005244  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158b0  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa3  00000000  00000000  00035983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00038928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eee  00000000  00000000  00039c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146da  00000000  00000000  0003d97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d83  00000000  00000000  00052055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e4  00000000  00000000  00148dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014e1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050c0 	.word	0x080050c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080050c0 	.word	0x080050c0

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa85 	bl	8000732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f882 	bl	8000334 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fef8 	bl	8002024 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <main+0x5c>)
 8000236:	2101      	movs	r1, #1
 8000238:	2008      	movs	r0, #8
 800023a:	f001 ffea 	bl	8002212 <osMessageQueueNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x60>)
 8000242:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0x64>)
 8000246:	2100      	movs	r1, #0
 8000248:	480f      	ldr	r0, [pc, #60]	; (8000288 <main+0x68>)
 800024a:	f001 ff35 	bl	80020b8 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x6c>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(StartReceive, NULL, &Receive_attributes);
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0x70>)
 8000256:	2100      	movs	r1, #0
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x74>)
 800025a:	f001 ff2d 	bl	80020b8 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0x78>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, NULL, &Sender2_attributes);
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <main+0x7c>)
 8000266:	2100      	movs	r1, #0
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <main+0x80>)
 800026a:	f001 ff25 	bl	80020b8 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000274:	f001 fefa 	bl	800206c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x58>
 800027a:	bf00      	nop
 800027c:	0800517c 	.word	0x0800517c
 8000280:	20000088 	.word	0x20000088
 8000284:	08005110 	.word	0x08005110
 8000288:	08000419 	.word	0x08000419
 800028c:	2000007c 	.word	0x2000007c
 8000290:	08005134 	.word	0x08005134
 8000294:	08000455 	.word	0x08000455
 8000298:	20000080 	.word	0x20000080
 800029c:	08005158 	.word	0x08005158
 80002a0:	080004a5 	.word	0x080004a5
 80002a4:	20000084 	.word	0x20000084

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	; 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 fe18 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ce:	f000 fd3f 	bl	8000d50 <HAL_PWREx_ControlVoltageScaling>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d8:	f000 f914 	bl	8000504 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002dc:	2310      	movs	r3, #16
 80002de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e8:	2360      	movs	r3, #96	; 0x60
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	2300      	movs	r3, #0
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fd81 	bl	8000dfc <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000300:	f000 f900 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	463b      	mov	r3, r7
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f949 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 f8ec 	bl	8000504 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3758      	adds	r7, #88	; 0x58
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_GPIO_Init+0xbc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a28      	ldr	r2, [pc, #160]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a22      	ldr	r2, [pc, #136]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_GPIO_Init+0xbc>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000380:	f043 0302 	orr.w	r3, r3, #2
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_GPIO_Init+0xbc>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0302 	and.w	r3, r3, #2
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f000 fc8f 	bl	8000cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4619      	mov	r1, r3
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <MX_GPIO_Init+0xc0>)
 80003b6:	f000 fad7 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003ba:	2320      	movs	r3, #32
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 fac8 	bl	8000968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2105      	movs	r1, #5
 80003dc:	2028      	movs	r0, #40	; 0x28
 80003de:	f000 fa99 	bl	8000914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f000 fab2 	bl	800094c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e8:	bf00      	nop
 80003ea:	3720      	adds	r7, #32
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000800 	.word	0x48000800

080003f8 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee3 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 800040a:	200a      	movs	r0, #10
 800040c:	f7ff fee0 	bl	80001d0 <ITM_SendChar>
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t x = 1;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	for(;;)
	{
	  task_action('s');
 8000424:	2073      	movs	r0, #115	; 0x73
 8000426:	f7ff ffe7 	bl	80003f8 <task_action>
	  r_state = osMessageQueuePut(Queue1Handle, &x, 0, 200);
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <StartSender1+0x34>)
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	f107 010f 	add.w	r1, r7, #15
 8000432:	23c8      	movs	r3, #200	; 0xc8
 8000434:	2200      	movs	r2, #0
 8000436:	f001 ff5f 	bl	80022f8 <osMessageQueuePut>
 800043a:	4603      	mov	r3, r0
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <StartSender1+0x38>)
 800043e:	6013      	str	r3, [r2, #0]
	  osDelay(2000);
 8000440:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000444:	f001 feca 	bl	80021dc <osDelay>
	  task_action('s');
 8000448:	e7ec      	b.n	8000424 <StartSender1+0xc>
 800044a:	bf00      	nop
 800044c:	20000088 	.word	0x20000088
 8000450:	2000008c 	.word	0x2000008c

08000454 <StartReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceive */
void StartReceive(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceive */
  uint8_t rec = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	task_action('R');
 8000460:	2052      	movs	r0, #82	; 0x52
 8000462:	f7ff ffc9 	bl	80003f8 <task_action>
	r_state = osMessageQueueGet(Queue1Handle, &rec, NULL, 4000);
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <StartReceive+0x48>)
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	f107 010f 	add.w	r1, r7, #15
 800046e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000472:	2200      	movs	r2, #0
 8000474:	f001 ffa0 	bl	80023b8 <osMessageQueueGet>
 8000478:	4603      	mov	r3, r0
 800047a:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <StartReceive+0x4c>)
 800047c:	6013      	str	r3, [r2, #0]
	if(r_state == osOK)
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <StartReceive+0x4c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d105      	bne.n	8000492 <StartReceive+0x3e>
	{
      task_action(rec + 48);
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	3330      	adds	r3, #48	; 0x30
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ffb3 	bl	80003f8 <task_action>
	}
    osDelay(2000);//This interval will cause the Queue to Overflow
 8000492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000496:	f001 fea1 	bl	80021dc <osDelay>
	task_action('R');
 800049a:	e7e1      	b.n	8000460 <StartReceive+0xc>
 800049c:	20000088 	.word	0x20000088
 80004a0:	2000008c 	.word	0x2000008c

080004a4 <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
	uint8_t x = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	task_action('S');
 80004b0:	2053      	movs	r0, #83	; 0x53
 80004b2:	f7ff ffa1 	bl	80003f8 <task_action>
	r_state = osMessageQueuePut(Queue1Handle, &x, 0, 200);
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <StartSender2+0x34>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	f107 010f 	add.w	r1, r7, #15
 80004be:	23c8      	movs	r3, #200	; 0xc8
 80004c0:	2200      	movs	r2, #0
 80004c2:	f001 ff19 	bl	80022f8 <osMessageQueuePut>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <StartSender2+0x38>)
 80004ca:	6013      	str	r3, [r2, #0]
    osDelay(2000);
 80004cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d0:	f001 fe84 	bl	80021dc <osDelay>
	task_action('S');
 80004d4:	e7ec      	b.n	80004b0 <StartSender2+0xc>
 80004d6:	bf00      	nop
 80004d8:	20000088 	.word	0x20000088
 80004dc:	2000008c 	.word	0x2000008c

080004e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d101      	bne.n	80004f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f2:	f000 f937 	bl	8000764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40001000 	.word	0x40001000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <HAL_MspInit+0x64>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <HAL_MspInit+0x64>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6613      	str	r3, [r2, #96]	; 0x60
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_MspInit+0x64>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <HAL_MspInit+0x64>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <HAL_MspInit+0x64>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	6593      	str	r3, [r2, #88]	; 0x58
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_MspInit+0x64>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2105      	movs	r1, #5
 800054a:	f06f 0004 	mvn.w	r0, #4
 800054e:	f000 f9e1 	bl	8000914 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	f06f 0003 	mvn.w	r0, #3
 800055a:	f000 f9db 	bl	8000914 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	210f      	movs	r1, #15
 8000562:	f06f 0001 	mvn.w	r0, #1
 8000566:	f000 f9d5 	bl	8000914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <HAL_InitTick+0xe0>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a33      	ldr	r2, [pc, #204]	; (8000658 <HAL_InitTick+0xe0>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b31      	ldr	r3, [pc, #196]	; (8000658 <HAL_InitTick+0xe0>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800059e:	f107 0210 	add.w	r2, r7, #16
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f9b1 	bl	8001910 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b8:	f001 f994 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80005bc:	6378      	str	r0, [r7, #52]	; 0x34
 80005be:	e004      	b.n	80005ca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005c0:	f001 f990 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80005c4:	4603      	mov	r3, r0
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005cc:	4a23      	ldr	r2, [pc, #140]	; (800065c <HAL_InitTick+0xe4>)
 80005ce:	fba2 2303 	umull	r2, r3, r2, r3
 80005d2:	0c9b      	lsrs	r3, r3, #18
 80005d4:	3b01      	subs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_InitTick+0xe8>)
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <HAL_InitTick+0xec>)
 80005dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_InitTick+0xe8>)
 80005e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005e6:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <HAL_InitTick+0xe8>)
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_InitTick+0xe8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_InitTick+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <HAL_InitTick+0xe8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <HAL_InitTick+0xe8>)
 8000600:	f001 fa18 	bl	8001a34 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800060a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800060e:	2b00      	cmp	r3, #0
 8000610:	d11b      	bne.n	800064a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <HAL_InitTick+0xe8>)
 8000614:	f001 fa70 	bl	8001af8 <HAL_TIM_Base_Start_IT>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800061e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000622:	2b00      	cmp	r3, #0
 8000624:	d111      	bne.n	800064a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000626:	2036      	movs	r0, #54	; 0x36
 8000628:	f000 f990 	bl	800094c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b0f      	cmp	r3, #15
 8000630:	d808      	bhi.n	8000644 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000632:	2200      	movs	r2, #0
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	2036      	movs	r0, #54	; 0x36
 8000638:	f000 f96c 	bl	8000914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_InitTick+0xf0>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e002      	b.n	800064a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800064a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800064e:	4618      	mov	r0, r3
 8000650:	3738      	adds	r7, #56	; 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	431bde83 	.word	0x431bde83
 8000660:	20000090 	.word	0x20000090
 8000664:	40001000 	.word	0x40001000
 8000668:	20000004 	.word	0x20000004

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800069c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a0:	f000 fb24 	bl	8000cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <TIM6_DAC_IRQHandler+0x10>)
 80006ae:	f001 fa93 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000090 	.word	0x20000090

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e4:	f7ff ffea 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f004 fc4b 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fd85 	bl	8000220 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000718:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000724:	080051e4 	.word	0x080051e4
  ldr r2, =_sbss
 8000728:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800072c:	20001fa8 	.word	0x20001fa8

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>

08000732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f8de 	bl	80008fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	200f      	movs	r0, #15
 8000744:	f7ff ff18 	bl	8000578 <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e001      	b.n	8000758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000754:	f7ff fedc 	bl	8000510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000758:	79fb      	ldrb	r3, [r7, #7]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x20>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x24>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_IncTick+0x24>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	200000dc 	.word	0x200000dc

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000dc 	.word	0x200000dc

080007a4 <__NVIC_SetPriorityGrouping>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <__NVIC_EnableIRQ+0x38>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100

08000844 <__NVIC_SetPriority>:
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ff4c 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000926:	f7ff ff61 	bl	80007ec <__NVIC_GetPriorityGrouping>
 800092a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	68b9      	ldr	r1, [r7, #8]
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	f7ff ffb1 	bl	8000898 <NVIC_EncodePriority>
 8000936:	4602      	mov	r2, r0
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff80 	bl	8000844 <__NVIC_SetPriority>
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff54 	bl	8000808 <__NVIC_EnableIRQ>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e17f      	b.n	8000c78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 8171 	beq.w	8000c72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d118      	bne.n	8000a48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d017      	beq.n	8000a84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d123      	bne.n	8000ad8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	6939      	ldr	r1, [r7, #16]
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0203 	and.w	r2, r3, #3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80ac 	beq.w	8000c72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6613      	str	r3, [r2, #96]	; 0x60
 8000b26:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b32:	4a5a      	ldr	r2, [pc, #360]	; (8000c9c <HAL_GPIO_Init+0x334>)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b5c:	d025      	beq.n	8000baa <HAL_GPIO_Init+0x242>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <HAL_GPIO_Init+0x338>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01f      	beq.n	8000ba6 <HAL_GPIO_Init+0x23e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <HAL_GPIO_Init+0x33c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d019      	beq.n	8000ba2 <HAL_GPIO_Init+0x23a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4d      	ldr	r2, [pc, #308]	; (8000ca8 <HAL_GPIO_Init+0x340>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0x236>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4c      	ldr	r2, [pc, #304]	; (8000cac <HAL_GPIO_Init+0x344>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d00d      	beq.n	8000b9a <HAL_GPIO_Init+0x232>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4b      	ldr	r2, [pc, #300]	; (8000cb0 <HAL_GPIO_Init+0x348>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d007      	beq.n	8000b96 <HAL_GPIO_Init+0x22e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4a      	ldr	r2, [pc, #296]	; (8000cb4 <HAL_GPIO_Init+0x34c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_GPIO_Init+0x22a>
 8000b8e:	2306      	movs	r3, #6
 8000b90:	e00c      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b92:	2307      	movs	r3, #7
 8000b94:	e00a      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b96:	2305      	movs	r3, #5
 8000b98:	e008      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000baa:	2300      	movs	r3, #0
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bbc:	4937      	ldr	r1, [pc, #220]	; (8000c9c <HAL_GPIO_Init+0x334>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bee:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f47f ae78 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48001400 	.word	0x48001400
 8000cb4:	48001800 	.word	0x48001800
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd2:	887a      	ldrh	r2, [r7, #2]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cd8:	e002      	b.n	8000ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f806 	bl	8000d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40007000 	.word	0x40007000

08000d50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d5e:	d130      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d6c:	d038      	beq.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d76:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2232      	movs	r2, #50	; 0x32
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d94:	e002      	b.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da8:	d102      	bne.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f2      	bne.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbc:	d110      	bne.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e00f      	b.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dce:	d007      	beq.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40007000 	.word	0x40007000
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e3ca      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e0e:	4b97      	ldr	r3, [pc, #604]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e18:	4b94      	ldr	r3, [pc, #592]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80e4 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_RCC_OscConfig+0x4a>
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	f040 808b 	bne.w	8000f54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	f040 8087 	bne.w	8000f54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x62>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e3a2      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a1a      	ldr	r2, [r3, #32]
 8000e62:	4b82      	ldr	r3, [pc, #520]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <HAL_RCC_OscConfig+0x7c>
 8000e6e:	4b7f      	ldr	r3, [pc, #508]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e76:	e005      	b.n	8000e84 <HAL_RCC_OscConfig+0x88>
 8000e78:	4b7c      	ldr	r3, [pc, #496]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d223      	bcs.n	8000ed0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fd71 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e383      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9c:	4b73      	ldr	r3, [pc, #460]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a72      	ldr	r2, [pc, #456]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b70      	ldr	r3, [pc, #448]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	496d      	ldr	r1, [pc, #436]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	4968      	ldr	r1, [pc, #416]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e025      	b.n	8000f1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed0:	4b66      	ldr	r3, [pc, #408]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a65      	ldr	r2, [pc, #404]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b63      	ldr	r3, [pc, #396]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4960      	ldr	r1, [pc, #384]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	495b      	ldr	r1, [pc, #364]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fd31 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e343      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f1c:	f000 fc4a 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b52      	ldr	r3, [pc, #328]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	4950      	ldr	r1, [pc, #320]	; (8001070 <HAL_RCC_OscConfig+0x274>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <HAL_RCC_OscConfig+0x278>)
 8000f3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f3c:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb19 	bl	8000578 <HAL_InitTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d052      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	e327      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d032      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f5c:	4b43      	ldr	r3, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a42      	ldr	r2, [pc, #264]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc10 	bl	800078c <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc0c 	bl	800078c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e310      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8e:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4931      	ldr	r1, [pc, #196]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	492c      	ldr	r1, [pc, #176]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	e01a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fbdd 	bl	800078c <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fbd9 	bl	800078c <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e2dd      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x1da>
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d074      	beq.n	80010ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x21a>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b0c      	cmp	r3, #12
 800100e:	d10e      	bne.n	800102e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d10b      	bne.n	800102e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d064      	beq.n	80010ec <HAL_RCC_OscConfig+0x2f0>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d160      	bne.n	80010ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e2ba      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x24a>
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_RCC_OscConfig+0x270>)
 800103e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e026      	b.n	8001094 <HAL_RCC_OscConfig+0x298>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104e:	d115      	bne.n	800107c <HAL_RCC_OscConfig+0x280>
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8001056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a02      	ldr	r2, [pc, #8]	; (800106c <HAL_RCC_OscConfig+0x270>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e014      	b.n	8001094 <HAL_RCC_OscConfig+0x298>
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	08005194 	.word	0x08005194
 8001074:	20000000 	.word	0x20000000
 8001078:	20000004 	.word	0x20000004
 800107c:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a9f      	ldr	r2, [pc, #636]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b9d      	ldr	r3, [pc, #628]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a9c      	ldr	r2, [pc, #624]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fb76 	bl	800078c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fb72 	bl	800078c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e276      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b6:	4b92      	ldr	r3, [pc, #584]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x2a8>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fb62 	bl	800078c <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fb5e 	bl	800078c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e262      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x2d0>
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d060      	beq.n	80011bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d005      	beq.n	800110c <HAL_RCC_OscConfig+0x310>
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2b0c      	cmp	r3, #12
 8001104:	d119      	bne.n	800113a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d116      	bne.n	800113a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110c:	4b7c      	ldr	r3, [pc, #496]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_OscConfig+0x328>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e23f      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b76      	ldr	r3, [pc, #472]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	061b      	lsls	r3, r3, #24
 8001132:	4973      	ldr	r1, [pc, #460]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001138:	e040      	b.n	80011bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d023      	beq.n	800118a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fb1d 	bl	800078c <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fb19 	bl	800078c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e21d      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001168:	4b65      	ldr	r3, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	061b      	lsls	r3, r3, #24
 8001182:	495f      	ldr	r1, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
 8001188:	e018      	b.n	80011bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5c      	ldr	r2, [pc, #368]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff faf9 	bl	800078c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff faf5 	bl	800078c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1f9      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b0:	4b53      	ldr	r3, [pc, #332]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d03c      	beq.n	8001242 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01c      	beq.n	800120a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d0:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e0:	f7ff fad4 	bl	800078c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fad0 	bl	800078c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1d4      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0ef      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3ec>
 8001208:	e01b      	b.n	8001242 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	4a3b      	ldr	r2, [pc, #236]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fab7 	bl	800078c <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fab3 	bl	800078c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1b7      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1ef      	bne.n	8001222 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80a6 	beq.w	800139c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10d      	bne.n	800127c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6593      	str	r3, [r2, #88]	; 0x58
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001278:	2301      	movs	r3, #1
 800127a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x508>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d118      	bne.n	80012ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_RCC_OscConfig+0x508>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_RCC_OscConfig+0x508>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001294:	f7ff fa7a 	bl	800078c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129c:	f7ff fa76 	bl	800078c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e17a      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x508>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d108      	bne.n	80012d4 <HAL_RCC_OscConfig+0x4d8>
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d2:	e029      	b.n	8001328 <HAL_RCC_OscConfig+0x52c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d115      	bne.n	8001308 <HAL_RCC_OscConfig+0x50c>
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_RCC_OscConfig+0x504>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012fc:	e014      	b.n	8001328 <HAL_RCC_OscConfig+0x52c>
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	40007000 	.word	0x40007000
 8001308:	4b9c      	ldr	r3, [pc, #624]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130e:	4a9b      	ldr	r2, [pc, #620]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001318:	4b98      	ldr	r3, [pc, #608]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	4a97      	ldr	r2, [pc, #604]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d016      	beq.n	800135e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff fa2c 	bl	800078c <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fa28 	bl	800078c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e12a      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ed      	beq.n	8001338 <HAL_RCC_OscConfig+0x53c>
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff fa15 	bl	800078c <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fa11 	bl	800078c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e113      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800137c:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ed      	bne.n	8001366 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	4a79      	ldr	r2, [pc, #484]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80fe 	beq.w	80015a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	f040 80d0 	bne.w	8001550 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013b0:	4b72      	ldr	r3, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d130      	bne.n	8001426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	3b01      	subs	r3, #1
 80013d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d127      	bne.n	8001426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11f      	bne.n	8001426 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013f0:	2a07      	cmp	r2, #7
 80013f2:	bf14      	ite	ne
 80013f4:	2201      	movne	r2, #1
 80013f6:	2200      	moveq	r2, #0
 80013f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	3b01      	subs	r3, #1
 800140c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d109      	bne.n	8001426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	3b01      	subs	r3, #1
 8001420:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d06e      	beq.n	8001504 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d069      	beq.n	8001500 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001438:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0ad      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800144e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001454:	f7ff f99a 	bl	800078c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff f996 	bl	800078c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e09a      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146e:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x784>)
 8001480:	4013      	ands	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800148a:	3a01      	subs	r2, #1
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001494:	0212      	lsls	r2, r2, #8
 8001496:	4311      	orrs	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800149c:	0852      	lsrs	r2, r2, #1
 800149e:	3a01      	subs	r2, #1
 80014a0:	0552      	lsls	r2, r2, #21
 80014a2:	4311      	orrs	r1, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a8:	0852      	lsrs	r2, r2, #1
 80014aa:	3a01      	subs	r2, #1
 80014ac:	0652      	lsls	r2, r2, #25
 80014ae:	4311      	orrs	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014b4:	0912      	lsrs	r2, r2, #4
 80014b6:	0452      	lsls	r2, r2, #17
 80014b8:	430a      	orrs	r2, r1
 80014ba:	4930      	ldr	r1, [pc, #192]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a2a      	ldr	r2, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d8:	f7ff f958 	bl	800078c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff f954 	bl	800078c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e058      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_RCC_OscConfig+0x780>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014fe:	e050      	b.n	80015a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e04f      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d148      	bne.n	80015a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001528:	f7ff f930 	bl	800078c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff f92c 	bl	800078c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e030      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x734>
 800154e:	e028      	b.n	80015a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d023      	beq.n	800159e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x780>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x780>)
 800155c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff f913 	bl	800078c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001568:	e00c      	b.n	8001584 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff f90f 	bl	800078c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d905      	bls.n	8001584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e013      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
 800157c:	40021000 	.word	0x40021000
 8001580:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_OscConfig+0x7b0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ec      	bne.n	800156a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_RCC_OscConfig+0x7b0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4905      	ldr	r1, [pc, #20]	; (80015ac <HAL_RCC_OscConfig+0x7b0>)
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_OscConfig+0x7b4>)
 8001598:	4013      	ands	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e001      	b.n	80015a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	feeefffc 	.word	0xfeeefffc

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0e7      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4970      	ldr	r1, [pc, #448]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b6e      	ldr	r3, [pc, #440]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cf      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d010      	beq.n	8001626 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001610:	429a      	cmp	r2, r3
 8001612:	d908      	bls.n	8001626 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4960      	ldr	r1, [pc, #384]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d04c      	beq.n	80016cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d121      	bne.n	800168a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0a6      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e09a      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166a:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e08e      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e086      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4943      	ldr	r1, [pc, #268]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169c:	f7ff f876 	bl	800078c <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f872 	bl	800078c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e06e      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d208      	bcs.n	80016fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	492b      	ldr	r1, [pc, #172]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d210      	bcs.n	800172a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0207 	bic.w	r2, r3, #7
 8001710:	4923      	ldr	r1, [pc, #140]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_ClockConfig+0x1ec>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e036      	b.n	8001798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d008      	beq.n	8001748 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4918      	ldr	r1, [pc, #96]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d009      	beq.n	8001768 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4910      	ldr	r1, [pc, #64]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001768:	f000 f824 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 800176c:	4602      	mov	r2, r0
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	490b      	ldr	r1, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1f4>)
 800177a:	5ccb      	ldrb	r3, [r1, r3]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1f8>)
 8001786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1fc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fef3 	bl	8000578 <HAL_InitTick>
 8001792:	4603      	mov	r3, r0
 8001794:	72fb      	strb	r3, [r7, #11]

  return status;
 8001796:	7afb      	ldrb	r3, [r7, #11]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	08005194 	.word	0x08005194
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x34>
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d121      	bne.n	8001826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d11e      	bne.n	8001826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e005      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10d      	bne.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001824:	e00a      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d102      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	e004      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d101      	bne.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800183a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d134      	bne.n	80018ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0xa6>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d003      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0xac>
 8001858:	e005      	b.n	8001866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800185c:	617b      	str	r3, [r7, #20]
      break;
 800185e:	e005      	b.n	800186c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001862:	617b      	str	r3, [r7, #20]
      break;
 8001864:	e002      	b.n	800186c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	617b      	str	r3, [r7, #20]
      break;
 800186a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	3301      	adds	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	fb03 f202 	mul.w	r2, r3, r2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0e5b      	lsrs	r3, r3, #25
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	3301      	adds	r3, #1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018ac:	69bb      	ldr	r3, [r7, #24]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	080051ac 	.word	0x080051ac
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	007a1200 	.word	0x007a1200

080018cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000000 	.word	0x20000000

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018e8:	f7ff fff0 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4904      	ldr	r1, [pc, #16]	; (800190c <HAL_RCC_GetPCLK1Freq+0x28>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	080051a4 	.word	0x080051a4

08001910 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	220f      	movs	r2, #15
 800191e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_RCC_GetClockConfig+0x60>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40022000 	.word	0x40022000

08001974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800198c:	f7ff f9d2 	bl	8000d34 <HAL_PWREx_GetVoltageRange>
 8001990:	6178      	str	r0, [r7, #20]
 8001992:	e014      	b.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019ac:	f7ff f9c2 	bl	8000d34 <HAL_PWREx_GetVoltageRange>
 80019b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c4:	d10b      	bne.n	80019de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d919      	bls.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2ba0      	cmp	r3, #160	; 0xa0
 80019d0:	d902      	bls.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e013      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e010      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d902      	bls.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019e4:	2303      	movs	r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e00a      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d102      	bne.n	80019f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e004      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b70      	cmp	r3, #112	; 0x70
 80019fa:	d101      	bne.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 0207 	bic.w	r2, r3, #7
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e049      	b.n	8001ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f841 	bl	8001ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f000 f9da 	bl	8001e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e04f      	b.n	8001bb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01d      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3a:	d018      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00e      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d009      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d004      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d115      	bne.n	8001b9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d015      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d011      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	e008      	b.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e000      	b.n	8001bae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	40013400 	.word	0x40013400
 8001bd0:	40014000 	.word	0x40014000
 8001bd4:	00010007 	.word	0x00010007

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d020      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0202 	mvn.w	r2, #2
 8001c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8e4 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8d6 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8e7 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d020      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0204 	mvn.w	r2, #4
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8be 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8b0 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8c1 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d020      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0208 	mvn.w	r2, #8
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f898 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f88a 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f89b 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d020      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0210 	mvn.w	r2, #16
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f872 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f864 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f875 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0201 	mvn.w	r2, #1
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fbce 	bl	80004e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f906 	bl	8001f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8fe 	bl	8001f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f834 	bl	8001e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0220 	mvn.w	r2, #32
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8c6 	bl	8001f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a40      	ldr	r2, [pc, #256]	; (8001f40 <TIM_Base_SetConfig+0x114>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d00f      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	; (8001f44 <TIM_Base_SetConfig+0x118>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00b      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3c      	ldr	r2, [pc, #240]	; (8001f48 <TIM_Base_SetConfig+0x11c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <TIM_Base_SetConfig+0x120>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <TIM_Base_SetConfig+0x124>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d108      	bne.n	8001e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <TIM_Base_SetConfig+0x114>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01f      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d01b      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <TIM_Base_SetConfig+0x118>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d017      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <TIM_Base_SetConfig+0x11c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <TIM_Base_SetConfig+0x120>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00f      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <TIM_Base_SetConfig+0x124>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <TIM_Base_SetConfig+0x128>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <TIM_Base_SetConfig+0x12c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0x9a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <TIM_Base_SetConfig+0x130>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <TIM_Base_SetConfig+0x114>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00f      	beq.n	8001f24 <TIM_Base_SetConfig+0xf8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <TIM_Base_SetConfig+0x124>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0xf8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <TIM_Base_SetConfig+0x128>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0xf8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <TIM_Base_SetConfig+0x12c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0xf8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <TIM_Base_SetConfig+0x130>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d103      	bne.n	8001f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40012c00 	.word	0x40012c00
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	40013400 	.word	0x40013400
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40014400 	.word	0x40014400
 8001f5c:	40014800 	.word	0x40014800

08001f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <__NVIC_SetPriority>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <SysTick_Handler+0x1c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ff8:	f001 ff12 	bl	8003e20 <xTaskGetSchedulerState>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d001      	beq.n	8002006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002002:	f002 fcf9 	bl	80049f8 <xPortSysTickHandler>
  }
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002014:	2100      	movs	r1, #0
 8002016:	f06f 0004 	mvn.w	r0, #4
 800201a:	f7ff ffbf 	bl	8001f9c <__NVIC_SetPriority>
#endif
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800202a:	f3ef 8305 	mrs	r3, IPSR
 800202e:	603b      	str	r3, [r7, #0]
  return(result);
 8002030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002036:	f06f 0305 	mvn.w	r3, #5
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e00c      	b.n	8002058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <osKernelInitialize+0x44>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <osKernelInitialize+0x44>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e002      	b.n	8002058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000e0 	.word	0x200000e0

0800206c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002072:	f3ef 8305 	mrs	r3, IPSR
 8002076:	603b      	str	r3, [r7, #0]
  return(result);
 8002078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800207e:	f06f 0305 	mvn.w	r3, #5
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e010      	b.n	80020a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <osKernelStart+0x48>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d109      	bne.n	80020a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800208e:	f7ff ffbf 	bl	8002010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <osKernelStart+0x48>)
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002098:	f001 fa66 	bl	8003568 <vTaskStartScheduler>
      stat = osOK;
 800209c:	2300      	movs	r3, #0
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	e002      	b.n	80020a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200000e0 	.word	0x200000e0

080020b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c8:	f3ef 8305 	mrs	r3, IPSR
 80020cc:	617b      	str	r3, [r7, #20]
  return(result);
 80020ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d17e      	bne.n	80021d2 <osThreadNew+0x11a>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07b      	beq.n	80021d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020de:	2318      	movs	r3, #24
 80020e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d045      	beq.n	800217e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <osThreadNew+0x48>
        name = attr->name;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <osThreadNew+0x6e>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b38      	cmp	r3, #56	; 0x38
 8002118:	d805      	bhi.n	8002126 <osThreadNew+0x6e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <osThreadNew+0x72>
        return (NULL);
 8002126:	2300      	movs	r3, #0
 8002128:	e054      	b.n	80021d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <osThreadNew+0xa8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2ba7      	cmp	r3, #167	; 0xa7
 8002148:	d90a      	bls.n	8002160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <osThreadNew+0xa8>
        mem = 1;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e010      	b.n	8002182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <osThreadNew+0xca>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <osThreadNew+0xca>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <osThreadNew+0xca>
          mem = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e001      	b.n	8002182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d110      	bne.n	80021aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002190:	9202      	str	r2, [sp, #8]
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6a3a      	ldr	r2, [r7, #32]
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fff6 	bl	8003190 <xTaskCreateStatic>
 80021a4:	4603      	mov	r3, r0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e013      	b.n	80021d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d110      	bne.n	80021d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f001 f841 	bl	800324a <xTaskCreate>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <osThreadNew+0x11a>
            hTask = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021d2:	693b      	ldr	r3, [r7, #16]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e4:	f3ef 8305 	mrs	r3, IPSR
 80021e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <osDelay+0x1c>
    stat = osErrorISR;
 80021f0:	f06f 0305 	mvn.w	r3, #5
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e007      	b.n	8002208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 f97c 	bl	8003500 <vTaskDelay>
    }
  }

  return (stat);
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002222:	f3ef 8305 	mrs	r3, IPSR
 8002226:	613b      	str	r3, [r7, #16]
  return(result);
 8002228:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800222a:	2b00      	cmp	r3, #0
 800222c:	d15f      	bne.n	80022ee <osMessageQueueNew+0xdc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05c      	beq.n	80022ee <osMessageQueueNew+0xdc>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d059      	beq.n	80022ee <osMessageQueueNew+0xdc>
    mem = -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d029      	beq.n	800229a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <osMessageQueueNew+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b4f      	cmp	r3, #79	; 0x4f
 8002254:	d90e      	bls.n	8002274 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <osMessageQueueNew+0x62>
        mem = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e014      	b.n	800229e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d110      	bne.n	800229e <osMessageQueueNew+0x8c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10c      	bne.n	800229e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <osMessageQueueNew+0x8c>
          mem = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e001      	b.n	800229e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d10b      	bne.n	80022bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2100      	movs	r1, #0
 80022ae:	9100      	str	r1, [sp, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa2e 	bl	8002714 <xQueueGenericCreateStatic>
 80022b8:	61f8      	str	r0, [r7, #28]
 80022ba:	e008      	b.n	80022ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80022c2:	2200      	movs	r2, #0
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fa9c 	bl	8002804 <xQueueGenericCreate>
 80022cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e001      	b.n	80022e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80022e6:	6979      	ldr	r1, [r7, #20]
 80022e8:	69f8      	ldr	r0, [r7, #28]
 80022ea:	f000 fef3 	bl	80030d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80022ee:	69fb      	ldr	r3, [r7, #28]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002310:	f3ef 8305 	mrs	r3, IPSR
 8002314:	617b      	str	r3, [r7, #20]
  return(result);
 8002316:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002318:	2b00      	cmp	r3, #0
 800231a:	d028      	beq.n	800236e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <osMessageQueuePut+0x36>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <osMessageQueuePut+0x36>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800232e:	f06f 0303 	mvn.w	r3, #3
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e038      	b.n	80023a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800233a:	f107 0210 	add.w	r2, r7, #16
 800233e:	2300      	movs	r3, #0
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	69b8      	ldr	r0, [r7, #24]
 8002344:	f000 fbba 	bl	8002abc <xQueueGenericSendFromISR>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d003      	beq.n	8002356 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800234e:	f06f 0302 	mvn.w	r3, #2
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e028      	b.n	80023a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d025      	beq.n	80023a8 <osMessageQueuePut+0xb0>
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <osMessageQueuePut+0xbc>)
 800235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	e01c      	b.n	80023a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <osMessageQueuePut+0x82>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800237a:	f06f 0303 	mvn.w	r3, #3
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	e012      	b.n	80023a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002382:	2300      	movs	r3, #0
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	69b8      	ldr	r0, [r7, #24]
 800238a:	f000 fa99 	bl	80028c0 <xQueueGenericSend>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d009      	beq.n	80023a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800239a:	f06f 0301 	mvn.w	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	e002      	b.n	80023a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80023a2:	f06f 0302 	mvn.w	r3, #2
 80023a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80023a8:	69fb      	ldr	r3, [r7, #28]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000ed04 	.word	0xe000ed04

080023b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ce:	f3ef 8305 	mrs	r3, IPSR
 80023d2:	617b      	str	r3, [r7, #20]
  return(result);
 80023d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <osMessageQueueGet+0x34>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <osMessageQueueGet+0x34>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80023ec:	f06f 0303 	mvn.w	r3, #3
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e037      	b.n	8002464 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	461a      	mov	r2, r3
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	69b8      	ldr	r0, [r7, #24]
 8002402:	f000 fcd7 	bl	8002db4 <xQueueReceiveFromISR>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d003      	beq.n	8002414 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800240c:	f06f 0302 	mvn.w	r3, #2
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e027      	b.n	8002464 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <osMessageQueueGet+0xac>
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <osMessageQueueGet+0xb8>)
 800241c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	e01b      	b.n	8002464 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <osMessageQueueGet+0x80>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002438:	f06f 0303 	mvn.w	r3, #3
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e011      	b.n	8002464 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	69b8      	ldr	r0, [r7, #24]
 8002446:	f000 fbd5 	bl	8002bf4 <xQueueReceive>
 800244a:	4603      	mov	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d009      	beq.n	8002464 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002456:	f06f 0301 	mvn.w	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	e002      	b.n	8002464 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800245e:	f06f 0302 	mvn.w	r3, #2
 8002462:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002464:	69fb      	ldr	r3, [r7, #28]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <vApplicationGetIdleTaskMemory+0x30>)
 800248a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200000e4 	.word	0x200000e4
 80024a4:	2000018c 	.word	0x2000018c

080024a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80024b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <vApplicationGetTimerTaskMemory+0x30>)
 80024be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	2000038c 	.word	0x2000038c
 80024d8:	20000434 	.word	0x20000434

080024dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0208 	add.w	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0208 	add.w	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f103 0208 	add.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d103      	bne.n	800259e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e00c      	b.n	80025b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3308      	adds	r3, #8
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e002      	b.n	80025ac <vListInsert+0x2e>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d2f6      	bcs.n	80025a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6892      	ldr	r2, [r2, #8]
 8002606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6852      	ldr	r2, [r2, #4]
 8002610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d103      	bne.n	8002624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800266e:	f002 f931 	bl	80048d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	441a      	add	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	3b01      	subs	r3, #1
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	441a      	add	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01a      	beq.n	8002702 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3310      	adds	r3, #16
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 f9e3 	bl	8003a9c <xTaskRemoveFromEventList>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <xQueueGenericReset+0xcc>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	e009      	b.n	8002702 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3310      	adds	r3, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fef2 	bl	80024dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3324      	adds	r3, #36	; 0x24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff feed 	bl	80024dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002702:	f002 f917 	bl	8004934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	e000ed04 	.word	0xe000ed04

08002714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08e      	sub	sp, #56	; 0x38
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <xQueueGenericCreateStatic+0x52>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <xQueueGenericCreateStatic+0x56>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <xQueueGenericCreateStatic+0x58>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	623b      	str	r3, [r7, #32]
}
 8002782:	bf00      	nop
 8002784:	e7fe      	b.n	8002784 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <xQueueGenericCreateStatic+0x7e>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xQueueGenericCreateStatic+0x82>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueGenericCreateStatic+0x84>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61fb      	str	r3, [r7, #28]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027b2:	2350      	movs	r3, #80	; 0x50
 80027b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b50      	cmp	r3, #80	; 0x50
 80027ba:	d00a      	beq.n	80027d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61bb      	str	r3, [r7, #24]
}
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80027d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f83f 	bl	8002878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3730      	adds	r7, #48	; 0x30
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	613b      	str	r3, [r7, #16]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3350      	adds	r3, #80	; 0x50
 800283c:	4618      	mov	r0, r3
 800283e:	f002 f96b 	bl	8004b18 <pvPortMalloc>
 8002842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d011      	beq.n	800286e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3350      	adds	r3, #80	; 0x50
 8002852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800285c:	79fa      	ldrb	r2, [r7, #7]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f805 	bl	8002878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800286e:	69bb      	ldr	r3, [r7, #24]
	}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e002      	b.n	800289a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028a6:	2101      	movs	r1, #1
 80028a8:	69b8      	ldr	r0, [r7, #24]
 80028aa:	f7ff fecb 	bl	8002644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	; 0x38
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ce:	2300      	movs	r3, #0
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericSend+0x32>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <xQueueGenericSend+0x40>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <xQueueGenericSend+0x44>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <xQueueGenericSend+0x46>
 8002904:	2300      	movs	r3, #0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <xQueueGenericSend+0x60>
	__asm volatile
 800290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290e:	f383 8811 	msr	BASEPRI, r3
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800291c:	bf00      	nop
 800291e:	e7fe      	b.n	800291e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d103      	bne.n	800292e <xQueueGenericSend+0x6e>
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <xQueueGenericSend+0x72>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueGenericSend+0x74>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueGenericSend+0x8e>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	623b      	str	r3, [r7, #32]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800294e:	f001 fa67 	bl	8003e20 <xTaskGetSchedulerState>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <xQueueGenericSend+0x9e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xQueueGenericSend+0xa2>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <xQueueGenericSend+0xa4>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueGenericSend+0xbe>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61fb      	str	r3, [r7, #28]
}
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800297e:	f001 ffa9 	bl	80048d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <xQueueGenericSend+0xd4>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d129      	bne.n	80029e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299a:	f000 fa8b 	bl	8002eb4 <prvCopyDataToQueue>
 800299e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	3324      	adds	r3, #36	; 0x24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 f875 	bl	8003a9c <xTaskRemoveFromEventList>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <xQueueGenericSend+0x1f8>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	e00a      	b.n	80029e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <xQueueGenericSend+0x1f8>)
 80029d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029e0:	f001 ffa8 	bl	8004934 <vPortExitCritical>
				return pdPASS;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e063      	b.n	8002ab0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029ee:	f001 ffa1 	bl	8004934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e05c      	b.n	8002ab0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f8af 	bl	8003b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a0a:	f001 ff93 	bl	8004934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a0e:	f000 fe1b 	bl	8003648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a12:	f001 ff5f 	bl	80048d4 <vPortEnterCritical>
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d103      	bne.n	8002a2c <xQueueGenericSend+0x16c>
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d103      	bne.n	8002a42 <xQueueGenericSend+0x182>
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a42:	f001 ff77 	bl	8004934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f89e 	bl	8003b90 <xTaskCheckForTimeOut>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d124      	bne.n	8002aa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5c:	f000 fb22 	bl	80030a4 <prvIsQueueFull>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d018      	beq.n	8002a98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	3310      	adds	r3, #16
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ffc4 	bl	80039fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a76:	f000 faad 	bl	8002fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a7a:	f000 fdf3 	bl	8003664 <xTaskResumeAll>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f af7c 	bne.w	800297e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <xQueueGenericSend+0x1f8>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	e772      	b.n	800297e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9a:	f000 fa9b 	bl	8002fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a9e:	f000 fde1 	bl	8003664 <xTaskResumeAll>
 8002aa2:	e76c      	b.n	800297e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aa6:	f000 fa95 	bl	8002fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aaa:	f000 fddb 	bl	8003664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3738      	adds	r7, #56	; 0x38
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b090      	sub	sp, #64	; 0x40
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <xQueueGenericSendFromISR+0x3c>
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <xQueueGenericSendFromISR+0x40>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <xQueueGenericSendFromISR+0x42>
 8002afc:	2300      	movs	r3, #0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b14:	bf00      	nop
 8002b16:	e7fe      	b.n	8002b16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d103      	bne.n	8002b26 <xQueueGenericSendFromISR+0x6a>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <xQueueGenericSendFromISR+0x6e>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <xQueueGenericSendFromISR+0x70>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	623b      	str	r3, [r7, #32]
}
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b46:	f001 ffa7 	bl	8004a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <xQueueGenericSendFromISR+0xbc>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d12f      	bne.n	8002bd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b8e:	f000 f991 	bl	8002eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d112      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d016      	beq.n	8002bd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 ff77 	bl	8003a9c <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b25a      	sxtb	r2, r3
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002bd6:	e001      	b.n	8002bdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002be6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3740      	adds	r7, #64	; 0x40
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <xQueueReceive+0x30>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	623b      	str	r3, [r7, #32]
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueReceive+0x3e>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <xQueueReceive+0x42>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueReceive+0x44>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueReceive+0x5e>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61fb      	str	r3, [r7, #28]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c52:	f001 f8e5 	bl	8003e20 <xTaskGetSchedulerState>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <xQueueReceive+0x6e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <xQueueReceive+0x72>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueReceive+0x74>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xQueueReceive+0x8e>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61bb      	str	r3, [r7, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c82:	f001 fe27 	bl	80048d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01f      	beq.n	8002cd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c96:	f000 f977 	bl	8002f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00f      	beq.n	8002cca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	3310      	adds	r3, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fef4 	bl	8003a9c <xTaskRemoveFromEventList>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <xQueueReceive+0x1bc>)
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cca:	f001 fe33 	bl	8004934 <vPortExitCritical>
				return pdPASS;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e069      	b.n	8002da6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cd8:	f001 fe2c 	bl	8004934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e062      	b.n	8002da6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 ff3a 	bl	8003b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cf4:	f001 fe1e 	bl	8004934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cf8:	f000 fca6 	bl	8003648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cfc:	f001 fdea 	bl	80048d4 <vPortEnterCritical>
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d103      	bne.n	8002d16 <xQueueReceive+0x122>
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d103      	bne.n	8002d2c <xQueueReceive+0x138>
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d2c:	f001 fe02 	bl	8004934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ff29 	bl	8003b90 <xTaskCheckForTimeOut>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d123      	bne.n	8002d8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d46:	f000 f997 	bl	8003078 <prvIsQueueEmpty>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d017      	beq.n	8002d80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	3324      	adds	r3, #36	; 0x24
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe4f 	bl	80039fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d60:	f000 f938 	bl	8002fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d64:	f000 fc7e 	bl	8003664 <xTaskResumeAll>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d189      	bne.n	8002c82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <xQueueReceive+0x1bc>)
 8002d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	e780      	b.n	8002c82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d82:	f000 f927 	bl	8002fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d86:	f000 fc6d 	bl	8003664 <xTaskResumeAll>
 8002d8a:	e77a      	b.n	8002c82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8e:	f000 f921 	bl	8002fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d92:	f000 fc67 	bl	8003664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d98:	f000 f96e 	bl	8003078 <prvIsQueueEmpty>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f43f af6f 	beq.w	8002c82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002da4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3730      	adds	r7, #48	; 0x30
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	623b      	str	r3, [r7, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <xQueueReceiveFromISR+0x3a>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueReceiveFromISR+0x3e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueReceiveFromISR+0x40>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e0e:	f001 fe43 	bl	8004a98 <vPortValidateInterruptPriority>
	__asm volatile
 8002e12:	f3ef 8211 	mrs	r2, BASEPRI
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61ba      	str	r2, [r7, #24]
 8002e28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002e2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02f      	beq.n	8002e9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e48:	f000 f89e 	bl	8002f88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	1e5a      	subs	r2, r3, #1
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d112      	bne.n	8002e84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	3310      	adds	r3, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fe16 	bl	8003a9c <xTaskRemoveFromEventList>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	b25a      	sxtb	r2, r3
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002e94:	2301      	movs	r3, #1
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
 8002e98:	e001      	b.n	8002e9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f383 8811 	msr	BASEPRI, r3
}
 8002ea8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3738      	adds	r7, #56	; 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d14d      	bne.n	8002f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 ffbc 	bl	8003e5c <xTaskPriorityDisinherit>
 8002ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e043      	b.n	8002f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d119      	bne.n	8002f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6858      	ldr	r0, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	461a      	mov	r2, r3
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	f002 f878 	bl	8004ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	441a      	add	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d32b      	bcc.n	8002f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e026      	b.n	8002f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68d8      	ldr	r0, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	461a      	mov	r2, r3
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	f002 f85e 	bl	8004ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	425b      	negs	r3, r3
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	425b      	negs	r3, r3
 8002f5e:	441a      	add	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d105      	bne.n	8002f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f7e:	697b      	ldr	r3, [r7, #20]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	441a      	add	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d303      	bcc.n	8002fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68d9      	ldr	r1, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f002 f814 	bl	8004ff4 <memcpy>
	}
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fdc:	f001 fc7a 	bl	80048d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fe8:	e011      	b.n	800300e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3324      	adds	r3, #36	; 0x24
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fd50 	bl	8003a9c <xTaskRemoveFromEventList>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003002:	f000 fe27 	bl	8003c54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	3b01      	subs	r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	dce9      	bgt.n	8002fea <prvUnlockQueue+0x16>
 8003016:	e000      	b.n	800301a <prvUnlockQueue+0x46>
					break;
 8003018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003022:	f001 fc87 	bl	8004934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003026:	f001 fc55 	bl	80048d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003032:	e011      	b.n	8003058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3310      	adds	r3, #16
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd2b 	bl	8003a9c <xTaskRemoveFromEventList>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800304c:	f000 fe02 	bl	8003c54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003050:	7bbb      	ldrb	r3, [r7, #14]
 8003052:	3b01      	subs	r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800305c:	2b00      	cmp	r3, #0
 800305e:	dce9      	bgt.n	8003034 <prvUnlockQueue+0x60>
 8003060:	e000      	b.n	8003064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800306c:	f001 fc62 	bl	8004934 <vPortExitCritical>
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003080:	f001 fc28 	bl	80048d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e001      	b.n	8003096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003096:	f001 fc4d 	bl	8004934 <vPortExitCritical>

	return xReturn;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030ac:	f001 fc12 	bl	80048d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d102      	bne.n	80030c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e001      	b.n	80030c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030c6:	f001 fc35 	bl	8004934 <vPortExitCritical>

	return xReturn;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e014      	b.n	800310e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <vQueueAddToRegistry+0x50>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <vQueueAddToRegistry+0x50>)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <vQueueAddToRegistry+0x50>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003106:	e006      	b.n	8003116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b07      	cmp	r3, #7
 8003112:	d9e7      	bls.n	80030e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000834 	.word	0x20000834

08003128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003138:	f001 fbcc 	bl	80048d4 <vPortEnterCritical>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003142:	b25b      	sxtb	r3, r3
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d103      	bne.n	8003152 <vQueueWaitForMessageRestricted+0x2a>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d103      	bne.n	8003168 <vQueueWaitForMessageRestricted+0x40>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003168:	f001 fbe4 	bl	8004934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fc61 	bl	8003a44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff26 	bl	8002fd4 <prvUnlockQueue>
	}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af04      	add	r7, sp, #16
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	623b      	str	r3, [r7, #32]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fb      	str	r3, [r7, #28]
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031d6:	23a8      	movs	r3, #168	; 0xa8
 80031d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2ba8      	cmp	r3, #168	; 0xa8
 80031de:	d00a      	beq.n	80031f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61bb      	str	r3, [r7, #24]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01e      	beq.n	800323c <xTaskCreateStatic+0xac>
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2202      	movs	r2, #2
 8003212:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003216:	2300      	movs	r3, #0
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f850 	bl	80032d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003236:	f000 f8f3 	bl	8003420 <prvAddNewTaskToReadyList>
 800323a:	e001      	b.n	8003240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003240:	697b      	ldr	r3, [r7, #20]
	}
 8003242:	4618      	mov	r0, r3
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08c      	sub	sp, #48	; 0x30
 800324e:	af04      	add	r7, sp, #16
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fc5a 	bl	8004b18 <pvPortMalloc>
 8003264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800326c:	20a8      	movs	r0, #168	; 0xa8
 800326e:	f001 fc53 	bl	8004b18 <pvPortMalloc>
 8003272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
 8003280:	e005      	b.n	800328e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f001 fd14 	bl	8004cb0 <vPortFree>
 8003288:	e001      	b.n	800328e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	2300      	movs	r3, #0
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f80e 	bl	80032d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f000 f8b1 	bl	8003420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e002      	b.n	80032ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032ca:	69bb      	ldr	r3, [r7, #24]
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	21a5      	movs	r1, #165	; 0xa5
 80032ee:	f001 fdfd 	bl	8004eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032fc:	3b01      	subs	r3, #1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	617b      	str	r3, [r7, #20]
}
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01f      	beq.n	8003372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e012      	b.n	800335e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	3334      	adds	r3, #52	; 0x34
 8003348:	460a      	mov	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d9e9      	bls.n	8003338 <prvInitialiseNewTask+0x64>
 8003364:	e000      	b.n	8003368 <prvInitialiseNewTask+0x94>
			{
				break;
 8003366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003370:	e003      	b.n	800337a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	2b37      	cmp	r3, #55	; 0x37
 800337e:	d901      	bls.n	8003384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003380:	2337      	movs	r3, #55	; 0x37
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	2200      	movs	r2, #0
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f8be 	bl	800251c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	3318      	adds	r3, #24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f8b9 	bl	800251c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	3354      	adds	r3, #84	; 0x54
 80033d4:	224c      	movs	r2, #76	; 0x4c
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fd87 	bl	8004eec <memset>
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <prvInitialiseNewTask+0x140>)
 80033e2:	659a      	str	r2, [r3, #88]	; 0x58
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <prvInitialiseNewTask+0x144>)
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <prvInitialiseNewTask+0x148>)
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	69b8      	ldr	r0, [r7, #24]
 80033f6:	f001 f941 	bl	800467c <pxPortInitialiseStack>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800340c:	bf00      	nop
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20001e68 	.word	0x20001e68
 8003418:	20001ed0 	.word	0x20001ed0
 800341c:	20001f38 	.word	0x20001f38

08003420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003428:	f001 fa54 	bl	80048d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800342c:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	4a2c      	ldr	r2, [pc, #176]	; (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 8003434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d110      	bne.n	800346e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800344c:	f000 fc26 	bl	8003c9c <prvInitialiseTaskLists>
 8003450:	e00d      	b.n	800346e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <prvAddNewTaskToReadyList+0xcc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d802      	bhi.n	800346e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 8003476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <prvAddNewTaskToReadyList+0xd4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d903      	bls.n	8003494 <prvAddNewTaskToReadyList+0x74>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <prvAddNewTaskToReadyList+0xd4>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <prvAddNewTaskToReadyList+0xd8>)
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f7ff f843 	bl	8002536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b0:	f001 fa40 	bl	8004934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <prvAddNewTaskToReadyList+0xcc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d207      	bcs.n	80034da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <prvAddNewTaskToReadyList+0xdc>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000d48 	.word	0x20000d48
 80034e8:	20000874 	.word	0x20000874
 80034ec:	20000d54 	.word	0x20000d54
 80034f0:	20000d64 	.word	0x20000d64
 80034f4:	20000d50 	.word	0x20000d50
 80034f8:	20000878 	.word	0x20000878
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <vTaskDelay+0x60>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <vTaskDelay+0x30>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60bb      	str	r3, [r7, #8]
}
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003530:	f000 f88a 	bl	8003648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003534:	2100      	movs	r1, #0
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fcfe 	bl	8003f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800353c:	f000 f892 	bl	8003664 <xTaskResumeAll>
 8003540:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <vTaskDelay+0x64>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000d70 	.word	0x20000d70
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003576:	463a      	mov	r2, r7
 8003578:	1d39      	adds	r1, r7, #4
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe ff78 	bl	8002474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	9202      	str	r2, [sp, #8]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	460a      	mov	r2, r1
 8003596:	4924      	ldr	r1, [pc, #144]	; (8003628 <vTaskStartScheduler+0xc0>)
 8003598:	4824      	ldr	r0, [pc, #144]	; (800362c <vTaskStartScheduler+0xc4>)
 800359a:	f7ff fdf9 	bl	8003190 <xTaskCreateStatic>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <vTaskStartScheduler+0xc8>)
 80035a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <vTaskStartScheduler+0xc8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e001      	b.n	80035b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035bc:	f000 fd10 	bl	8003fe0 <xTimerCreateTimerTask>
 80035c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11b      	bne.n	8003600 <vTaskStartScheduler+0x98>
	__asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	613b      	str	r3, [r7, #16]
}
 80035da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <vTaskStartScheduler+0xcc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3354      	adds	r3, #84	; 0x54
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <vTaskStartScheduler+0xd0>)
 80035e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <vTaskStartScheduler+0xd4>)
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <vTaskStartScheduler+0xd8>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <vTaskStartScheduler+0xdc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035fa:	f001 f8c9 	bl	8004790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035fe:	e00e      	b.n	800361e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d10a      	bne.n	800361e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <vTaskStartScheduler+0xb4>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	080050f8 	.word	0x080050f8
 800362c:	08003c6d 	.word	0x08003c6d
 8003630:	20000d6c 	.word	0x20000d6c
 8003634:	20000874 	.word	0x20000874
 8003638:	2000005c 	.word	0x2000005c
 800363c:	20000d68 	.word	0x20000d68
 8003640:	20000d54 	.word	0x20000d54
 8003644:	20000d4c 	.word	0x20000d4c

08003648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <vTaskSuspendAll+0x18>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a03      	ldr	r2, [pc, #12]	; (8003660 <vTaskSuspendAll+0x18>)
 8003654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	20000d70 	.word	0x20000d70

08003664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003672:	4b42      	ldr	r3, [pc, #264]	; (800377c <xTaskResumeAll+0x118>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <xTaskResumeAll+0x2c>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	603b      	str	r3, [r7, #0]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003690:	f001 f920 	bl	80048d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <xTaskResumeAll+0x118>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a38      	ldr	r2, [pc, #224]	; (800377c <xTaskResumeAll+0x118>)
 800369c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <xTaskResumeAll+0x118>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d162      	bne.n	800376c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <xTaskResumeAll+0x11c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d05e      	beq.n	800376c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ae:	e02f      	b.n	8003710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	4b34      	ldr	r3, [pc, #208]	; (8003784 <xTaskResumeAll+0x120>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3318      	adds	r3, #24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe ff97 	bl	80025f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe ff92 	bl	80025f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <xTaskResumeAll+0x124>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d903      	bls.n	80036e0 <xTaskResumeAll+0x7c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <xTaskResumeAll+0x124>)
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4a27      	ldr	r2, [pc, #156]	; (800378c <xTaskResumeAll+0x128>)
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7fe ff1d 	bl	8002536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <xTaskResumeAll+0x12c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <xTaskResumeAll+0x130>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003710:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <xTaskResumeAll+0x120>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1cb      	bne.n	80036b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800371e:	f000 fb5f 	bl	8003de0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <xTaskResumeAll+0x134>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800372e:	f000 f847 	bl	80037c0 <xTaskIncrementTick>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <xTaskResumeAll+0x130>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3b01      	subs	r3, #1
 8003742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f1      	bne.n	800372e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <xTaskResumeAll+0x134>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <xTaskResumeAll+0x130>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d009      	beq.n	800376c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <xTaskResumeAll+0x138>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800376c:	f001 f8e2 	bl	8004934 <vPortExitCritical>

	return xAlreadyYielded;
 8003770:	68bb      	ldr	r3, [r7, #8]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000d70 	.word	0x20000d70
 8003780:	20000d48 	.word	0x20000d48
 8003784:	20000d08 	.word	0x20000d08
 8003788:	20000d50 	.word	0x20000d50
 800378c:	20000878 	.word	0x20000878
 8003790:	20000874 	.word	0x20000874
 8003794:	20000d5c 	.word	0x20000d5c
 8003798:	20000d58 	.word	0x20000d58
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <xTaskGetTickCount+0x1c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037ac:	687b      	ldr	r3, [r7, #4]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000d4c 	.word	0x20000d4c

080037c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <xTaskIncrementTick+0x148>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 808f 	bne.w	80038f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037d4:	4b4d      	ldr	r3, [pc, #308]	; (800390c <xTaskIncrementTick+0x14c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037dc:	4a4b      	ldr	r2, [pc, #300]	; (800390c <xTaskIncrementTick+0x14c>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d120      	bne.n	800382a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037e8:	4b49      	ldr	r3, [pc, #292]	; (8003910 <xTaskIncrementTick+0x150>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <xTaskIncrementTick+0x48>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	603b      	str	r3, [r7, #0]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskIncrementTick+0x46>
 8003808:	4b41      	ldr	r3, [pc, #260]	; (8003910 <xTaskIncrementTick+0x150>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <xTaskIncrementTick+0x154>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3f      	ldr	r2, [pc, #252]	; (8003910 <xTaskIncrementTick+0x150>)
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <xTaskIncrementTick+0x154>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <xTaskIncrementTick+0x158>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <xTaskIncrementTick+0x158>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	f000 fadb 	bl	8003de0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <xTaskIncrementTick+0x15c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d349      	bcc.n	80038c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <xTaskIncrementTick+0x150>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <xTaskIncrementTick+0x15c>)
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	601a      	str	r2, [r3, #0]
					break;
 8003846:	e03f      	b.n	80038c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003848:	4b31      	ldr	r3, [pc, #196]	; (8003910 <xTaskIncrementTick+0x150>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d203      	bcs.n	8003868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003860:	4a2e      	ldr	r2, [pc, #184]	; (800391c <xTaskIncrementTick+0x15c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003866:	e02f      	b.n	80038c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	3304      	adds	r3, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe febf 	bl	80025f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3318      	adds	r3, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe feb6 	bl	80025f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <xTaskIncrementTick+0x160>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <xTaskIncrementTick+0xd8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <xTaskIncrementTick+0x160>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <xTaskIncrementTick+0x164>)
 80038a6:	441a      	add	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe fe41 	bl	8002536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <xTaskIncrementTick+0x168>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3b8      	bcc.n	8003834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c6:	e7b5      	b.n	8003834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038c8:	4b17      	ldr	r3, [pc, #92]	; (8003928 <xTaskIncrementTick+0x168>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	4915      	ldr	r1, [pc, #84]	; (8003924 <xTaskIncrementTick+0x164>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d901      	bls.n	80038e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <xTaskIncrementTick+0x16c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e004      	b.n	80038fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskIncrementTick+0x170>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <xTaskIncrementTick+0x170>)
 80038fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038fc:	697b      	ldr	r3, [r7, #20]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000d70 	.word	0x20000d70
 800390c:	20000d4c 	.word	0x20000d4c
 8003910:	20000d00 	.word	0x20000d00
 8003914:	20000d04 	.word	0x20000d04
 8003918:	20000d60 	.word	0x20000d60
 800391c:	20000d68 	.word	0x20000d68
 8003920:	20000d50 	.word	0x20000d50
 8003924:	20000878 	.word	0x20000878
 8003928:	20000874 	.word	0x20000874
 800392c:	20000d5c 	.word	0x20000d5c
 8003930:	20000d58 	.word	0x20000d58

08003934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <vTaskSwitchContext+0xb0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <vTaskSwitchContext+0xb4>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003948:	e046      	b.n	80039d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <vTaskSwitchContext+0xb4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <vTaskSwitchContext+0xb8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e010      	b.n	800397a <vTaskSwitchContext+0x46>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x40>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x3e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	491d      	ldr	r1, [pc, #116]	; (80039f0 <vTaskSwitchContext+0xbc>)
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0e4      	beq.n	8003958 <vTaskSwitchContext+0x24>
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <vTaskSwitchContext+0xbc>)
 800399a:	4413      	add	r3, r2
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	3308      	adds	r3, #8
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d104      	bne.n	80039be <vTaskSwitchContext+0x8a>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <vTaskSwitchContext+0xc0>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <vTaskSwitchContext+0xb8>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <vTaskSwitchContext+0xc0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3354      	adds	r3, #84	; 0x54
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <vTaskSwitchContext+0xc4>)
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	20000d70 	.word	0x20000d70
 80039e8:	20000d5c 	.word	0x20000d5c
 80039ec:	20000d50 	.word	0x20000d50
 80039f0:	20000878 	.word	0x20000878
 80039f4:	20000874 	.word	0x20000874
 80039f8:	2000005c 	.word	0x2000005c

080039fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60fb      	str	r3, [r7, #12]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <vTaskPlaceOnEventList+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3318      	adds	r3, #24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe fda7 	bl	800257e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a30:	2101      	movs	r1, #1
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f000 fa80 	bl	8003f38 <prvAddCurrentTaskToDelayedList>
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000874 	.word	0x20000874

08003a44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	617b      	str	r3, [r7, #20]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3318      	adds	r3, #24
 8003a72:	4619      	mov	r1, r3
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7fe fd5e 	bl	8002536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68b8      	ldr	r0, [r7, #8]
 8003a8a:	f000 fa55 	bl	8003f38 <prvAddCurrentTaskToDelayedList>
	}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000874 	.word	0x20000874

08003a9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	60fb      	str	r3, [r7, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	3318      	adds	r3, #24
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fd8f 	bl	80025f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <xTaskRemoveFromEventList+0xb0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fd86 	bl	80025f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <xTaskRemoveFromEventList+0xb4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <xTaskRemoveFromEventList+0x5c>
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <xTaskRemoveFromEventList+0xb4>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <xTaskRemoveFromEventList+0xb8>)
 8003b06:	441a      	add	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7fe fd11 	bl	8002536 <vListInsertEnd>
 8003b14:	e005      	b.n	8003b22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	3318      	adds	r3, #24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480e      	ldr	r0, [pc, #56]	; (8003b58 <xTaskRemoveFromEventList+0xbc>)
 8003b1e:	f7fe fd0a 	bl	8002536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <xTaskRemoveFromEventList+0xc0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d905      	bls.n	8003b3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <xTaskRemoveFromEventList+0xc4>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e001      	b.n	8003b40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b40:	697b      	ldr	r3, [r7, #20]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000d70 	.word	0x20000d70
 8003b50:	20000d50 	.word	0x20000d50
 8003b54:	20000878 	.word	0x20000878
 8003b58:	20000d08 	.word	0x20000d08
 8003b5c:	20000874 	.word	0x20000874
 8003b60:	20000d5c 	.word	0x20000d5c

08003b64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <vTaskInternalSetTimeOutState+0x24>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <vTaskInternalSetTimeOutState+0x28>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000d60 	.word	0x20000d60
 8003b8c:	20000d4c 	.word	0x20000d4c

08003b90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	60fb      	str	r3, [r7, #12]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bd2:	f000 fe7f 	bl	80048d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <xTaskCheckForTimeOut+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d102      	bne.n	8003bf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e023      	b.n	8003c3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <xTaskCheckForTimeOut+0xc0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d007      	beq.n	8003c12 <xTaskCheckForTimeOut+0x82>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e015      	b.n	8003c3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d20b      	bcs.n	8003c34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff9b 	bl	8003b64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e004      	b.n	8003c3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c3e:	f000 fe79 	bl	8004934 <vPortExitCritical>

	return xReturn;
 8003c42:	69fb      	ldr	r3, [r7, #28]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000d4c 	.word	0x20000d4c
 8003c50:	20000d60 	.word	0x20000d60

08003c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <vTaskMissedYield+0x14>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	20000d5c 	.word	0x20000d5c

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c74:	f000 f852 	bl	8003d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <prvIdleTask+0x28>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <prvIdleTask+0x2c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c90:	e7f0      	b.n	8003c74 <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	20000878 	.word	0x20000878
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <prvInitialiseTaskLists+0x60>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fc10 	bl	80024dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b37      	cmp	r3, #55	; 0x37
 8003cc6:	d9ef      	bls.n	8003ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cca:	f7fe fc07 	bl	80024dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cce:	480d      	ldr	r0, [pc, #52]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cd0:	f7fe fc04 	bl	80024dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <prvInitialiseTaskLists+0x6c>)
 8003cd6:	f7fe fc01 	bl	80024dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cda:	480c      	ldr	r0, [pc, #48]	; (8003d0c <prvInitialiseTaskLists+0x70>)
 8003cdc:	f7fe fbfe 	bl	80024dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <prvInitialiseTaskLists+0x74>)
 8003ce2:	f7fe fbfb 	bl	80024dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <prvInitialiseTaskLists+0x78>)
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvInitialiseTaskLists+0x7c>)
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000878 	.word	0x20000878
 8003d00:	20000cd8 	.word	0x20000cd8
 8003d04:	20000cec 	.word	0x20000cec
 8003d08:	20000d08 	.word	0x20000d08
 8003d0c:	20000d1c 	.word	0x20000d1c
 8003d10:	20000d34 	.word	0x20000d34
 8003d14:	20000d00 	.word	0x20000d00
 8003d18:	20000d04 	.word	0x20000d04

08003d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d22:	e019      	b.n	8003d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d24:	f000 fdd6 	bl	80048d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <prvCheckTasksWaitingTermination+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fc5b 	bl	80025f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d4e:	f000 fdf1 	bl	8004934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f810 	bl	8003d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000d1c 	.word	0x20000d1c
 8003d70:	20000d48 	.word	0x20000d48
 8003d74:	20000d30 	.word	0x20000d30

08003d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3354      	adds	r3, #84	; 0x54
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f8b9 	bl	8004efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d108      	bne.n	8003da6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 ff89 	bl	8004cb0 <vPortFree>
				vPortFree( pxTCB );
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 ff86 	bl	8004cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003da4:	e018      	b.n	8003dd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d103      	bne.n	8003db8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 ff7d 	bl	8004cb0 <vPortFree>
	}
 8003db6:	e00f      	b.n	8003dd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d00a      	beq.n	8003dd8 <prvDeleteTCB+0x60>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <prvDeleteTCB+0x5e>
	}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <prvResetNextTaskUnblockTime+0x38>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvResetNextTaskUnblockTime+0x3c>)
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295
 8003df6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003df8:	e008      	b.n	8003e0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <prvResetNextTaskUnblockTime+0x38>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <prvResetNextTaskUnblockTime+0x3c>)
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	20000d00 	.word	0x20000d00
 8003e1c:	20000d68 	.word	0x20000d68

08003e20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <xTaskGetSchedulerState+0x34>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	e008      	b.n	8003e46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <xTaskGetSchedulerState+0x38>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	e001      	b.n	8003e46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e46:	687b      	ldr	r3, [r7, #4]
	}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	20000d54 	.word	0x20000d54
 8003e58:	20000d70 	.word	0x20000d70

08003e5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d056      	beq.n	8003f20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e72:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <xTaskPriorityDisinherit+0xd0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d00a      	beq.n	8003e92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60bb      	str	r3, [r7, #8]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d02c      	beq.n	8003f20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d128      	bne.n	8003f20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fb8c 	bl	80025f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <xTaskPriorityDisinherit+0xd4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d903      	bls.n	8003f00 <xTaskPriorityDisinherit+0xa4>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <xTaskPriorityDisinherit+0xd4>)
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <xTaskPriorityDisinherit+0xd8>)
 8003f0e:	441a      	add	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f7fe fb0d 	bl	8002536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f20:	697b      	ldr	r3, [r7, #20]
	}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000874 	.word	0x20000874
 8003f30:	20000d50 	.word	0x20000d50
 8003f34:	20000878 	.word	0x20000878

08003f38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fb4e 	bl	80025f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d10a      	bne.n	8003f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4819      	ldr	r0, [pc, #100]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f6c:	f7fe fae3 	bl	8002536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f70:	e026      	b.n	8003fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d209      	bcs.n	8003f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fe faf1 	bl	800257e <vListInsert>
}
 8003f9c:	e010      	b.n	8003fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f7fe fae7 	bl	800257e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d202      	bcs.n	8003fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000d4c 	.word	0x20000d4c
 8003fcc:	20000874 	.word	0x20000874
 8003fd0:	20000d34 	.word	0x20000d34
 8003fd4:	20000d04 	.word	0x20000d04
 8003fd8:	20000d00 	.word	0x20000d00
 8003fdc:	20000d68 	.word	0x20000d68

08003fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fea:	f000 fb07 	bl	80045fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <xTimerCreateTimerTask+0x80>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d021      	beq.n	800403a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ffe:	1d3a      	adds	r2, r7, #4
 8004000:	f107 0108 	add.w	r1, r7, #8
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fa4d 	bl	80024a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	9202      	str	r2, [sp, #8]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	2302      	movs	r3, #2
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	460a      	mov	r2, r1
 8004020:	4910      	ldr	r1, [pc, #64]	; (8004064 <xTimerCreateTimerTask+0x84>)
 8004022:	4811      	ldr	r0, [pc, #68]	; (8004068 <xTimerCreateTimerTask+0x88>)
 8004024:	f7ff f8b4 	bl	8003190 <xTaskCreateStatic>
 8004028:	4603      	mov	r3, r0
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <xTimerCreateTimerTask+0x8c>)
 800402c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <xTimerCreateTimerTask+0x8c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	613b      	str	r3, [r7, #16]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004056:	697b      	ldr	r3, [r7, #20]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000da4 	.word	0x20000da4
 8004064:	08005100 	.word	0x08005100
 8004068:	080041a5 	.word	0x080041a5
 800406c:	20000da8 	.word	0x20000da8

08004070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	623b      	str	r3, [r7, #32]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <xTimerGenericCommand+0x98>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02a      	beq.n	80040fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	dc18      	bgt.n	80040ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040b8:	f7ff feb2 	bl	8003e20 <xTaskGetSchedulerState>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d109      	bne.n	80040d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <xTimerGenericCommand+0x98>)
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f107 0110 	add.w	r1, r7, #16
 80040ca:	2300      	movs	r3, #0
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	f7fe fbf7 	bl	80028c0 <xQueueGenericSend>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24
 80040d4:	e012      	b.n	80040fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <xTimerGenericCommand+0x98>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f107 0110 	add.w	r1, r7, #16
 80040de:	2300      	movs	r3, #0
 80040e0:	2200      	movs	r2, #0
 80040e2:	f7fe fbed 	bl	80028c0 <xQueueGenericSend>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24
 80040e8:	e008      	b.n	80040fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <xTimerGenericCommand+0x98>)
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f107 0110 	add.w	r1, r7, #16
 80040f2:	2300      	movs	r3, #0
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	f7fe fce1 	bl	8002abc <xQueueGenericSendFromISR>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000da4 	.word	0x20000da4

0800410c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <prvProcessExpiredTimer+0x94>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fa63 	bl	80025f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d022      	beq.n	800417e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	18d1      	adds	r1, r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f000 f8d1 	bl	80042ec <prvInsertTimerInActiveList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01f      	beq.n	8004190 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	2100      	movs	r1, #0
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff88 	bl	8004070 <xTimerGenericCommand>
 8004160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d113      	bne.n	8004190 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60fb      	str	r3, [r7, #12]
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	4798      	blx	r3
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000d9c 	.word	0x20000d9c

080041a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f857 	bl	8004264 <prvGetNextExpireTime>
 80041b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4619      	mov	r1, r3
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f803 	bl	80041c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041c2:	f000 f8d5 	bl	8004370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041c6:	e7f1      	b.n	80041ac <prvTimerTask+0x8>

080041c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041d2:	f7ff fa39 	bl	8003648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f866 	bl	80042ac <prvSampleTimeNow>
 80041e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d130      	bne.n	800424a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <prvProcessTimerOrBlockTask+0x3c>
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d806      	bhi.n	8004204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041f6:	f7ff fa35 	bl	8003664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041fa:	68f9      	ldr	r1, [r7, #12]
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff85 	bl	800410c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004202:	e024      	b.n	800424e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <prvProcessTimerOrBlockTask+0x90>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <prvProcessTimerOrBlockTask+0x50>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <prvProcessTimerOrBlockTask+0x52>
 8004218:	2300      	movs	r3, #0
 800421a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <prvProcessTimerOrBlockTask+0x94>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	f7fe ff7d 	bl	8003128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800422e:	f7ff fa19 	bl	8003664 <xTaskResumeAll>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <prvProcessTimerOrBlockTask+0x98>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
}
 8004248:	e001      	b.n	800424e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800424a:	f7ff fa0b 	bl	8003664 <xTaskResumeAll>
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000da0 	.word	0x20000da0
 800425c:	20000da4 	.word	0x20000da4
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <prvGetNextExpireTime+0x44>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <prvGetNextExpireTime+0x16>
 8004276:	2201      	movs	r2, #1
 8004278:	e000      	b.n	800427c <prvGetNextExpireTime+0x18>
 800427a:	2200      	movs	r2, #0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <prvGetNextExpireTime+0x44>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e001      	b.n	8004298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000d9c 	.word	0x20000d9c

080042ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042b4:	f7ff fa74 	bl	80037a0 <xTaskGetTickCount>
 80042b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <prvSampleTimeNow+0x3c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d205      	bcs.n	80042d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042c4:	f000 f936 	bl	8004534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <prvSampleTimeNow+0x3c>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000dac 	.word	0x20000dac

080042ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d812      	bhi.n	8004338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e01b      	b.n	800435e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <prvInsertTimerInActiveList+0x7c>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3304      	adds	r3, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f7fe f924 	bl	800257e <vListInsert>
 8004336:	e012      	b.n	800435e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d206      	bcs.n	800434e <prvInsertTimerInActiveList+0x62>
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e007      	b.n	800435e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <prvInsertTimerInActiveList+0x80>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe f910 	bl	800257e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800435e:	697b      	ldr	r3, [r7, #20]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20000da0 	.word	0x20000da0
 800436c:	20000d9c 	.word	0x20000d9c

08004370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004376:	e0ca      	b.n	800450e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da18      	bge.n	80043b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	3304      	adds	r3, #4
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	61fb      	str	r3, [r7, #28]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a6:	6850      	ldr	r0, [r2, #4]
 80043a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043aa:	6892      	ldr	r2, [r2, #8]
 80043ac:	4611      	mov	r1, r2
 80043ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f2c0 80ab 	blt.w	800450e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe f911 	bl	80025f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ce:	463b      	mov	r3, r7
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff6b 	bl	80042ac <prvSampleTimeNow>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b09      	cmp	r3, #9
 80043dc:	f200 8096 	bhi.w	800450c <prvProcessReceivedCommands+0x19c>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <prvProcessReceivedCommands+0x78>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004411 	.word	0x08004411
 80043f4:	08004485 	.word	0x08004485
 80043f8:	08004499 	.word	0x08004499
 80043fc:	080044e3 	.word	0x080044e3
 8004400:	08004411 	.word	0x08004411
 8004404:	08004411 	.word	0x08004411
 8004408:	08004485 	.word	0x08004485
 800440c:	08004499 	.word	0x08004499
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	18d1      	adds	r1, r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004430:	f7ff ff5c 	bl	80042ec <prvInsertTimerInActiveList>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d069      	beq.n	800450e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05e      	beq.n	800450e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	441a      	add	r2, r3
 8004458:	2300      	movs	r3, #0
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	2100      	movs	r1, #0
 8004460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004462:	f7ff fe05 	bl	8004070 <xTimerGenericCommand>
 8004466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d14f      	bne.n	800450e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	61bb      	str	r3, [r7, #24]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004496:	e03a      	b.n	800450e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	617b      	str	r3, [r7, #20]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	18d1      	adds	r1, r2, r3
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044dc:	f7ff ff06 	bl	80042ec <prvInsertTimerInActiveList>
					break;
 80044e0:	e015      	b.n	800450e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f2:	f000 fbdd 	bl	8004cb0 <vPortFree>
 80044f6:	e00a      	b.n	800450e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800450a:	e000      	b.n	800450e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800450c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <prvProcessReceivedCommands+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	1d39      	adds	r1, r7, #4
 8004514:	2200      	movs	r2, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fb6c 	bl	8002bf4 <xQueueReceive>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f47f af2a 	bne.w	8004378 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3730      	adds	r7, #48	; 0x30
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000da4 	.word	0x20000da4

08004534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800453a:	e048      	b.n	80045ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800453c:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004546:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3304      	adds	r3, #4
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe f84b 	bl	80025f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02e      	beq.n	80045ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90e      	bls.n	80045a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3304      	adds	r3, #4
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7fd fff0 	bl	800257e <vListInsert>
 800459e:	e016      	b.n	80045ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a0:	2300      	movs	r3, #0
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	2100      	movs	r1, #0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fd60 	bl	8004070 <xTimerGenericCommand>
 80045b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	603b      	str	r3, [r7, #0]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1b1      	bne.n	800453c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <prvSwitchTimerLists+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <prvSwitchTimerLists+0xc0>)
 80045e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <prvSwitchTimerLists+0xc4>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000d9c 	.word	0x20000d9c
 80045f8:	20000da0 	.word	0x20000da0

080045fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004602:	f000 f967 	bl	80048d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <prvCheckForValidListAndQueue+0x60>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d120      	bne.n	8004650 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800460e:	4814      	ldr	r0, [pc, #80]	; (8004660 <prvCheckForValidListAndQueue+0x64>)
 8004610:	f7fd ff64 	bl	80024dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004614:	4813      	ldr	r0, [pc, #76]	; (8004664 <prvCheckForValidListAndQueue+0x68>)
 8004616:	f7fd ff61 	bl	80024dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <prvCheckForValidListAndQueue+0x6c>)
 800461c:	4a10      	ldr	r2, [pc, #64]	; (8004660 <prvCheckForValidListAndQueue+0x64>)
 800461e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <prvCheckForValidListAndQueue+0x70>)
 8004622:	4a10      	ldr	r2, [pc, #64]	; (8004664 <prvCheckForValidListAndQueue+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004626:	2300      	movs	r3, #0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <prvCheckForValidListAndQueue+0x74>)
 800462c:	4a11      	ldr	r2, [pc, #68]	; (8004674 <prvCheckForValidListAndQueue+0x78>)
 800462e:	2110      	movs	r1, #16
 8004630:	200a      	movs	r0, #10
 8004632:	f7fe f86f 	bl	8002714 <xQueueGenericCreateStatic>
 8004636:	4603      	mov	r3, r0
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <prvCheckForValidListAndQueue+0x60>)
 800463a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <prvCheckForValidListAndQueue+0x60>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <prvCheckForValidListAndQueue+0x60>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	490b      	ldr	r1, [pc, #44]	; (8004678 <prvCheckForValidListAndQueue+0x7c>)
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fd42 	bl	80030d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004650:	f000 f970 	bl	8004934 <vPortExitCritical>
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000da4 	.word	0x20000da4
 8004660:	20000d74 	.word	0x20000d74
 8004664:	20000d88 	.word	0x20000d88
 8004668:	20000d9c 	.word	0x20000d9c
 800466c:	20000da0 	.word	0x20000da0
 8004670:	20000e50 	.word	0x20000e50
 8004674:	20000db0 	.word	0x20000db0
 8004678:	08005108 	.word	0x08005108

0800467c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b04      	subs	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3b04      	subs	r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046ac:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <pxPortInitialiseStack+0x64>)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b14      	subs	r3, #20
 80046b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b04      	subs	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f06f 0202 	mvn.w	r2, #2
 80046ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3b20      	subs	r3, #32
 80046d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	080046e5 	.word	0x080046e5

080046e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <prvTaskExitError+0x54>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d00a      	beq.n	800470e <prvTaskExitError+0x2a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <prvTaskExitError+0x28>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60bb      	str	r3, [r7, #8]
}
 8004720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004722:	bf00      	nop
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0fc      	beq.n	8004724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	2000000c 	.word	0x2000000c
 800473c:	00000000 	.word	0x00000000

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	4770      	bx	lr
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst2>:
 8004760:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <prvPortStartFirstTask+0x24>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8814 	msr	CONTROL, r0
 800477a:	b662      	cpsie	i
 800477c:	b661      	cpsie	f
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	df00      	svc	0
 8004788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800478a:	bf00      	nop
 800478c:	e000ed08 	.word	0xe000ed08

08004790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <xPortStartScheduler+0x120>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a46      	ldr	r2, [pc, #280]	; (80048b4 <xPortStartScheduler+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10a      	bne.n	80047b6 <xPortStartScheduler+0x26>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047b6:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <xPortStartScheduler+0x120>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <xPortStartScheduler+0x128>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10a      	bne.n	80047d6 <xPortStartScheduler+0x46>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60fb      	str	r3, [r7, #12]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <xPortStartScheduler+0x12c>)
 80047d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <xPortStartScheduler+0x130>)
 80047fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <xPortStartScheduler+0x134>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004804:	e009      	b.n	800481a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <xPortStartScheduler+0x134>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <xPortStartScheduler+0x134>)
 800480e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d0ef      	beq.n	8004806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <xPortStartScheduler+0x134>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1c3 0307 	rsb	r3, r3, #7
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00a      	beq.n	8004848 <xPortStartScheduler+0xb8>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60bb      	str	r3, [r7, #8]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <xPortStartScheduler+0x134>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <xPortStartScheduler+0x134>)
 8004850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <xPortStartScheduler+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800485a:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <xPortStartScheduler+0x134>)
 800485c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <xPortStartScheduler+0x138>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <xPortStartScheduler+0x138>)
 800486c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <xPortStartScheduler+0x138>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <xPortStartScheduler+0x138>)
 8004878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800487c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800487e:	f000 f8dd 	bl	8004a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <xPortStartScheduler+0x13c>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004888:	f000 f8fc 	bl	8004a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xPortStartScheduler+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <xPortStartScheduler+0x140>)
 8004892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004898:	f7ff ff66 	bl	8004768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800489c:	f7ff f84a 	bl	8003934 <vTaskSwitchContext>
	prvTaskExitError();
 80048a0:	f7ff ff20 	bl	80046e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000ed00 	.word	0xe000ed00
 80048b4:	410fc271 	.word	0x410fc271
 80048b8:	410fc270 	.word	0x410fc270
 80048bc:	e000e400 	.word	0xe000e400
 80048c0:	20000ea0 	.word	0x20000ea0
 80048c4:	20000ea4 	.word	0x20000ea4
 80048c8:	e000ed20 	.word	0xe000ed20
 80048cc:	2000000c 	.word	0x2000000c
 80048d0:	e000ef34 	.word	0xe000ef34

080048d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	607b      	str	r3, [r7, #4]
}
 80048ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <vPortEnterCritical+0x58>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a0d      	ldr	r2, [pc, #52]	; (800492c <vPortEnterCritical+0x58>)
 80048f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <vPortEnterCritical+0x58>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10f      	bne.n	8004920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortEnterCritical+0x5c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <vPortEnterCritical+0x4c>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	603b      	str	r3, [r7, #0]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vPortEnterCritical+0x4a>
	}
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	2000000c 	.word	0x2000000c
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <vPortExitCritical+0x50>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <vPortExitCritical+0x24>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vPortExitCritical+0x50>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <vPortExitCritical+0x50>)
 8004960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <vPortExitCritical+0x50>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <vPortExitCritical+0x42>
 800496a:	2300      	movs	r3, #0
 800496c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f383 8811 	msr	BASEPRI, r3
}
 8004974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
	...

08004990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004990:	f3ef 8009 	mrs	r0, PSP
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <pxCurrentTCBConst>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f01e 0f10 	tst.w	lr, #16
 80049a0:	bf08      	it	eq
 80049a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6010      	str	r0, [r2, #0]
 80049ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049b4:	f380 8811 	msr	BASEPRI, r0
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f7fe ffb8 	bl	8003934 <vTaskSwitchContext>
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f380 8811 	msr	BASEPRI, r0
 80049cc:	bc09      	pop	{r0, r3}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d6:	f01e 0f10 	tst.w	lr, #16
 80049da:	bf08      	it	eq
 80049dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049e0:	f380 8809 	msr	PSP, r0
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst>:
 80049f0:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a12:	f7fe fed5 	bl	80037c0 <xTaskIncrementTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <xPortSysTickHandler+0x40>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
}
 8004a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <vPortSetupTimerInterrupt+0x38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <vPortSetupTimerInterrupt+0x3c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <vPortSetupTimerInterrupt+0x40>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <vPortSetupTimerInterrupt+0x44>)
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <vPortSetupTimerInterrupt+0x34>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010
 8004a74:	e000e018 	.word	0xe000e018
 8004a78:	20000000 	.word	0x20000000
 8004a7c:	10624dd3 	.word	0x10624dd3
 8004a80:	e000e014 	.word	0xe000e014

08004a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a94 <vPortEnableVFP+0x10>
 8004a88:	6801      	ldr	r1, [r0, #0]
 8004a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a8e:	6001      	str	r1, [r0, #0]
 8004a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a92:	bf00      	nop
 8004a94:	e000ed88 	.word	0xe000ed88

08004a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d914      	bls.n	8004ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <vPortValidateInterruptPriority+0x70>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <vPortValidateInterruptPriority+0x74>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	7afa      	ldrb	r2, [r7, #11]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20a      	bcs.n	8004ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <vPortValidateInterruptPriority+0x78>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <vPortValidateInterruptPriority+0x7c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d90a      	bls.n	8004afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	603b      	str	r3, [r7, #0]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <vPortValidateInterruptPriority+0x60>
	}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e3f0 	.word	0xe000e3f0
 8004b0c:	20000ea0 	.word	0x20000ea0
 8004b10:	e000ed0c 	.word	0xe000ed0c
 8004b14:	20000ea4 	.word	0x20000ea4

08004b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b24:	f7fe fd90 	bl	8003648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b28:	4b5b      	ldr	r3, [pc, #364]	; (8004c98 <pvPortMalloc+0x180>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b30:	f000 f920 	bl	8004d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <pvPortMalloc+0x184>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 8093 	bne.w	8004c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01d      	beq.n	8004b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b48:	2208      	movs	r2, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f023 0307 	bic.w	r3, r3, #7
 8004b60:	3308      	adds	r3, #8
 8004b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <pvPortMalloc+0x6c>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	617b      	str	r3, [r7, #20]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06e      	beq.n	8004c68 <pvPortMalloc+0x150>
 8004b8a:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <pvPortMalloc+0x188>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d869      	bhi.n	8004c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <pvPortMalloc+0x18c>)
 8004b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <pvPortMalloc+0x18c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b9e:	e004      	b.n	8004baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d903      	bls.n	8004bbc <pvPortMalloc+0xa4>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f1      	bne.n	8004ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <pvPortMalloc+0x180>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d050      	beq.n	8004c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	4413      	add	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	2308      	movs	r3, #8
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d91f      	bls.n	8004c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <pvPortMalloc+0xf8>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	613b      	str	r3, [r7, #16]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c22:	69b8      	ldr	r0, [r7, #24]
 8004c24:	f000 f908 	bl	8004e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <pvPortMalloc+0x190>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d203      	bcs.n	8004c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <pvPortMalloc+0x188>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <pvPortMalloc+0x190>)
 8004c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <pvPortMalloc+0x184>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <pvPortMalloc+0x194>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <pvPortMalloc+0x194>)
 8004c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c68:	f7fe fcfc 	bl	8003664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <pvPortMalloc+0x174>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <pvPortMalloc+0x172>
	return pvReturn;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20001e50 	.word	0x20001e50
 8004c9c:	20001e64 	.word	0x20001e64
 8004ca0:	20001e54 	.word	0x20001e54
 8004ca4:	20001e48 	.word	0x20001e48
 8004ca8:	20001e58 	.word	0x20001e58
 8004cac:	20001e5c 	.word	0x20001e5c

08004cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04d      	beq.n	8004d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <vPortFree+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <vPortFree+0x44>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60fb      	str	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <vPortFree+0x62>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60bb      	str	r3, [r7, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <vPortFree+0xb8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01e      	beq.n	8004d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11a      	bne.n	8004d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <vPortFree+0xb8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d38:	f7fe fc86 	bl	8003648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <vPortFree+0xbc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <vPortFree+0xbc>)
 8004d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d4a:	6938      	ldr	r0, [r7, #16]
 8004d4c:	f000 f874 	bl	8004e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <vPortFree+0xc0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <vPortFree+0xc0>)
 8004d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d5a:	f7fe fc83 	bl	8003664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20001e64 	.word	0x20001e64
 8004d6c:	20001e54 	.word	0x20001e54
 8004d70:	20001e60 	.word	0x20001e60

08004d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d7a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d80:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <prvHeapInit+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3307      	adds	r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0307 	bic.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <prvHeapInit+0xac>)
 8004da4:	4413      	add	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dac:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <prvHeapInit+0xb0>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <prvHeapInit+0xb0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <prvHeapInit+0xb4>)
 8004dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <prvHeapInit+0xb4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dde:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <prvHeapInit+0xb4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvHeapInit+0xb4>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <prvHeapInit+0xb8>)
 8004e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <prvHeapInit+0xbc>)
 8004e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <prvHeapInit+0xc0>)
 8004e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000ea8 	.word	0x20000ea8
 8004e24:	20001e48 	.word	0x20001e48
 8004e28:	20001e50 	.word	0x20001e50
 8004e2c:	20001e58 	.word	0x20001e58
 8004e30:	20001e54 	.word	0x20001e54
 8004e34:	20001e64 	.word	0x20001e64

08004e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <prvInsertBlockIntoFreeList+0xac>)
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e002      	b.n	8004e4c <prvInsertBlockIntoFreeList+0x14>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d8f7      	bhi.n	8004e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	4413      	add	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d108      	bne.n	8004e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d118      	bne.n	8004ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d00d      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e008      	b.n	8004ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d002      	beq.n	8004ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20001e48 	.word	0x20001e48
 8004ee8:	20001e50 	.word	0x20001e50

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_reclaim_reent>:
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <_reclaim_reent+0xa8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4283      	cmp	r3, r0
 8004f02:	b570      	push	{r4, r5, r6, lr}
 8004f04:	4604      	mov	r4, r0
 8004f06:	d04b      	beq.n	8004fa0 <_reclaim_reent+0xa4>
 8004f08:	69c3      	ldr	r3, [r0, #28]
 8004f0a:	b143      	cbz	r3, 8004f1e <_reclaim_reent+0x22>
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d144      	bne.n	8004f9c <_reclaim_reent+0xa0>
 8004f12:	69e3      	ldr	r3, [r4, #28]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x22>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f879 	bl	8005010 <_free_r>
 8004f1e:	6961      	ldr	r1, [r4, #20]
 8004f20:	b111      	cbz	r1, 8004f28 <_reclaim_reent+0x2c>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f874 	bl	8005010 <_free_r>
 8004f28:	69e1      	ldr	r1, [r4, #28]
 8004f2a:	b111      	cbz	r1, 8004f32 <_reclaim_reent+0x36>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f86f 	bl	8005010 <_free_r>
 8004f32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f34:	b111      	cbz	r1, 8004f3c <_reclaim_reent+0x40>
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f86a 	bl	8005010 <_free_r>
 8004f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3e:	b111      	cbz	r1, 8004f46 <_reclaim_reent+0x4a>
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 f865 	bl	8005010 <_free_r>
 8004f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f48:	b111      	cbz	r1, 8004f50 <_reclaim_reent+0x54>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f860 	bl	8005010 <_free_r>
 8004f50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f52:	b111      	cbz	r1, 8004f5a <_reclaim_reent+0x5e>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f85b 	bl	8005010 <_free_r>
 8004f5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f5c:	b111      	cbz	r1, 8004f64 <_reclaim_reent+0x68>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f856 	bl	8005010 <_free_r>
 8004f64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f66:	b111      	cbz	r1, 8004f6e <_reclaim_reent+0x72>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f851 	bl	8005010 <_free_r>
 8004f6e:	6a23      	ldr	r3, [r4, #32]
 8004f70:	b1b3      	cbz	r3, 8004fa0 <_reclaim_reent+0xa4>
 8004f72:	4620      	mov	r0, r4
 8004f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f78:	4718      	bx	r3
 8004f7a:	5949      	ldr	r1, [r1, r5]
 8004f7c:	b941      	cbnz	r1, 8004f90 <_reclaim_reent+0x94>
 8004f7e:	3504      	adds	r5, #4
 8004f80:	69e3      	ldr	r3, [r4, #28]
 8004f82:	2d80      	cmp	r5, #128	; 0x80
 8004f84:	68d9      	ldr	r1, [r3, #12]
 8004f86:	d1f8      	bne.n	8004f7a <_reclaim_reent+0x7e>
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f841 	bl	8005010 <_free_r>
 8004f8e:	e7c0      	b.n	8004f12 <_reclaim_reent+0x16>
 8004f90:	680e      	ldr	r6, [r1, #0]
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f83c 	bl	8005010 <_free_r>
 8004f98:	4631      	mov	r1, r6
 8004f9a:	e7ef      	b.n	8004f7c <_reclaim_reent+0x80>
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	e7ef      	b.n	8004f80 <_reclaim_reent+0x84>
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2000005c 	.word	0x2000005c

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4d0d      	ldr	r5, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1b64      	subs	r4, r4, r5
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4d0b      	ldr	r5, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 f880 	bl	80050c0 <_init>
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	080051dc 	.word	0x080051dc
 8004fe4:	080051dc 	.word	0x080051dc
 8004fe8:	080051dc 	.word	0x080051dc
 8004fec:	080051e0 	.word	0x080051e0

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <memcpy>:
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffc:	d100      	bne.n	8005000 <memcpy+0xc>
 8004ffe:	4770      	bx	lr
 8005000:	b510      	push	{r4, lr}
 8005002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500a:	4291      	cmp	r1, r2
 800500c:	d1f9      	bne.n	8005002 <memcpy+0xe>
 800500e:	bd10      	pop	{r4, pc}

08005010 <_free_r>:
 8005010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005012:	2900      	cmp	r1, #0
 8005014:	d044      	beq.n	80050a0 <_free_r+0x90>
 8005016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800501a:	9001      	str	r0, [sp, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f1a1 0404 	sub.w	r4, r1, #4
 8005022:	bfb8      	it	lt
 8005024:	18e4      	addlt	r4, r4, r3
 8005026:	f000 f83f 	bl	80050a8 <__malloc_lock>
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <_free_r+0x94>)
 800502c:	9801      	ldr	r0, [sp, #4]
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	b933      	cbnz	r3, 8005040 <_free_r+0x30>
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	b003      	add	sp, #12
 8005038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800503c:	f000 b83a 	b.w	80050b4 <__malloc_unlock>
 8005040:	42a3      	cmp	r3, r4
 8005042:	d908      	bls.n	8005056 <_free_r+0x46>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	1961      	adds	r1, r4, r5
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1949      	addeq	r1, r1, r5
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	e7ed      	b.n	8005032 <_free_r+0x22>
 8005056:	461a      	mov	r2, r3
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b10b      	cbz	r3, 8005060 <_free_r+0x50>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x46>
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	1855      	adds	r5, r2, r1
 8005064:	42a5      	cmp	r5, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x70>
 8005068:	6824      	ldr	r4, [r4, #0]
 800506a:	4421      	add	r1, r4
 800506c:	1854      	adds	r4, r2, r1
 800506e:	42a3      	cmp	r3, r4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	d1e0      	bne.n	8005036 <_free_r+0x26>
 8005074:	681c      	ldr	r4, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6053      	str	r3, [r2, #4]
 800507a:	440c      	add	r4, r1
 800507c:	6014      	str	r4, [r2, #0]
 800507e:	e7da      	b.n	8005036 <_free_r+0x26>
 8005080:	d902      	bls.n	8005088 <_free_r+0x78>
 8005082:	230c      	movs	r3, #12
 8005084:	6003      	str	r3, [r0, #0]
 8005086:	e7d6      	b.n	8005036 <_free_r+0x26>
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	1961      	adds	r1, r4, r5
 800508c:	428b      	cmp	r3, r1
 800508e:	bf04      	itt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	bf04      	itt	eq
 8005098:	1949      	addeq	r1, r1, r5
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6054      	str	r4, [r2, #4]
 800509e:	e7ca      	b.n	8005036 <_free_r+0x26>
 80050a0:	b003      	add	sp, #12
 80050a2:	bd30      	pop	{r4, r5, pc}
 80050a4:	20001fa4 	.word	0x20001fa4

080050a8 <__malloc_lock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_lock+0x8>)
 80050aa:	f7ff bfa1 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	20001fa0 	.word	0x20001fa0

080050b4 <__malloc_unlock>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__malloc_unlock+0x8>)
 80050b6:	f7ff bf9c 	b.w	8004ff2 <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	20001fa0 	.word	0x20001fa0

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
