
FreeRTOS_ex6_sem_bin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e0  080057e0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080057e0  080057e0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057e0  080057e0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080057e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f40  20000060  08005848  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa0  08005848  00021fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015810  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9f  00000000  00000000  000358e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00038888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eed  00000000  00000000  00039bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003aadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001469e  00000000  00000000  0003d8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d84  00000000  00000000  00051f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e8  00000000  00000000  00148cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056f0 	.word	0x080056f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080056f0 	.word	0x080056f0

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa53 	bl	80006ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f830 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f874 	bl	8000318 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 feba 	bl	8001fa8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <main+0x4c>)
 8000236:	2100      	movs	r1, #0
 8000238:	2001      	movs	r0, #1
 800023a:	f001 ffac 	bl	8002196 <osSemaphoreNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <main+0x50>)
 8000242:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000244:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <main+0x54>)
 8000246:	2100      	movs	r1, #0
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <main+0x58>)
 800024a:	f001 fef7 	bl	800203c <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0a      	ldr	r2, [pc, #40]	; (800027c <main+0x5c>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000254:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <main+0x60>)
 8000256:	2100      	movs	r1, #0
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <main+0x64>)
 800025a:	f001 feef 	bl	800203c <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0x68>)
 8000262:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000264:	f001 fec4 	bl	8001ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	e7fe      	b.n	8000268 <main+0x48>
 800026a:	bf00      	nop
 800026c:	08005788 	.word	0x08005788
 8000270:	20000084 	.word	0x20000084
 8000274:	08005740 	.word	0x08005740
 8000278:	080003fd 	.word	0x080003fd
 800027c:	2000007c 	.word	0x2000007c
 8000280:	08005764 	.word	0x08005764
 8000284:	08000425 	.word	0x08000425
 8000288:	20000080 	.word	0x20000080

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	; 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2244      	movs	r2, #68	; 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f005 f93e 	bl	800551c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b2:	f000 fd0f 	bl	8000cd4 <HAL_PWREx_ControlVoltageScaling>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002bc:	f000 f8ea 	bl	8000494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c0:	2310      	movs	r3, #16
 80002c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002cc:	2360      	movs	r3, #96	; 0x60
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fd51 	bl	8000d80 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002e4:	f000 f8d6 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f919 	bl	8001538 <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800030c:	f000 f8c2 	bl	8000494 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3758      	adds	r7, #88	; 0x58
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_GPIO_Init+0xbc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <MX_GPIO_Init+0xbc>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_GPIO_Init+0xbc>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_GPIO_Init+0xbc>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2120      	movs	r1, #32
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f000 fc6b 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000388:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	480f      	ldr	r0, [pc, #60]	; (80003d8 <MX_GPIO_Init+0xc0>)
 800039a:	f000 fab3 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800039e:	2320      	movs	r3, #32
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4619      	mov	r1, r3
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b8:	f000 faa4 	bl	8000904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2105      	movs	r1, #5
 80003c0:	2028      	movs	r0, #40	; 0x28
 80003c2:	f000 fa75 	bl	80008b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c6:	2028      	movs	r0, #40	; 0x28
 80003c8:	f000 fa8e 	bl	80008e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000800 	.word	0x48000800

080003dc <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff fef1 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 80003ee:	200a      	movs	r0, #10
 80003f0:	f7ff feee 	bl	80001d0 <ITM_SendChar>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	for(;;)
	{
	  osDelay(2000);
 8000404:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000408:	f001 feaa 	bl	8002160 <osDelay>
	  task_action('1');
 800040c:	2031      	movs	r0, #49	; 0x31
 800040e:	f7ff ffe5 	bl	80003dc <task_action>
	  osSemaphoreRelease(myBinarySem01Handle);
 8000412:	4b03      	ldr	r3, [pc, #12]	; (8000420 <StartTask1+0x24>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f001 ff98 	bl	800234c <osSemaphoreRelease>
	  osDelay(2000);
 800041c:	e7f2      	b.n	8000404 <StartTask1+0x8>
 800041e:	bf00      	nop
 8000420:	20000084 	.word	0x20000084

08000424 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(myBinarySem01Handle, 2000);
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <StartTask2+0x20>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000434:	4618      	mov	r0, r3
 8000436:	f001 ff37 	bl	80022a8 <osSemaphoreAcquire>
    task_action('2');
 800043a:	2032      	movs	r0, #50	; 0x32
 800043c:	f7ff ffce 	bl	80003dc <task_action>
    osSemaphoreAcquire(myBinarySem01Handle, 2000);
 8000440:	e7f4      	b.n	800042c <StartTask2+0x8>
 8000442:	bf00      	nop
 8000444:	20000084 	.word	0x20000084

08000448 <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	80fb      	strh	r3, [r7, #6]
	task_action('!');
 8000452:	2021      	movs	r0, #33	; 0x21
 8000454:	f7ff ffc2 	bl	80003dc <task_action>
	osSemaphoreRelease(myBinarySem01Handle);
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <HAL_GPIO_EXTI_Callback+0x24>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f001 ff75 	bl	800234c <osSemaphoreRelease>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000084 	.word	0x20000084

08000470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d101      	bne.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000482:	f000 f93d 	bl	8000700 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40001000 	.word	0x40001000

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <HAL_MspInit+0x70>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004aa:	4a19      	ldr	r2, [pc, #100]	; (8000510 <HAL_MspInit+0x70>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6613      	str	r3, [r2, #96]	; 0x60
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <HAL_MspInit+0x70>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <HAL_MspInit+0x70>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <HAL_MspInit+0x70>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <HAL_MspInit+0x70>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2105      	movs	r1, #5
 80004da:	f06f 000b 	mvn.w	r0, #11
 80004de:	f000 f9e7 	bl	80008b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2105      	movs	r1, #5
 80004e6:	f06f 0004 	mvn.w	r0, #4
 80004ea:	f000 f9e1 	bl	80008b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2105      	movs	r1, #5
 80004f2:	f06f 0003 	mvn.w	r0, #3
 80004f6:	f000 f9db 	bl	80008b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	210f      	movs	r1, #15
 80004fe:	f06f 0001 	mvn.w	r0, #1
 8000502:	f000 f9d5 	bl	80008b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800051c:	2300      	movs	r3, #0
 800051e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <HAL_InitTick+0xe0>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <HAL_InitTick+0xe0>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <HAL_InitTick+0xe0>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 0310 	and.w	r3, r3, #16
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800053a:	f107 0210 	add.w	r2, r7, #16
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4611      	mov	r1, r2
 8000544:	4618      	mov	r0, r3
 8000546:	f001 f9a5 	bl	8001894 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800054a:	6a3b      	ldr	r3, [r7, #32]
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000550:	2b00      	cmp	r3, #0
 8000552:	d103      	bne.n	800055c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000554:	f001 f988 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8000558:	6378      	str	r0, [r7, #52]	; 0x34
 800055a:	e004      	b.n	8000566 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800055c:	f001 f984 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8000560:	4603      	mov	r3, r0
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000568:	4a23      	ldr	r2, [pc, #140]	; (80005f8 <HAL_InitTick+0xe4>)
 800056a:	fba2 2303 	umull	r2, r3, r2, r3
 800056e:	0c9b      	lsrs	r3, r3, #18
 8000570:	3b01      	subs	r3, #1
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <HAL_InitTick+0xe8>)
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <HAL_InitTick+0xec>)
 8000578:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <HAL_InitTick+0xe8>)
 800057c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000580:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000582:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <HAL_InitTick+0xe8>)
 8000584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000586:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_InitTick+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_InitTick+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_InitTick+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800059a:	4818      	ldr	r0, [pc, #96]	; (80005fc <HAL_InitTick+0xe8>)
 800059c:	f001 fa0c 	bl	80019b8 <HAL_TIM_Base_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11b      	bne.n	80005e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <HAL_InitTick+0xe8>)
 80005b0:	f001 fa64 	bl	8001a7c <HAL_TIM_Base_Start_IT>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d111      	bne.n	80005e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005c2:	2036      	movs	r0, #54	; 0x36
 80005c4:	f000 f990 	bl	80008e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0f      	cmp	r3, #15
 80005cc:	d808      	bhi.n	80005e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80005ce:	2200      	movs	r2, #0
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	2036      	movs	r0, #54	; 0x36
 80005d4:	f000 f96c 	bl	80008b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_InitTick+0xf0>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e002      	b.n	80005e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3738      	adds	r7, #56	; 0x38
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	431bde83 	.word	0x431bde83
 80005fc:	20000088 	.word	0x20000088
 8000600:	40001000 	.word	0x40001000
 8000604:	20000004 	.word	0x20000004

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000638:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800063c:	f000 fb24 	bl	8000c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM6_DAC_IRQHandler+0x10>)
 800064a:	f001 fa87 	bl	8001b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff ffea 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	; (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f004 ff95 	bl	80055d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ae:	f7ff fdb7 	bl	8000220 <main>

080006b2 <LoopForever>:

LoopForever:
    b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006c0:	080057e8 	.word	0x080057e8
  ldr r2, =_sbss
 80006c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006c8:	20001fa0 	.word	0x20001fa0

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>

080006ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f8de 	bl	800089a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006de:	200f      	movs	r0, #15
 80006e0:	f7ff ff18 	bl	8000514 <HAL_InitTick>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	e001      	b.n	80006f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f0:	f7ff fed6 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	200000d4 	.word	0x200000d4

08000728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200000d4 	.word	0x200000d4

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	db0b      	blt.n	80007ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 021f 	and.w	r2, r3, #31
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <__NVIC_EnableIRQ+0x38>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	095b      	lsrs	r3, r3, #5
 80007c4:	2001      	movs	r0, #1
 80007c6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ff4c 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c2:	f7ff ff61 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	68b9      	ldr	r1, [r7, #8]
 80008cc:	6978      	ldr	r0, [r7, #20]
 80008ce:	f7ff ffb1 	bl	8000834 <NVIC_EncodePriority>
 80008d2:	4602      	mov	r2, r0
 80008d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff80 	bl	80007e0 <__NVIC_SetPriority>
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff54 	bl	80007a4 <__NVIC_EnableIRQ>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e17f      	b.n	8000c14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 8171 	beq.w	8000c0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d118      	bne.n	80009e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009b8:	2201      	movs	r2, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	f003 0201 	and.w	r2, r3, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d017      	beq.n	8000a20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d123      	bne.n	8000a74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	08da      	lsrs	r2, r3, #3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3208      	adds	r2, #8
 8000a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	691a      	ldr	r2, [r3, #16]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	6939      	ldr	r1, [r7, #16]
 8000a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0203 	and.w	r2, r3, #3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80ac 	beq.w	8000c0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b5f      	ldr	r3, [pc, #380]	; (8000c34 <HAL_GPIO_Init+0x330>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a5e      	ldr	r2, [pc, #376]	; (8000c34 <HAL_GPIO_Init+0x330>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b5c      	ldr	r3, [pc, #368]	; (8000c34 <HAL_GPIO_Init+0x330>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ace:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <HAL_GPIO_Init+0x334>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x242>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4f      	ldr	r2, [pc, #316]	; (8000c3c <HAL_GPIO_Init+0x338>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x23e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4e      	ldr	r2, [pc, #312]	; (8000c40 <HAL_GPIO_Init+0x33c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x23a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	; (8000c44 <HAL_GPIO_Init+0x340>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x236>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_GPIO_Init+0x344>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x232>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4b      	ldr	r2, [pc, #300]	; (8000c4c <HAL_GPIO_Init+0x348>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x22e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <HAL_GPIO_Init+0x34c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x22a>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	e00c      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b2e:	2307      	movs	r3, #7
 8000b30:	e00a      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b32:	2305      	movs	r3, #5
 8000b34:	e008      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b36:	2304      	movs	r3, #4
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e004      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x244>
 8000b46:	2300      	movs	r3, #0
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	f002 0203 	and.w	r2, r2, #3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4093      	lsls	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b58:	4937      	ldr	r1, [pc, #220]	; (8000c38 <HAL_GPIO_Init+0x334>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b66:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <HAL_GPIO_Init+0x350>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f ae78 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c68:	787b      	ldrb	r3, [r7, #1]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c74:	e002      	b.n	8000c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fbce 	bl	8000448 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce2:	d130      	bne.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf0:	d038      	beq.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2232      	movs	r2, #50	; 0x32
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3301      	adds	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d18:	e002      	b.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2c:	d102      	bne.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f2      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d40:	d110      	bne.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e00f      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d52:	d007      	beq.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40007000 	.word	0x40007000
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e3ca      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d92:	4b97      	ldr	r3, [pc, #604]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d9c:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80e4 	beq.w	8000f7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <HAL_RCC_OscConfig+0x4a>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b0c      	cmp	r3, #12
 8000dbe:	f040 808b 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 8087 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dca:	4b89      	ldr	r3, [pc, #548]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x62>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e3a2      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	4b82      	ldr	r3, [pc, #520]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <HAL_RCC_OscConfig+0x7c>
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dfa:	e005      	b.n	8000e08 <HAL_RCC_OscConfig+0x88>
 8000dfc:	4b7c      	ldr	r3, [pc, #496]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d223      	bcs.n	8000e54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fd71 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e383      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e20:	4b73      	ldr	r3, [pc, #460]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a72      	ldr	r2, [pc, #456]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b70      	ldr	r3, [pc, #448]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	496d      	ldr	r1, [pc, #436]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3e:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	4968      	ldr	r1, [pc, #416]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
 8000e52:	e025      	b.n	8000ea0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e54:	4b66      	ldr	r3, [pc, #408]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a65      	ldr	r2, [pc, #404]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b63      	ldr	r3, [pc, #396]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4960      	ldr	r1, [pc, #384]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e72:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	495b      	ldr	r1, [pc, #364]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fd31 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e343      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ea0:	f000 fc4a 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b52      	ldr	r3, [pc, #328]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	4950      	ldr	r1, [pc, #320]	; (8000ff4 <HAL_RCC_OscConfig+0x274>)
 8000eb2:	5ccb      	ldrb	r3, [r1, r3]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	4a4e      	ldr	r2, [pc, #312]	; (8000ff8 <HAL_RCC_OscConfig+0x278>)
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb25 	bl	8000514 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d052      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	e327      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d032      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ee0:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc1c 	bl	8000728 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fc18 	bl	8000728 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e310      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a36      	ldr	r2, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4931      	ldr	r1, [pc, #196]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	492c      	ldr	r1, [pc, #176]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
 8000f44:	e01a      	b.n	8000f7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fbe9 	bl	8000728 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fbe5 	bl	8000728 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e2dd      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1da>
 8000f78:	e000      	b.n	8000f7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d074      	beq.n	8001072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x21a>
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	d10e      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d064      	beq.n	8001070 <HAL_RCC_OscConfig+0x2f0>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d160      	bne.n	8001070 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e2ba      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x24a>
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e026      	b.n	8001018 <HAL_RCC_OscConfig+0x298>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd2:	d115      	bne.n	8001000 <HAL_RCC_OscConfig+0x280>
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e014      	b.n	8001018 <HAL_RCC_OscConfig+0x298>
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	08005798 	.word	0x08005798
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000004 	.word	0x20000004
 8001000:	4ba0      	ldr	r3, [pc, #640]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a9f      	ldr	r2, [pc, #636]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b9d      	ldr	r3, [pc, #628]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a9c      	ldr	r2, [pc, #624]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fb82 	bl	8000728 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fb7e 	bl	8000728 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e276      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	4b92      	ldr	r3, [pc, #584]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0x2a8>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fb6e 	bl	8000728 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fb6a 	bl	8000728 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e262      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x2d0>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d060      	beq.n	8001140 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x310>
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b0c      	cmp	r3, #12
 8001088:	d119      	bne.n	80010be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d116      	bne.n	80010be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_OscConfig+0x328>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e23f      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	4973      	ldr	r1, [pc, #460]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010bc:	e040      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d023      	beq.n	800110e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c6:	4b6f      	ldr	r3, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a6e      	ldr	r2, [pc, #440]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fb29 	bl	8000728 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fb25 	bl	8000728 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e21d      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ec:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	061b      	lsls	r3, r3, #24
 8001106:	495f      	ldr	r1, [pc, #380]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a5c      	ldr	r2, [pc, #368]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fb05 	bl	8000728 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fb01 	bl	8000728 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e1f9      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01c      	beq.n	800118e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115a:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001164:	f7ff fae0 	bl	8000728 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fadc 	bl	8000728 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1d4      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ef      	beq.n	800116c <HAL_RCC_OscConfig+0x3ec>
 800118c:	e01b      	b.n	80011c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001194:	4a3b      	ldr	r2, [pc, #236]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fac3 	bl	8000728 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fabf 	bl	8000728 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1b7      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ef      	bne.n	80011a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a6 	beq.w	8001320 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10d      	bne.n	8001200 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fc:	2301      	movs	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_RCC_OscConfig+0x508>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_RCC_OscConfig+0x508>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x508>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001218:	f7ff fa86 	bl	8000728 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001220:	f7ff fa82 	bl	8000728 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e17a      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_RCC_OscConfig+0x508>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_RCC_OscConfig+0x4d8>
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001256:	e029      	b.n	80012ac <HAL_RCC_OscConfig+0x52c>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d115      	bne.n	800128c <HAL_RCC_OscConfig+0x50c>
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_OscConfig+0x504>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001280:	e014      	b.n	80012ac <HAL_RCC_OscConfig+0x52c>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40007000 	.word	0x40007000
 800128c:	4b9c      	ldr	r3, [pc, #624]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001292:	4a9b      	ldr	r2, [pc, #620]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800129c:	4b98      	ldr	r3, [pc, #608]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	4a97      	ldr	r2, [pc, #604]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d016      	beq.n	80012e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fa38 	bl	8000728 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fa34 	bl	8000728 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e12a      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80012d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0ed      	beq.n	80012bc <HAL_RCC_OscConfig+0x53c>
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff fa21 	bl	8000728 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fa1d 	bl	8000728 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e113      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001300:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ed      	bne.n	80012ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	4a79      	ldr	r2, [pc, #484]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80fe 	beq.w	8001526 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b02      	cmp	r3, #2
 8001330:	f040 80d0 	bne.w	80014d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001334:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	429a      	cmp	r2, r3
 8001346:	d130      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	3b01      	subs	r3, #1
 8001354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d127      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d11f      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001374:	2a07      	cmp	r2, #7
 8001376:	bf14      	ite	ne
 8001378:	2201      	movne	r2, #1
 800137a:	2200      	moveq	r2, #0
 800137c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	4293      	cmp	r3, r2
 8001380:	d113      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d06e      	beq.n	8001488 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d069      	beq.n	8001484 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0ad      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80013d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d8:	f7ff f9a6 	bl	8000728 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f9a2 	bl	8000728 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e09a      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_RCC_OscConfig+0x784>)
 8001404:	4013      	ands	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800140e:	3a01      	subs	r2, #1
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	3a01      	subs	r2, #1
 8001424:	0552      	lsls	r2, r2, #21
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800142c:	0852      	lsrs	r2, r2, #1
 800142e:	3a01      	subs	r2, #1
 8001430:	0652      	lsls	r2, r2, #25
 8001432:	4311      	orrs	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001438:	0912      	lsrs	r2, r2, #4
 800143a:	0452      	lsls	r2, r2, #17
 800143c:	430a      	orrs	r2, r1
 800143e:	4930      	ldr	r1, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800145c:	f7ff f964 	bl	8000728 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff f960 	bl	8000728 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e058      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	e050      	b.n	8001526 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e04f      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d148      	bne.n	8001526 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014ac:	f7ff f93c 	bl	8000728 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f938 	bl	8000728 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e030      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x734>
 80014d2:	e028      	b.n	8001526 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_RCC_OscConfig+0x780>)
 80014e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff f91f 	bl	8000728 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ec:	e00c      	b.n	8001508 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff f91b 	bl	8000728 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d905      	bls.n	8001508 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
 8001500:	40021000 	.word	0x40021000
 8001504:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x7b0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ec      	bne.n	80014ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x7b0>)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	4905      	ldr	r1, [pc, #20]	; (8001530 <HAL_RCC_OscConfig+0x7b0>)
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_OscConfig+0x7b4>)
 800151c:	4013      	ands	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
 8001520:	e001      	b.n	8001526 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	feeefffc 	.word	0xfeeefffc

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0e7      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d910      	bls.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b72      	ldr	r3, [pc, #456]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4970      	ldr	r1, [pc, #448]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cf      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d010      	beq.n	80015aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	429a      	cmp	r2, r3
 8001596:	d908      	bls.n	80015aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4960      	ldr	r1, [pc, #384]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d04c      	beq.n	8001650 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d121      	bne.n	800160e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0a6      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e09a      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e08e      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e086      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4943      	ldr	r1, [pc, #268]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001620:	f7ff f882 	bl	8000728 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff f87e 	bl	8000728 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e06e      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	429a      	cmp	r2, r3
 800166a:	d208      	bcs.n	800167e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	492b      	ldr	r1, [pc, #172]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d210      	bcs.n	80016ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 0207 	bic.w	r2, r3, #7
 8001694:	4923      	ldr	r1, [pc, #140]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_RCC_ClockConfig+0x1ec>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e036      	b.n	800171c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	4918      	ldr	r1, [pc, #96]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4910      	ldr	r1, [pc, #64]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ec:	f000 f824 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	490b      	ldr	r1, [pc, #44]	; (800172c <HAL_RCC_ClockConfig+0x1f4>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 800170a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1fc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe feff 	bl	8000514 <HAL_InitTick>
 8001716:	4603      	mov	r3, r0
 8001718:	72fb      	strb	r3, [r7, #11]

  return status;
 800171a:	7afb      	ldrb	r3, [r7, #11]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	08005798 	.word	0x08005798
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x34>
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d121      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d11e      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e005      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10d      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_GetSysClockFreq+0x110>)
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	e004      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_RCC_GetSysClockFreq+0x114>)
 80017be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d134      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0xa6>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d003      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xac>
 80017dc:	e005      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_GetSysClockFreq+0x110>)
 80017e0:	617b      	str	r3, [r7, #20]
      break;
 80017e2:	e005      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_GetSysClockFreq+0x114>)
 80017e6:	617b      	str	r3, [r7, #20]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	617b      	str	r3, [r7, #20]
      break;
 80017ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	3301      	adds	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	0e5b      	lsrs	r3, r3, #25
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	3301      	adds	r3, #1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001830:	69bb      	ldr	r3, [r7, #24]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	080057b0 	.word	0x080057b0
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200

08001850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_GetHCLKFreq+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800186c:	f7ff fff0 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	080057a8 	.word	0x080057a8

08001894 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	220f      	movs	r2, #15
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_GetClockConfig+0x5c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_RCC_GetClockConfig+0x5c>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_GetClockConfig+0x5c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCC_GetClockConfig+0x60>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0207 	and.w	r2, r3, #7
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40022000 	.word	0x40022000

080018f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff f9d2 	bl	8000cb8 <HAL_PWREx_GetVoltageRange>
 8001914:	6178      	str	r0, [r7, #20]
 8001916:	e014      	b.n	8001942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001930:	f7ff f9c2 	bl	8000cb8 <HAL_PWREx_GetVoltageRange>
 8001934:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001948:	d10b      	bne.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d919      	bls.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2ba0      	cmp	r3, #160	; 0xa0
 8001954:	d902      	bls.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e013      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	e010      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b80      	cmp	r3, #128	; 0x80
 8001966:	d902      	bls.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	e00a      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b80      	cmp	r3, #128	; 0x80
 8001972:	d102      	bne.n	800197a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e004      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b70      	cmp	r3, #112	; 0x70
 800197e:	d101      	bne.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 0207 	bic.w	r2, r3, #7
 800198c:	4909      	ldr	r1, [pc, #36]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e049      	b.n	8001a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f841 	bl	8001a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f000 f9da 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e04f      	b.n	8001b34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abe:	d018      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x76>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d115      	bne.n	8001b1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d015      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0xb4>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d011      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1c:	e008      	b.n	8001b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e000      	b.n	8001b32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40012c00 	.word	0x40012c00
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40000800 	.word	0x40000800
 8001b4c:	40000c00 	.word	0x40000c00
 8001b50:	40013400 	.word	0x40013400
 8001b54:	40014000 	.word	0x40014000
 8001b58:	00010007 	.word	0x00010007

08001b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0202 	mvn.w	r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8e4 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8d6 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8e7 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0204 	mvn.w	r2, #4
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8be 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8b0 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8c1 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d020      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0208 	mvn.w	r2, #8
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f898 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f88a 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f89b 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d020      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01b      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0210 	mvn.w	r2, #16
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f872 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f864 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f875 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0201 	mvn.w	r2, #1
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fbd4 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f906 	bl	8001ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8fe 	bl	8001f0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f834 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0220 	mvn.w	r2, #32
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8c6 	bl	8001ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <TIM_Base_SetConfig+0x114>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d00f      	beq.n	8001df0 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <TIM_Base_SetConfig+0x118>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00b      	beq.n	8001df0 <TIM_Base_SetConfig+0x40>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <TIM_Base_SetConfig+0x11c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <TIM_Base_SetConfig+0x40>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <TIM_Base_SetConfig+0x120>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <TIM_Base_SetConfig+0x124>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d108      	bne.n	8001e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <TIM_Base_SetConfig+0x114>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d01b      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <TIM_Base_SetConfig+0x118>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d017      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <TIM_Base_SetConfig+0x11c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <TIM_Base_SetConfig+0x120>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00f      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <TIM_Base_SetConfig+0x124>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <TIM_Base_SetConfig+0x128>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <TIM_Base_SetConfig+0x12c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <TIM_Base_SetConfig+0x130>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <TIM_Base_SetConfig+0x114>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0xf8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <TIM_Base_SetConfig+0x124>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0xf8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <TIM_Base_SetConfig+0x128>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0xf8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <TIM_Base_SetConfig+0x12c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0xf8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <TIM_Base_SetConfig+0x130>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40013400 	.word	0x40013400
 8001ed8:	40014000 	.word	0x40014000
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40014800 	.word	0x40014800

08001ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <__NVIC_SetPriority>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Handler+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f7c:	f002 f968 	bl	8004250 <xTaskGetSchedulerState>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f86:	f003 f84f 	bl	8005028 <xPortSysTickHandler>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f06f 0004 	mvn.w	r0, #4
 8001f9e:	f7ff ffbf 	bl	8001f20 <__NVIC_SetPriority>
#endif
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fae:	f3ef 8305 	mrs	r3, IPSR
 8001fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fba:	f06f 0305 	mvn.w	r3, #5
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	e00c      	b.n	8001fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <osKernelInitialize+0x44>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <osKernelInitialize+0x44>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	e002      	b.n	8001fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200000d8 	.word	0x200000d8

08001ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff6:	f3ef 8305 	mrs	r3, IPSR
 8001ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8001ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002002:	f06f 0305 	mvn.w	r3, #5
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	e010      	b.n	800202c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <osKernelStart+0x48>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d109      	bne.n	8002026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002012:	f7ff ffbf 	bl	8001f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <osKernelStart+0x48>)
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800201c:	f001 fcbc 	bl	8003998 <vTaskStartScheduler>
      stat = osOK;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	e002      	b.n	800202c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200000d8 	.word	0x200000d8

0800203c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af04      	add	r7, sp, #16
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800204c:	f3ef 8305 	mrs	r3, IPSR
 8002050:	617b      	str	r3, [r7, #20]
  return(result);
 8002052:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002054:	2b00      	cmp	r3, #0
 8002056:	d17e      	bne.n	8002156 <osThreadNew+0x11a>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07b      	beq.n	8002156 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002062:	2318      	movs	r3, #24
 8002064:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d045      	beq.n	8002102 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <osThreadNew+0x48>
        name = attr->name;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <osThreadNew+0x6e>
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b38      	cmp	r3, #56	; 0x38
 800209c:	d805      	bhi.n	80020aa <osThreadNew+0x6e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <osThreadNew+0x72>
        return (NULL);
 80020aa:	2300      	movs	r3, #0
 80020ac:	e054      	b.n	8002158 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00e      	beq.n	80020e4 <osThreadNew+0xa8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2ba7      	cmp	r3, #167	; 0xa7
 80020cc:	d90a      	bls.n	80020e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <osThreadNew+0xa8>
        mem = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e010      	b.n	8002106 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <osThreadNew+0xca>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d108      	bne.n	8002106 <osThreadNew+0xca>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <osThreadNew+0xca>
          mem = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e001      	b.n	8002106 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d110      	bne.n	800212e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002114:	9202      	str	r2, [sp, #8]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6a3a      	ldr	r2, [r7, #32]
 8002120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f001 fa4c 	bl	80035c0 <xTaskCreateStatic>
 8002128:	4603      	mov	r3, r0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e013      	b.n	8002156 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d110      	bne.n	8002156 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	b29a      	uxth	r2, r3
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f001 fa97 	bl	800367a <xTaskCreate>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <osThreadNew+0x11a>
            hTask = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002156:	693b      	ldr	r3, [r7, #16]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002168:	f3ef 8305 	mrs	r3, IPSR
 800216c:	60bb      	str	r3, [r7, #8]
  return(result);
 800216e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <osDelay+0x1c>
    stat = osErrorISR;
 8002174:	f06f 0305 	mvn.w	r3, #5
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e007      	b.n	800218c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f001 fbd2 	bl	8003930 <vTaskDelay>
    }
  }

  return (stat);
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002196:	b580      	push	{r7, lr}
 8002198:	b08a      	sub	sp, #40	; 0x28
 800219a:	af02      	add	r7, sp, #8
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a6:	f3ef 8305 	mrs	r3, IPSR
 80021aa:	613b      	str	r3, [r7, #16]
  return(result);
 80021ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d175      	bne.n	800229e <osSemaphoreNew+0x108>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d072      	beq.n	800229e <osSemaphoreNew+0x108>
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d86e      	bhi.n	800229e <osSemaphoreNew+0x108>
    mem = -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <osSemaphoreNew+0x4c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b4f      	cmp	r3, #79	; 0x4f
 80021da:	d902      	bls.n	80021e2 <osSemaphoreNew+0x4c>
        mem = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e00c      	b.n	80021fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <osSemaphoreNew+0x66>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <osSemaphoreNew+0x66>
          mem = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e001      	b.n	80021fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d04c      	beq.n	800229e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d128      	bne.n	800225c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d10a      	bne.n	8002226 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2203      	movs	r2, #3
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	2001      	movs	r0, #1
 800221e:	f000 fa29 	bl	8002674 <xQueueGenericCreateStatic>
 8002222:	61f8      	str	r0, [r7, #28]
 8002224:	e005      	b.n	8002232 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002226:	2203      	movs	r2, #3
 8002228:	2100      	movs	r1, #0
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fa9a 	bl	8002764 <xQueueGenericCreate>
 8002230:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d022      	beq.n	800227e <osSemaphoreNew+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800223e:	2300      	movs	r3, #0
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	69f8      	ldr	r0, [r7, #28]
 8002246:	f000 fb55 	bl	80028f4 <xQueueGenericSend>
 800224a:	4603      	mov	r3, r0
 800224c:	2b01      	cmp	r3, #1
 800224e:	d016      	beq.n	800227e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002250:	69f8      	ldr	r0, [r7, #28]
 8002252:	f000 ffe1 	bl	8003218 <vQueueDelete>
            hSemaphore = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e010      	b.n	800227e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	461a      	mov	r2, r3
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fad7 	bl	800281e <xQueueCreateCountingSemaphoreStatic>
 8002270:	61f8      	str	r0, [r7, #28]
 8002272:	e004      	b.n	800227e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fb08 	bl	800288c <xQueueCreateCountingSemaphore>
 800227c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osSemaphoreNew+0xfc>
          name = attr->name;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e001      	b.n	8002296 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002296:	6979      	ldr	r1, [r7, #20]
 8002298:	69f8      	ldr	r0, [r7, #28]
 800229a:	f001 f909 	bl	80034b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800229e:	69fb      	ldr	r3, [r7, #28]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80022c0:	f06f 0303 	mvn.w	r3, #3
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e039      	b.n	800233c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c8:	f3ef 8305 	mrs	r3, IPSR
 80022cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80022da:	f06f 0303 	mvn.w	r3, #3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e02c      	b.n	800233c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	461a      	mov	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	6938      	ldr	r0, [r7, #16]
 80022f0:	f000 ff12 	bl	8003118 <xQueueReceiveFromISR>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d003      	beq.n	8002302 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80022fa:	f06f 0302 	mvn.w	r3, #2
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e01c      	b.n	800233c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d019      	beq.n	800233c <osSemaphoreAcquire+0x94>
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <osSemaphoreAcquire+0xa0>)
 800230a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	e010      	b.n	800233c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	6938      	ldr	r0, [r7, #16]
 800231e:	f000 fdef 	bl	8002f00 <xQueueSemaphoreTake>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d009      	beq.n	800233c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800232e:	f06f 0301 	mvn.w	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e002      	b.n	800233c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002336:	f06f 0302 	mvn.w	r3, #2
 800233a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800233c:	697b      	ldr	r3, [r7, #20]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000ed04 	.word	0xe000ed04

0800234c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002362:	f06f 0303 	mvn.w	r3, #3
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e02c      	b.n	80023c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236a:	f3ef 8305 	mrs	r3, IPSR
 800236e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002370:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01a      	beq.n	80023ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	4619      	mov	r1, r3
 8002380:	6938      	ldr	r0, [r7, #16]
 8002382:	f000 fc50 	bl	8002c26 <xQueueGiveFromISR>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d003      	beq.n	8002394 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800238c:	f06f 0302 	mvn.w	r3, #2
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e017      	b.n	80023c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d014      	beq.n	80023c4 <osSemaphoreRelease+0x78>
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <osSemaphoreRelease+0x84>)
 800239c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	e00b      	b.n	80023c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80023ac:	2300      	movs	r3, #0
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	6938      	ldr	r0, [r7, #16]
 80023b4:	f000 fa9e 	bl	80028f4 <xQueueGenericSend>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d002      	beq.n	80023c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80023be:	f06f 0302 	mvn.w	r3, #2
 80023c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80023c4:	697b      	ldr	r3, [r7, #20]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <vApplicationGetIdleTaskMemory+0x2c>)
 80023e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <vApplicationGetIdleTaskMemory+0x30>)
 80023ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200000dc 	.word	0x200000dc
 8002404:	20000184 	.word	0x20000184

08002408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <vApplicationGetTimerTaskMemory+0x2c>)
 8002418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4a06      	ldr	r2, [pc, #24]	; (8002438 <vApplicationGetTimerTaskMemory+0x30>)
 800241e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000384 	.word	0x20000384
 8002438:	2000042c 	.word	0x2000042c

0800243c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0208 	add.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0208 	add.w	r2, r3, #8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d103      	bne.n	80024fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e00c      	b.n	8002518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3308      	adds	r3, #8
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e002      	b.n	800250c <vListInsert+0x2e>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d2f6      	bcs.n	8002506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6852      	ldr	r2, [r2, #4]
 8002570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d103      	bne.n	8002584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025ce:	f002 fc99 	bl	8004f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	441a      	add	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	3b01      	subs	r3, #1
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	441a      	add	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	; 0xff
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d114      	bne.n	800264e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01a      	beq.n	8002662 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f001 fc4b 	bl	8003ecc <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <xQueueGenericReset+0xcc>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	e009      	b.n	8002662 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3310      	adds	r3, #16
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fef2 	bl	800243c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff feed 	bl	800243c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002662:	f002 fc7f 	bl	8004f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <xQueueGenericCreateStatic+0x52>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <xQueueGenericCreateStatic+0x56>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <xQueueGenericCreateStatic+0x58>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	623b      	str	r3, [r7, #32]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <xQueueGenericCreateStatic+0x7e>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <xQueueGenericCreateStatic+0x82>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <xQueueGenericCreateStatic+0x84>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	61fb      	str	r3, [r7, #28]
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002712:	2350      	movs	r3, #80	; 0x50
 8002714:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b50      	cmp	r3, #80	; 0x50
 800271a:	d00a      	beq.n	8002732 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61bb      	str	r3, [r7, #24]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002732:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002746:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f83f 	bl	80027d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800275c:	4618      	mov	r0, r3
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	613b      	str	r3, [r7, #16]
}
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3350      	adds	r3, #80	; 0x50
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fcd3 	bl	8005148 <pvPortMalloc>
 80027a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d011      	beq.n	80027ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3350      	adds	r3, #80	; 0x50
 80027b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f805 	bl	80027d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027ce:	69bb      	ldr	r3, [r7, #24]
	}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e002      	b.n	80027fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002806:	2101      	movs	r1, #1
 8002808:	69b8      	ldr	r0, [r7, #24]
 800280a:	f7ff fecb 	bl	80025a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	; 0x28
 8002822:	af02      	add	r7, sp, #8
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	61bb      	str	r3, [r7, #24]
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	429a      	cmp	r2, r3
 800284c:	d90a      	bls.n	8002864 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	617b      	str	r3, [r7, #20]
}
 8002860:	bf00      	nop
 8002862:	e7fe      	b.n	8002862 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002864:	2302      	movs	r3, #2
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff ff00 	bl	8002674 <xQueueGenericCreateStatic>
 8002874:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002882:	69fb      	ldr	r3, [r7, #28]
	}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	613b      	str	r3, [r7, #16]
}
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d90a      	bls.n	80028d0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	60fb      	str	r3, [r7, #12]
}
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80028d0:	2202      	movs	r2, #2
 80028d2:	2100      	movs	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff45 	bl	8002764 <xQueueGenericCreate>
 80028da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80028e8:	697b      	ldr	r3, [r7, #20]
	}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericSend+0x32>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <xQueueGenericSend+0x40>
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <xQueueGenericSend+0x44>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <xQueueGenericSend+0x46>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <xQueueGenericSend+0x60>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d103      	bne.n	8002962 <xQueueGenericSend+0x6e>
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <xQueueGenericSend+0x72>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <xQueueGenericSend+0x74>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericSend+0x8e>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	623b      	str	r3, [r7, #32]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002982:	f001 fc65 	bl	8004250 <xTaskGetSchedulerState>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <xQueueGenericSend+0x9e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <xQueueGenericSend+0xa2>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <xQueueGenericSend+0xa4>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61fb      	str	r3, [r7, #28]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029b2:	f002 faa7 	bl	8004f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <xQueueGenericSend+0xd4>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d129      	bne.n	8002a1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ce:	f000 fc5e 	bl	800328e <prvCopyDataToQueue>
 80029d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fa73 	bl	8003ecc <xTaskRemoveFromEventList>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <xQueueGenericSend+0x1f8>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	e00a      	b.n	8002a14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <xQueueGenericSend+0x1f8>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a14:	f002 faa6 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e063      	b.n	8002ae4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a22:	f002 fa9f 	bl	8004f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e05c      	b.n	8002ae4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 faad 	bl	8003f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a3e:	f002 fa91 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a42:	f001 f819 	bl	8003a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a46:	f002 fa5d 	bl	8004f04 <vPortEnterCritical>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d103      	bne.n	8002a60 <xQueueGenericSend+0x16c>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d103      	bne.n	8002a76 <xQueueGenericSend+0x182>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a76:	f002 fa75 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7a:	1d3a      	adds	r2, r7, #4
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fa9c 	bl	8003fc0 <xTaskCheckForTimeOut>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d124      	bne.n	8002ad8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a90:	f000 fcf5 	bl	800347e <prvIsQueueFull>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 f9c2 	bl	8003e2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aaa:	f000 fc80 	bl	80033ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aae:	f000 fff1 	bl	8003a94 <xTaskResumeAll>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f af7c 	bne.w	80029b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <xQueueGenericSend+0x1f8>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	e772      	b.n	80029b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ace:	f000 fc6e 	bl	80033ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad2:	f000 ffdf 	bl	8003a94 <xTaskResumeAll>
 8002ad6:	e76c      	b.n	80029b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fc68 	bl	80033ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ade:	f000 ffd9 	bl	8003a94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ae2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b090      	sub	sp, #64	; 0x40
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <xQueueGenericSendFromISR+0x3c>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <xQueueGenericSendFromISR+0x40>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <xQueueGenericSendFromISR+0x42>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <xQueueGenericSendFromISR+0x6a>
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSendFromISR+0x6e>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSendFromISR+0x70>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	623b      	str	r3, [r7, #32]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b7a:	f002 faa5 	bl	80050c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <xQueueGenericSendFromISR+0xbc>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d12f      	bne.n	8002c0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bc2:	f000 fb64 	bl	800328e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d112      	bne.n	8002bf6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	3324      	adds	r3, #36	; 0x24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f975 	bl	8003ecc <xTaskRemoveFromEventList>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00e      	beq.n	8002c06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e007      	b.n	8002c06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	b25a      	sxtb	r2, r3
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c06:	2301      	movs	r3, #1
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c0a:	e001      	b.n	8002c10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3740      	adds	r7, #64	; 0x40
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08e      	sub	sp, #56	; 0x38
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	623b      	str	r3, [r7, #32]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <xQueueGiveFromISR+0x48>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <xQueueGiveFromISR+0x58>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <xQueueGiveFromISR+0x5c>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueGiveFromISR+0x5e>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueGiveFromISR+0x78>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c9e:	f002 fa13 	bl	80050c8 <vPortValidateInterruptPriority>
	__asm volatile
 8002ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	617a      	str	r2, [r7, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002cba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d22b      	bcs.n	8002d26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d112      	bne.n	8002d10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	3324      	adds	r3, #36	; 0x24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 f8e8 	bl	8003ecc <xTaskRemoveFromEventList>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e007      	b.n	8002d20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d14:	3301      	adds	r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	b25a      	sxtb	r2, r3
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d20:	2301      	movs	r3, #1
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
 8002d24:	e001      	b.n	8002d2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f383 8811 	msr	BASEPRI, r3
}
 8002d34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xQueueReceive+0x30>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	623b      	str	r3, [r7, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueReceive+0x3e>
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueReceive+0x42>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueReceive+0x44>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueReceive+0x5e>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fb      	str	r3, [r7, #28]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d9e:	f001 fa57 	bl	8004250 <xTaskGetSchedulerState>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <xQueueReceive+0x6e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueReceive+0x72>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueReceive+0x74>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueReceive+0x8e>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61bb      	str	r3, [r7, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dce:	f002 f899 	bl	8004f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01f      	beq.n	8002e1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de2:	f000 fabe 	bl	8003362 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00f      	beq.n	8002e16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	3310      	adds	r3, #16
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 f866 	bl	8003ecc <xTaskRemoveFromEventList>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <xQueueReceive+0x1bc>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e16:	f002 f8a5 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e069      	b.n	8002ef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e24:	f002 f89e 	bl	8004f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e062      	b.n	8002ef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f8ac 	bl	8003f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e40:	f002 f890 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e44:	f000 fe18 	bl	8003a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e48:	f002 f85c 	bl	8004f04 <vPortEnterCritical>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0x122>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <xQueueReceive+0x138>
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	f002 f874 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e7c:	1d3a      	adds	r2, r7, #4
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 f89b 	bl	8003fc0 <xTaskCheckForTimeOut>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d123      	bne.n	8002ed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e92:	f000 fade 	bl	8003452 <prvIsQueueEmpty>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 ffc1 	bl	8003e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eac:	f000 fa7f 	bl	80033ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb0:	f000 fdf0 	bl	8003a94 <xTaskResumeAll>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d189      	bne.n	8002dce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <xQueueReceive+0x1bc>)
 8002ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	e780      	b.n	8002dce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ece:	f000 fa6e 	bl	80033ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ed2:	f000 fddf 	bl	8003a94 <xTaskResumeAll>
 8002ed6:	e77a      	b.n	8002dce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 fa68 	bl	80033ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ede:	f000 fdd9 	bl	8003a94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee4:	f000 fab5 	bl	8003452 <prvIsQueueEmpty>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f43f af6f 	beq.w	8002dce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	; 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08e      	sub	sp, #56	; 0x38
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	623b      	str	r3, [r7, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	e7fe      	b.n	8002f30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	61fb      	str	r3, [r7, #28]
}
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f50:	f001 f97e 	bl	8004250 <xTaskGetSchedulerState>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <xQueueSemaphoreTake+0x60>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <xQueueSemaphoreTake+0x64>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <xQueueSemaphoreTake+0x66>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	61bb      	str	r3, [r7, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	e7fe      	b.n	8002f7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f80:	f001 ffc0 	bl	8004f04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d024      	beq.n	8002fda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fa0:	f001 facc 	bl	800453c <pvTaskIncrementMutexHeldCount>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00f      	beq.n	8002fd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ff88 	bl	8003ecc <xTaskRemoveFromEventList>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b54      	ldr	r3, [pc, #336]	; (8003114 <xQueueSemaphoreTake+0x214>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fd2:	f001 ffc7 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e097      	b.n	800310a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	617b      	str	r3, [r7, #20]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ffc:	f001 ffb2 	bl	8004f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003000:	2300      	movs	r3, #0
 8003002:	e082      	b.n	800310a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ffc0 	bl	8003f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003014:	2301      	movs	r3, #1
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003018:	f001 ffa4 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800301c:	f000 fd2c 	bl	8003a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003020:	f001 ff70 	bl	8004f04 <vPortEnterCritical>
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302a:	b25b      	sxtb	r3, r3
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d103      	bne.n	800303a <xQueueSemaphoreTake+0x13a>
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003040:	b25b      	sxtb	r3, r3
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d103      	bne.n	8003050 <xQueueSemaphoreTake+0x150>
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	f001 ff88 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003054:	463a      	mov	r2, r7
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 ffaf 	bl	8003fc0 <xTaskCheckForTimeOut>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d132      	bne.n	80030ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800306a:	f000 f9f2 	bl	8003452 <prvIsQueueEmpty>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d026      	beq.n	80030c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800307c:	f001 ff42 	bl	8004f04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4618      	mov	r0, r3
 8003086:	f001 f901 	bl	800428c <xTaskPriorityInherit>
 800308a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800308c:	f001 ff6a 	bl	8004f64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	3324      	adds	r3, #36	; 0x24
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fec7 	bl	8003e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800309e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a0:	f000 f985 	bl	80033ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030a4:	f000 fcf6 	bl	8003a94 <xTaskResumeAll>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f af68 	bne.w	8002f80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <xQueueSemaphoreTake+0x214>)
 80030b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	e75e      	b.n	8002f80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030c4:	f000 f973 	bl	80033ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030c8:	f000 fce4 	bl	8003a94 <xTaskResumeAll>
 80030cc:	e758      	b.n	8002f80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80030ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d0:	f000 f96d 	bl	80033ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d4:	f000 fcde 	bl	8003a94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030da:	f000 f9ba 	bl	8003452 <prvIsQueueEmpty>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f43f af4d 	beq.w	8002f80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80030ec:	f001 ff0a 	bl	8004f04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030f2:	f000 f8b4 	bl	800325e <prvGetDisinheritPriorityAfterTimeout>
 80030f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f99a 	bl	8004438 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003104:	f001 ff2e 	bl	8004f64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003108:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800310a:	4618      	mov	r0, r3
 800310c:	3738      	adds	r7, #56	; 0x38
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000ed04 	.word	0xe000ed04

08003118 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	623b      	str	r3, [r7, #32]
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <xQueueReceiveFromISR+0x3a>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <xQueueReceiveFromISR+0x3e>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <xQueueReceiveFromISR+0x40>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	61fb      	str	r3, [r7, #28]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003172:	f001 ffa9 	bl	80050c8 <vPortValidateInterruptPriority>
	__asm volatile
 8003176:	f3ef 8211 	mrs	r2, BASEPRI
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	61ba      	str	r2, [r7, #24]
 800318c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800318e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02f      	beq.n	80031fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ac:	f000 f8d9 	bl	8003362 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80031b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d112      	bne.n	80031e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	3310      	adds	r3, #16
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fe7c 	bl	8003ecc <xTaskRemoveFromEventList>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80031e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	b25a      	sxtb	r2, r3
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80031f8:	2301      	movs	r3, #1
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
 80031fc:	e001      	b.n	8003202 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f383 8811 	msr	BASEPRI, r3
}
 800320c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003210:	4618      	mov	r0, r3
 8003212:	3738      	adds	r7, #56	; 0x38
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <vQueueDelete+0x28>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60bb      	str	r3, [r7, #8]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f95f 	bl	8003504 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f002 f845 	bl	80052e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e001      	b.n	8003280 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003280:	68fb      	ldr	r3, [r7, #12]
	}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d14d      	bne.n	8003350 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 f84f 	bl	800435c <xTaskPriorityDisinherit>
 80032be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	e043      	b.n	8003350 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6858      	ldr	r0, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	461a      	mov	r2, r3
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	f002 f9a3 	bl	8005624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d32b      	bcc.n	8003350 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	e026      	b.n	8003350 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68d8      	ldr	r0, [r3, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	461a      	mov	r2, r3
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	f002 f989 	bl	8005624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	425b      	negs	r3, r3
 800331c:	441a      	add	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d207      	bcs.n	800333e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	425b      	negs	r3, r3
 8003338:	441a      	add	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d105      	bne.n	8003350 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3b01      	subs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003358:	697b      	ldr	r3, [r7, #20]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d303      	bcc.n	8003396 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	461a      	mov	r2, r3
 80033a0:	6838      	ldr	r0, [r7, #0]
 80033a2:	f002 f93f 	bl	8005624 <memcpy>
	}
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033b6:	f001 fda5 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033c2:	e011      	b.n	80033e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3324      	adds	r3, #36	; 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fd7b 	bl	8003ecc <xTaskRemoveFromEventList>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033dc:	f000 fe52 	bl	8004084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dce9      	bgt.n	80033c4 <prvUnlockQueue+0x16>
 80033f0:	e000      	b.n	80033f4 <prvUnlockQueue+0x46>
					break;
 80033f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	22ff      	movs	r2, #255	; 0xff
 80033f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033fc:	f001 fdb2 	bl	8004f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003400:	f001 fd80 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800340a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800340c:	e011      	b.n	8003432 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3310      	adds	r3, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd56 	bl	8003ecc <xTaskRemoveFromEventList>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003426:	f000 fe2d 	bl	8004084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800342a:	7bbb      	ldrb	r3, [r7, #14]
 800342c:	3b01      	subs	r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003436:	2b00      	cmp	r3, #0
 8003438:	dce9      	bgt.n	800340e <prvUnlockQueue+0x60>
 800343a:	e000      	b.n	800343e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800343c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003446:	f001 fd8d 	bl	8004f64 <vPortExitCritical>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800345a:	f001 fd53 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003466:	2301      	movs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e001      	b.n	8003470 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003470:	f001 fd78 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003486:	f001 fd3d 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	429a      	cmp	r2, r3
 8003494:	d102      	bne.n	800349c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e001      	b.n	80034a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034a0:	f001 fd60 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 80034a4:	68fb      	ldr	r3, [r7, #12]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e014      	b.n	80034ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <vQueueAddToRegistry+0x50>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <vQueueAddToRegistry+0x50>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <vQueueAddToRegistry+0x50>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034e2:	e006      	b.n	80034f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b07      	cmp	r3, #7
 80034ee:	d9e7      	bls.n	80034c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000082c 	.word	0x2000082c

08003504 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e016      	b.n	8003540 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <vQueueUnregisterQueue+0x50>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d10b      	bne.n	800353a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <vQueueUnregisterQueue+0x50>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2100      	movs	r1, #0
 8003528:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <vQueueUnregisterQueue+0x50>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
				break;
 8003538:	e006      	b.n	8003548 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b07      	cmp	r3, #7
 8003544:	d9e5      	bls.n	8003512 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	2000082c 	.word	0x2000082c

08003558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003568:	f001 fccc 	bl	8004f04 <vPortEnterCritical>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003572:	b25b      	sxtb	r3, r3
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d103      	bne.n	8003582 <vQueueWaitForMessageRestricted+0x2a>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003588:	b25b      	sxtb	r3, r3
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d103      	bne.n	8003598 <vQueueWaitForMessageRestricted+0x40>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003598:	f001 fce4 	bl	8004f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fc61 	bl	8003e74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f7ff fefb 	bl	80033ae <prvUnlockQueue>
	}
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	; 0x38
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	623b      	str	r3, [r7, #32]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xTaskCreateStatic+0x46>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61fb      	str	r3, [r7, #28]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003606:	23a8      	movs	r3, #168	; 0xa8
 8003608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2ba8      	cmp	r3, #168	; 0xa8
 800360e:	d00a      	beq.n	8003626 <xTaskCreateStatic+0x66>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61bb      	str	r3, [r7, #24]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003626:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01e      	beq.n	800366c <xTaskCreateStatic+0xac>
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01b      	beq.n	800366c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800363c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	2202      	movs	r2, #2
 8003642:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003646:	2300      	movs	r3, #0
 8003648:	9303      	str	r3, [sp, #12]
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9302      	str	r3, [sp, #8]
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f850 	bl	8003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003666:	f000 f8f3 	bl	8003850 <prvAddNewTaskToReadyList>
 800366a:	e001      	b.n	8003670 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003670:	697b      	ldr	r3, [r7, #20]
	}
 8003672:	4618      	mov	r0, r3
 8003674:	3728      	adds	r7, #40	; 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08c      	sub	sp, #48	; 0x30
 800367e:	af04      	add	r7, sp, #16
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fd5a 	bl	8005148 <pvPortMalloc>
 8003694:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800369c:	20a8      	movs	r0, #168	; 0xa8
 800369e:	f001 fd53 	bl	8005148 <pvPortMalloc>
 80036a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
 80036b0:	e005      	b.n	80036be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036b2:	6978      	ldr	r0, [r7, #20]
 80036b4:	f001 fe14 	bl	80052e0 <vPortFree>
 80036b8:	e001      	b.n	80036be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d017      	beq.n	80036f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9303      	str	r3, [sp, #12]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f80e 	bl	8003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e8:	69f8      	ldr	r0, [r7, #28]
 80036ea:	f000 f8b1 	bl	8003850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e002      	b.n	80036fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036f4:	f04f 33ff 	mov.w	r3, #4294967295
 80036f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036fa:	69bb      	ldr	r3, [r7, #24]
	}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	461a      	mov	r2, r3
 800371c:	21a5      	movs	r1, #165	; 0xa5
 800371e:	f001 fefd 	bl	800551c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800372c:	3b01      	subs	r3, #1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	617b      	str	r3, [r7, #20]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01f      	beq.n	80037a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e012      	b.n	800378e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	7819      	ldrb	r1, [r3, #0]
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	3334      	adds	r3, #52	; 0x34
 8003778:	460a      	mov	r2, r1
 800377a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d9e9      	bls.n	8003768 <prvInitialiseNewTask+0x64>
 8003794:	e000      	b.n	8003798 <prvInitialiseNewTask+0x94>
			{
				break;
 8003796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a0:	e003      	b.n	80037aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b37      	cmp	r3, #55	; 0x37
 80037ae:	d901      	bls.n	80037b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037b0:	2337      	movs	r3, #55	; 0x37
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fe56 	bl	800247c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fe51 	bl	800247c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	3354      	adds	r3, #84	; 0x54
 8003804:	224c      	movs	r2, #76	; 0x4c
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fe87 	bl	800551c <memset>
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <prvInitialiseNewTask+0x140>)
 8003812:	659a      	str	r2, [r3, #88]	; 0x58
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <prvInitialiseNewTask+0x144>)
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <prvInitialiseNewTask+0x148>)
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	69b8      	ldr	r0, [r7, #24]
 8003826:	f001 fa3f 	bl	8004ca8 <pxPortInitialiseStack>
 800382a:	4602      	mov	r2, r0
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20001e60 	.word	0x20001e60
 8003848:	20001ec8 	.word	0x20001ec8
 800384c:	20001f30 	.word	0x20001f30

08003850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003858:	f001 fb54 	bl	8004f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 8003864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003874:	4b27      	ldr	r3, [pc, #156]	; (8003914 <prvAddNewTaskToReadyList+0xc4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d110      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800387c:	f000 fc26 	bl	80040cc <prvInitialiseTaskLists>
 8003880:	e00d      	b.n	800389e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d802      	bhi.n	800389e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <prvAddNewTaskToReadyList+0xd0>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <prvAddNewTaskToReadyList+0xd4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d903      	bls.n	80038c4 <prvAddNewTaskToReadyList+0x74>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <prvAddNewTaskToReadyList+0xd4>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <prvAddNewTaskToReadyList+0xd8>)
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fddb 	bl	8002496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038e0:	f001 fb40 	bl	8004f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <prvAddNewTaskToReadyList+0xcc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <prvAddNewTaskToReadyList+0xc8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d207      	bcs.n	800390a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <prvAddNewTaskToReadyList+0xdc>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000d40 	.word	0x20000d40
 8003918:	2000086c 	.word	0x2000086c
 800391c:	20000d4c 	.word	0x20000d4c
 8003920:	20000d5c 	.word	0x20000d5c
 8003924:	20000d48 	.word	0x20000d48
 8003928:	20000870 	.word	0x20000870
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <vTaskDelay+0x60>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <vTaskDelay+0x30>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	60bb      	str	r3, [r7, #8]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003960:	f000 f88a 	bl	8003a78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003964:	2100      	movs	r1, #0
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fdfc 	bl	8004564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800396c:	f000 f892 	bl	8003a94 <xTaskResumeAll>
 8003970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <vTaskDelay+0x64>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000d68 	.word	0x20000d68
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039a6:	463a      	mov	r2, r7
 80039a8:	1d39      	adds	r1, r7, #4
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fd10 	bl	80023d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	9202      	str	r2, [sp, #8]
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	460a      	mov	r2, r1
 80039c6:	4924      	ldr	r1, [pc, #144]	; (8003a58 <vTaskStartScheduler+0xc0>)
 80039c8:	4824      	ldr	r0, [pc, #144]	; (8003a5c <vTaskStartScheduler+0xc4>)
 80039ca:	f7ff fdf9 	bl	80035c0 <xTaskCreateStatic>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <vTaskStartScheduler+0xc8>)
 80039d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039d4:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <vTaskStartScheduler+0xc8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e001      	b.n	80039e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039ec:	f000 fe0e 	bl	800460c <xTimerCreateTimerTask>
 80039f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d11b      	bne.n	8003a30 <vTaskStartScheduler+0x98>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	613b      	str	r3, [r7, #16]
}
 8003a0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <vTaskStartScheduler+0xcc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3354      	adds	r3, #84	; 0x54
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <vTaskStartScheduler+0xd0>)
 8003a14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <vTaskStartScheduler+0xd4>)
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <vTaskStartScheduler+0xd8>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <vTaskStartScheduler+0xdc>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a2a:	f001 f9c9 	bl	8004dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a2e:	e00e      	b.n	8003a4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d10a      	bne.n	8003a4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	60fb      	str	r3, [r7, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <vTaskStartScheduler+0xb4>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08005728 	.word	0x08005728
 8003a5c:	0800409d 	.word	0x0800409d
 8003a60:	20000d64 	.word	0x20000d64
 8003a64:	2000086c 	.word	0x2000086c
 8003a68:	2000005c 	.word	0x2000005c
 8003a6c:	20000d60 	.word	0x20000d60
 8003a70:	20000d4c 	.word	0x20000d4c
 8003a74:	20000d44 	.word	0x20000d44

08003a78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <vTaskSuspendAll+0x18>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <vTaskSuspendAll+0x18>)
 8003a84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000d68 	.word	0x20000d68

08003a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aa2:	4b42      	ldr	r3, [pc, #264]	; (8003bac <xTaskResumeAll+0x118>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	603b      	str	r3, [r7, #0]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ac0:	f001 fa20 	bl	8004f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <xTaskResumeAll+0x118>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	4a38      	ldr	r2, [pc, #224]	; (8003bac <xTaskResumeAll+0x118>)
 8003acc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <xTaskResumeAll+0x118>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d162      	bne.n	8003b9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <xTaskResumeAll+0x11c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d05e      	beq.n	8003b9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ade:	e02f      	b.n	8003b40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <xTaskResumeAll+0x120>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3318      	adds	r3, #24
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fd2f 	bl	8002550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fd2a 	bl	8002550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <xTaskResumeAll+0x124>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d903      	bls.n	8003b10 <xTaskResumeAll+0x7c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <xTaskResumeAll+0x124>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <xTaskResumeAll+0x128>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fcb5 	bl	8002496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <xTaskResumeAll+0x12c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <xTaskResumeAll+0x130>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b40:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <xTaskResumeAll+0x120>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1cb      	bne.n	8003ae0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b4e:	f000 fb5f 	bl	8004210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <xTaskResumeAll+0x134>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b5e:	f000 f847 	bl	8003bf0 <xTaskIncrementTick>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <xTaskResumeAll+0x130>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f1      	bne.n	8003b5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <xTaskResumeAll+0x134>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <xTaskResumeAll+0x130>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTaskResumeAll+0x138>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b9c:	f001 f9e2 	bl	8004f64 <vPortExitCritical>

	return xAlreadyYielded;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000d68 	.word	0x20000d68
 8003bb0:	20000d40 	.word	0x20000d40
 8003bb4:	20000d00 	.word	0x20000d00
 8003bb8:	20000d48 	.word	0x20000d48
 8003bbc:	20000870 	.word	0x20000870
 8003bc0:	2000086c 	.word	0x2000086c
 8003bc4:	20000d54 	.word	0x20000d54
 8003bc8:	20000d50 	.word	0x20000d50
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <xTaskGetTickCount+0x1c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bdc:	687b      	ldr	r3, [r7, #4]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000d44 	.word	0x20000d44

08003bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <xTaskIncrementTick+0x148>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 808f 	bne.w	8003d22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c04:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <xTaskIncrementTick+0x14c>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d120      	bne.n	8003c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c18:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	603b      	str	r3, [r7, #0]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xTaskIncrementTick+0x46>
 8003c38:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <xTaskIncrementTick+0x154>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3f      	ldr	r2, [pc, #252]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4a3f      	ldr	r2, [pc, #252]	; (8003d44 <xTaskIncrementTick+0x154>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b3e      	ldr	r3, [pc, #248]	; (8003d48 <xTaskIncrementTick+0x158>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a3d      	ldr	r2, [pc, #244]	; (8003d48 <xTaskIncrementTick+0x158>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f000 fadb 	bl	8004210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <xTaskIncrementTick+0x15c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d349      	bcc.n	8003cf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c64:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <xTaskIncrementTick+0x15c>)
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	601a      	str	r2, [r3, #0]
					break;
 8003c76:	e03f      	b.n	8003cf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <xTaskIncrementTick+0x150>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d203      	bcs.n	8003c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c90:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <xTaskIncrementTick+0x15c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c96:	e02f      	b.n	8003cf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fc57 	bl	8002550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3318      	adds	r3, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe fc4e 	bl	8002550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <xTaskIncrementTick+0x160>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d903      	bls.n	8003cc8 <xTaskIncrementTick+0xd8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <xTaskIncrementTick+0x160>)
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <xTaskIncrementTick+0x164>)
 8003cd6:	441a      	add	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f7fe fbd9 	bl	8002496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <xTaskIncrementTick+0x168>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3b8      	bcc.n	8003c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf6:	e7b5      	b.n	8003c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <xTaskIncrementTick+0x168>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	4915      	ldr	r1, [pc, #84]	; (8003d54 <xTaskIncrementTick+0x164>)
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d901      	bls.n	8003d14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <xTaskIncrementTick+0x16c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e004      	b.n	8003d2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <xTaskIncrementTick+0x170>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <xTaskIncrementTick+0x170>)
 8003d2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d2c:	697b      	ldr	r3, [r7, #20]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000d68 	.word	0x20000d68
 8003d3c:	20000d44 	.word	0x20000d44
 8003d40:	20000cf8 	.word	0x20000cf8
 8003d44:	20000cfc 	.word	0x20000cfc
 8003d48:	20000d58 	.word	0x20000d58
 8003d4c:	20000d60 	.word	0x20000d60
 8003d50:	20000d48 	.word	0x20000d48
 8003d54:	20000870 	.word	0x20000870
 8003d58:	2000086c 	.word	0x2000086c
 8003d5c:	20000d54 	.word	0x20000d54
 8003d60:	20000d50 	.word	0x20000d50

08003d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <vTaskSwitchContext+0xb0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <vTaskSwitchContext+0xb4>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d78:	e046      	b.n	8003e08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <vTaskSwitchContext+0xb4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <vTaskSwitchContext+0xb8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e010      	b.n	8003daa <vTaskSwitchContext+0x46>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vTaskSwitchContext+0x3e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	491d      	ldr	r1, [pc, #116]	; (8003e20 <vTaskSwitchContext+0xbc>)
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0e4      	beq.n	8003d88 <vTaskSwitchContext+0x24>
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <vTaskSwitchContext+0xbc>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3308      	adds	r3, #8
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <vTaskSwitchContext+0x8a>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <vTaskSwitchContext+0xc0>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <vTaskSwitchContext+0xb8>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <vTaskSwitchContext+0xc0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3354      	adds	r3, #84	; 0x54
 8003e04:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <vTaskSwitchContext+0xc4>)
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000d68 	.word	0x20000d68
 8003e18:	20000d54 	.word	0x20000d54
 8003e1c:	20000d48 	.word	0x20000d48
 8003e20:	20000870 	.word	0x20000870
 8003e24:	2000086c 	.word	0x2000086c
 8003e28:	2000005c 	.word	0x2000005c

08003e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	60fb      	str	r3, [r7, #12]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <vTaskPlaceOnEventList+0x44>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3318      	adds	r3, #24
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fb3f 	bl	80024de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e60:	2101      	movs	r1, #1
 8003e62:	6838      	ldr	r0, [r7, #0]
 8003e64:	f000 fb7e 	bl	8004564 <prvAddCurrentTaskToDelayedList>
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000086c 	.word	0x2000086c

08003e74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	617b      	str	r3, [r7, #20]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7fe faf6 	bl	8002496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f000 fb53 	bl	8004564 <prvAddCurrentTaskToDelayedList>
	}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000086c 	.word	0x2000086c

08003ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	60fb      	str	r3, [r7, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	3318      	adds	r3, #24
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fb27 	bl	8002550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <xTaskRemoveFromEventList+0xb0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11d      	bne.n	8003f46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fb1e 	bl	8002550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <xTaskRemoveFromEventList+0xb4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d903      	bls.n	8003f28 <xTaskRemoveFromEventList+0x5c>
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <xTaskRemoveFromEventList+0xb4>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <xTaskRemoveFromEventList+0xb8>)
 8003f36:	441a      	add	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe faa9 	bl	8002496 <vListInsertEnd>
 8003f44:	e005      	b.n	8003f52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	480e      	ldr	r0, [pc, #56]	; (8003f88 <xTaskRemoveFromEventList+0xbc>)
 8003f4e:	f7fe faa2 	bl	8002496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <xTaskRemoveFromEventList+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d905      	bls.n	8003f6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <xTaskRemoveFromEventList+0xc4>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e001      	b.n	8003f70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f70:	697b      	ldr	r3, [r7, #20]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000d68 	.word	0x20000d68
 8003f80:	20000d48 	.word	0x20000d48
 8003f84:	20000870 	.word	0x20000870
 8003f88:	20000d00 	.word	0x20000d00
 8003f8c:	2000086c 	.word	0x2000086c
 8003f90:	20000d54 	.word	0x20000d54

08003f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <vTaskInternalSetTimeOutState+0x24>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <vTaskInternalSetTimeOutState+0x28>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	20000d58 	.word	0x20000d58
 8003fbc:	20000d44 	.word	0x20000d44

08003fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	613b      	str	r3, [r7, #16]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60fb      	str	r3, [r7, #12]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004002:	f000 ff7f 	bl	8004f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <xTaskCheckForTimeOut+0xbc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d102      	bne.n	8004026 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e023      	b.n	800406e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <xTaskCheckForTimeOut+0xc0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d007      	beq.n	8004042 <xTaskCheckForTimeOut+0x82>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e015      	b.n	800406e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	d20b      	bcs.n	8004064 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff9b 	bl	8003f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e004      	b.n	800406e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f000 ff79 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 8004072:	69fb      	ldr	r3, [r7, #28]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000d44 	.word	0x20000d44
 8004080:	20000d58 	.word	0x20000d58

08004084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <vTaskMissedYield+0x14>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000d54 	.word	0x20000d54

0800409c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040a4:	f000 f852 	bl	800414c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <prvIdleTask+0x28>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d9f9      	bls.n	80040a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <prvIdleTask+0x2c>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040c0:	e7f0      	b.n	80040a4 <prvIdleTask+0x8>
 80040c2:	bf00      	nop
 80040c4:	20000870 	.word	0x20000870
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <prvInitialiseTaskLists>:
		the calling task. */
		pxTCB = prvGetTCBFromHandle( xTaskToModify );

		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
	}

 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	e00c      	b.n	80040f2 <prvInitialiseTaskLists+0x26>
static void prvInitialiseTaskLists( void )
{
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <prvInitialiseTaskLists+0x60>)
 80040e4:	4413      	add	r3, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe f9a8 	bl	800243c <vListInitialise>

 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b37      	cmp	r3, #55	; 0x37
 80040f6:	d9ef      	bls.n	80040d8 <prvInitialiseTaskLists+0xc>
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <prvInitialiseTaskLists+0x64>)
 80040fa:	f7fe f99f 	bl	800243c <vListInitialise>
	{
 80040fe:	480d      	ldr	r0, [pc, #52]	; (8004134 <prvInitialiseTaskLists+0x68>)
 8004100:	f7fe f99c 	bl	800243c <vListInitialise>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <prvInitialiseTaskLists+0x6c>)
 8004106:	f7fe f999 	bl	800243c <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
	vListInitialise( &xDelayedTaskList2 );
 800410a:	480c      	ldr	r0, [pc, #48]	; (800413c <prvInitialiseTaskLists+0x70>)
 800410c:	f7fe f996 	bl	800243c <vListInitialise>
	vListInitialise( &xPendingReadyList );

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
	}
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <prvInitialiseTaskLists+0x74>)
 8004112:	f7fe f993 	bl	800243c <vListInitialise>
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
	}
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <prvInitialiseTaskLists+0x78>)
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <prvInitialiseTaskLists+0x64>)
 800411a:	601a      	str	r2, [r3, #0]
	#endif /* INCLUDE_vTaskSuspend */
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <prvInitialiseTaskLists+0x7c>)
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <prvInitialiseTaskLists+0x68>)
 8004120:	601a      	str	r2, [r3, #0]

 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000870 	.word	0x20000870
 8004130:	20000cd0 	.word	0x20000cd0
 8004134:	20000ce4 	.word	0x20000ce4
 8004138:	20000d00 	.word	0x20000d00
 800413c:	20000d14 	.word	0x20000d14
 8004140:	20000d2c 	.word	0x20000d2c
 8004144:	20000cf8 	.word	0x20000cf8
 8004148:	20000cfc 	.word	0x20000cfc

0800414c <prvCheckTasksWaitingTermination>:
	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
{

	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/

	#if ( INCLUDE_vTaskDelete == 1 )
	{
 8004152:	e019      	b.n	8004188 <prvCheckTasksWaitingTermination+0x3c>
		TCB_t *pxTCB;

 8004154:	f000 fed6 	bl	8004f04 <vPortEnterCritical>
		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <prvCheckTasksWaitingTermination+0x50>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	607b      	str	r3, [r7, #4]
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe f9f3 	bl	8002550 <uxListRemove>
		{
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <prvCheckTasksWaitingTermination+0x54>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3b01      	subs	r3, #1
 8004170:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <prvCheckTasksWaitingTermination+0x54>)
 8004172:	6013      	str	r3, [r2, #0]
			taskENTER_CRITICAL();
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 800417c:	6013      	str	r3, [r2, #0]
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417e:	f000 fef1 	bl	8004f64 <vPortExitCritical>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f810 	bl	80041a8 <prvDeleteTCB>
	{
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e1      	bne.n	8004154 <prvCheckTasksWaitingTermination+0x8>
				--uxDeletedTasksWaitingCleanUp;
			}
			taskEXIT_CRITICAL();

 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000d14 	.word	0x20000d14
 80041a0:	20000d40 	.word	0x20000d40
 80041a4:	20000d28 	.word	0x20000d28

080041a8 <prvDeleteTCB>:

		return uxReturn;
	}

#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls.  The call is also used by ports/demos that
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level.
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3354      	adds	r3, #84	; 0x54
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f9b9 	bl	800552c <_reclaim_reent>
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
			vPortFree( pxTCB );
		}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <prvDeleteTCB+0x2e>
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f889 	bl	80052e0 <vPortFree>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 f886 	bl	80052e0 <vPortFree>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d4:	e018      	b.n	8004208 <prvDeleteTCB+0x60>
				/* Both the stack and TCB were allocated dynamically, so both
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d103      	bne.n	80041e8 <prvDeleteTCB+0x40>
			}
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 f87d 	bl	80052e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041e6:	e00f      	b.n	8004208 <prvDeleteTCB+0x60>
			}
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d00a      	beq.n	8004208 <prvDeleteTCB+0x60>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60fb      	str	r3, [r7, #12]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <prvResetNextTaskUnblockTime>:
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}

 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <prvResetNextTaskUnblockTime+0x1a>
static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
	{
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <prvResetNextTaskUnblockTime+0x3c>)
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
 8004228:	e008      	b.n	800423c <prvResetNextTaskUnblockTime+0x2c>
	{
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <prvResetNextTaskUnblockTime+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	607b      	str	r3, [r7, #4]
		/* The new current delayed list is not empty, get the value of
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <prvResetNextTaskUnblockTime+0x3c>)
 800423a:	6013      	str	r3, [r2, #0]
		which the task at the head of the delayed list should be removed
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000cf8 	.word	0x20000cf8
 800424c:	20000d60 	.word	0x20000d60

08004250 <xTaskGetSchedulerState>:

		return xReturn;
	}

#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <xTaskGetSchedulerState+0x34>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <xTaskGetSchedulerState+0x14>
	BaseType_t xTaskGetSchedulerState( void )
	{
 800425e:	2301      	movs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	e008      	b.n	8004276 <xTaskGetSchedulerState+0x26>
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <xTaskGetSchedulerState+0x38>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
 800426c:	2302      	movs	r3, #2
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	e001      	b.n	8004276 <xTaskGetSchedulerState+0x26>
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
 8004276:	687b      	ldr	r3, [r7, #4]
				xReturn = taskSCHEDULER_SUSPENDED;
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20000d4c 	.word	0x20000d4c
 8004288:	20000d68 	.word	0x20000d68

0800428c <xTaskPriorityInherit>:

		return xReturn;
	}

#endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60bb      	str	r3, [r7, #8]
#if ( configUSE_MUTEXES == 1 )
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d051      	beq.n	8004346 <xTaskPriorityInherit+0xba>

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <xTaskPriorityInherit+0xc4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d241      	bcs.n	8004334 <xTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	db06      	blt.n	80042c6 <xTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <xTaskPriorityInherit+0xc4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	619a      	str	r2, [r3, #24]
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6959      	ldr	r1, [r3, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <xTaskPriorityInherit+0xc8>)
 80042d8:	4413      	add	r3, r2
 80042da:	4299      	cmp	r1, r3
 80042dc:	d122      	bne.n	8004324 <xTaskPriorityInherit+0x98>
				}

 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe f934 	bl	8002550 <uxListRemove>
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
					}
					else
					{
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <xTaskPriorityInherit+0xc4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
						mtCOVERAGE_TEST_MARKER();
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <xTaskPriorityInherit+0xcc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <xTaskPriorityInherit+0x7a>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <xTaskPriorityInherit+0xcc>)
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4a10      	ldr	r2, [pc, #64]	; (8004354 <xTaskPriorityInherit+0xc8>)
 8004314:	441a      	add	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe f8ba 	bl	8002496 <vListInsertEnd>
 8004322:	e004      	b.n	800432e <xTaskPriorityInherit+0xa2>
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <xTaskPriorityInherit+0xc4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
				}
 800432e:	2301      	movs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e008      	b.n	8004346 <xTaskPriorityInherit+0xba>

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <xTaskPriorityInherit+0xc4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d201      	bcs.n	8004346 <xTaskPriorityInherit+0xba>
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
				{
					/* The base priority of the mutex holder is lower than the
					priority of the task attempting to take the mutex, but the
					current priority of the mutex holder is not lower than the
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		else
 8004346:	68fb      	ldr	r3, [r7, #12]
		{
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	2000086c 	.word	0x2000086c
 8004354:	20000870 	.word	0x20000870
 8004358:	20000d48 	.word	0x20000d48

0800435c <xTaskPriorityDisinherit>:

		return xReturn;
	}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	613b      	str	r3, [r7, #16]
#if ( configUSE_MUTEXES == 1 )
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d056      	beq.n	8004420 <xTaskPriorityDisinherit+0xc4>
	{
	TCB_t * const pxTCB = pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
		{
 8004372:	4b2e      	ldr	r3, [pc, #184]	; (800442c <xTaskPriorityDisinherit+0xd0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d00a      	beq.n	8004392 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xTaskPriorityDisinherit+0x34>
			/* A task can only have an inherited priority if it holds the mutex.
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xTaskPriorityDisinherit+0x52>
			If the mutex is held by a task then it cannot be given from an
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	651a      	str	r2, [r3, #80]	; 0x50
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d02c      	beq.n	8004420 <xTaskPriorityDisinherit+0xc4>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d128      	bne.n	8004420 <xTaskPriorityDisinherit+0xc4>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
				{
					/* A task can only have an inherited priority if it holds
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe f8bc 	bl	8002550 <uxListRemove>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]

 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <xTaskPriorityDisinherit+0xd4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d903      	bls.n	8004400 <xTaskPriorityDisinherit+0xa4>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a0c      	ldr	r2, [pc, #48]	; (8004430 <xTaskPriorityDisinherit+0xd4>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <xTaskPriorityDisinherit+0xd8>)
 800440e:	441a      	add	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fe f83d 	bl	8002496 <vListInsertEnd>
					prvAddTaskToReadyList( pxTCB );

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken.
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else
 8004420:	697b      	ldr	r3, [r7, #20]
		{
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	2000086c 	.word	0x2000086c
 8004430:	20000d48 	.word	0x20000d48
 8004434:	20000870 	.word	0x20000870

08004438 <vTaskPriorityDisinheritAfterTimeout>:

		return xReturn;
	}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]

 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	61bb      	str	r3, [r7, #24]
#if ( configUSE_MUTEXES == 1 )

 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d06a      	beq.n	8004526 <vTaskPriorityDisinheritAfterTimeout+0xee>
	TCB_t * const pxTCB = pxMutexHolder;
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <vTaskPriorityDisinheritAfterTimeout+0x34>
		if( pxMutexHolder != NULL )
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );

 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d902      	bls.n	800447e <vTaskPriorityDisinheritAfterTimeout+0x46>
			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e002      	b.n	8004484 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
			{
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	61fb      	str	r3, [r7, #28]
				uxPriorityToUse = uxHighestPriorityWaitingTask;
			}
			else
			{
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	429a      	cmp	r2, r3
 800448c:	d04b      	beq.n	8004526 <vTaskPriorityDisinheritAfterTimeout+0xee>
				uxPriorityToUse = pxTCB->uxBasePriority;
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
			{
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	429a      	cmp	r2, r3
 8004496:	d146      	bne.n	8004526 <vTaskPriorityDisinheritAfterTimeout+0xee>
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d10a      	bne.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60bb      	str	r3, [r7, #8]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );

 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	613b      	str	r3, [r7, #16]
					/* Disinherit the priority, remembering the previous
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	db04      	blt.n	80044d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					pxTCB->uxPriority = uxPriorityToUse;

 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	619a      	str	r2, [r3, #24]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* If the running task is not the task that holds the mutex
					then the task that holds the mutex could be in either the
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80044e6:	4413      	add	r3, r2
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d11c      	bne.n	8004526 <vTaskPriorityDisinheritAfterTimeout+0xee>
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe f82d 	bl	8002550 <uxListRemove>
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
						}
						else
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d903      	bls.n	800450a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004518:	441a      	add	r2, r3
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7fd ffb8 	bl	8002496 <vListInsertEnd>
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
 8004526:	bf00      	nop
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000086c 	.word	0x2000086c
 8004534:	20000870 	.word	0x20000870
 8004538:	20000d48 	.word	0x20000d48

0800453c <pvTaskIncrementMutexHeldCount>:
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
/*-----------------------------------------------------------*/
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0

#if ( configUSE_MUTEXES == 1 )

 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <pvTaskIncrementMutexHeldCount+0x16>
	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454e:	3201      	adds	r2, #1
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 8004554:	681b      	ldr	r3, [r3, #0]
		{
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000086c 	.word	0x2000086c

08004564 <prvAddCurrentTaskToDelayedList>:

	uint32_t ulTaskGetIdleRunTimeCounter( void )
	{
		return xIdleTaskHandle->ulRunTimeCounter;
	}

 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
#endif
/*-----------------------------------------------------------*/
 800456e:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
	}
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd ffe8 	bl	8002550 <uxListRemove>
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d10a      	bne.n	800459e <prvAddCurrentTaskToDelayedList+0x3a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <prvAddCurrentTaskToDelayedList+0x3a>
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4819      	ldr	r0, [pc, #100]	; (80045fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004598:	f7fd ff7d 	bl	8002496 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

 800459c:	e026      	b.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
		else
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]
			does not occur.  This may overflow but this doesn't matter, the
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	605a      	str	r2, [r3, #4]
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d209      	bcs.n	80045ca <prvAddCurrentTaskToDelayedList+0x66>

 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7fd ff8b 	bl	80024de <vListInsert>

 80045c8:	e010      	b.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
			}
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fd ff81 	bl	80024de <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d202      	bcs.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
				/* If the task entering the blocked state was placed at the
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6013      	str	r3, [r2, #0]

 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000d44 	.word	0x20000d44
 80045f8:	2000086c 	.word	0x2000086c
 80045fc:	20000d2c 	.word	0x20000d2c
 8004600:	20000cfc 	.word	0x20000cfc
 8004604:	20000cf8 	.word	0x20000cf8
 8004608:	20000d60 	.word	0x20000d60

0800460c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004616:	f000 fb07 	bl	8004c28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <xTimerCreateTimerTask+0x80>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800462a:	1d3a      	adds	r2, r7, #4
 800462c:	f107 0108 	add.w	r1, r7, #8
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd fee7 	bl	8002408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	2302      	movs	r3, #2
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	460a      	mov	r2, r1
 800464c:	4910      	ldr	r1, [pc, #64]	; (8004690 <xTimerCreateTimerTask+0x84>)
 800464e:	4811      	ldr	r0, [pc, #68]	; (8004694 <xTimerCreateTimerTask+0x88>)
 8004650:	f7fe ffb6 	bl	80035c0 <xTaskCreateStatic>
 8004654:	4603      	mov	r3, r0
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <xTimerCreateTimerTask+0x8c>)
 8004658:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTimerCreateTimerTask+0x8c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	613b      	str	r3, [r7, #16]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000d9c 	.word	0x20000d9c
 8004690:	08005730 	.word	0x08005730
 8004694:	080047d1 	.word	0x080047d1
 8004698:	20000da0 	.word	0x20000da0

0800469c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	623b      	str	r3, [r7, #32]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <xTimerGenericCommand+0x98>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02a      	beq.n	8004728 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	dc18      	bgt.n	8004716 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e4:	f7ff fdb4 	bl	8004250 <xTaskGetSchedulerState>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d109      	bne.n	8004702 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <xTimerGenericCommand+0x98>)
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f107 0110 	add.w	r1, r7, #16
 80046f6:	2300      	movs	r3, #0
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	f7fe f8fb 	bl	80028f4 <xQueueGenericSend>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004700:	e012      	b.n	8004728 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <xTimerGenericCommand+0x98>)
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f107 0110 	add.w	r1, r7, #16
 800470a:	2300      	movs	r3, #0
 800470c:	2200      	movs	r2, #0
 800470e:	f7fe f8f1 	bl	80028f4 <xQueueGenericSend>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24
 8004714:	e008      	b.n	8004728 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <xTimerGenericCommand+0x98>)
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	f107 0110 	add.w	r1, r7, #16
 800471e:	2300      	movs	r3, #0
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	f7fe f9e5 	bl	8002af0 <xQueueGenericSendFromISR>
 8004726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800472a:	4618      	mov	r0, r3
 800472c:	3728      	adds	r7, #40	; 0x28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000d9c 	.word	0x20000d9c

08004738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <prvProcessExpiredTimer+0x94>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fd fefd 	bl	8002550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d022      	beq.n	80047aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	18d1      	adds	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f000 f8d1 	bl	8004918 <prvInsertTimerInActiveList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01f      	beq.n	80047bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff88 	bl	800469c <xTimerGenericCommand>
 800478c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d113      	bne.n	80047bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	4798      	blx	r3
}
 80047c4:	bf00      	nop
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000d94 	.word	0x20000d94

080047d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f857 	bl	8004890 <prvGetNextExpireTime>
 80047e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4619      	mov	r1, r3
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f803 	bl	80047f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ee:	f000 f8d5 	bl	800499c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f2:	e7f1      	b.n	80047d8 <prvTimerTask+0x8>

080047f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047fe:	f7ff f93b 	bl	8003a78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f866 	bl	80048d8 <prvSampleTimeNow>
 800480c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d130      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d806      	bhi.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004822:	f7ff f937 	bl	8003a94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff85 	bl	8004738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800482e:	e024      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <prvProcessTimerOrBlockTask+0x90>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <prvProcessTimerOrBlockTask+0x50>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <prvProcessTimerOrBlockTask+0x52>
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <prvProcessTimerOrBlockTask+0x94>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	f7fe fe7f 	bl	8003558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800485a:	f7ff f91b 	bl	8003a94 <xTaskResumeAll>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvProcessTimerOrBlockTask+0x98>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
}
 8004874:	e001      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004876:	f7ff f90d 	bl	8003a94 <xTaskResumeAll>
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000d98 	.word	0x20000d98
 8004888:	20000d9c 	.word	0x20000d9c
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <prvGetNextExpireTime+0x44>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <prvGetNextExpireTime+0x16>
 80048a2:	2201      	movs	r2, #1
 80048a4:	e000      	b.n	80048a8 <prvGetNextExpireTime+0x18>
 80048a6:	2200      	movs	r2, #0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <prvGetNextExpireTime+0x44>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e001      	b.n	80048c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000d94 	.word	0x20000d94

080048d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048e0:	f7ff f976 	bl	8003bd0 <xTaskGetTickCount>
 80048e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <prvSampleTimeNow+0x3c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d205      	bcs.n	80048fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048f0:	f000 f936 	bl	8004b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e002      	b.n	8004902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <prvSampleTimeNow+0x3c>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000da4 	.word	0x20000da4

08004918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d812      	bhi.n	8004964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e01b      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <prvInsertTimerInActiveList+0x7c>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fd fdbe 	bl	80024de <vListInsert>
 8004962:	e012      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d206      	bcs.n	800497a <prvInsertTimerInActiveList+0x62>
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e007      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvInsertTimerInActiveList+0x80>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fd fdaa 	bl	80024de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800498a:	697b      	ldr	r3, [r7, #20]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000d98 	.word	0x20000d98
 8004998:	20000d94 	.word	0x20000d94

0800499c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	; 0x38
 80049a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049a2:	e0ca      	b.n	8004b3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da18      	bge.n	80049dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	3304      	adds	r3, #4
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	61fb      	str	r3, [r7, #28]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	6850      	ldr	r0, [r2, #4]
 80049d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	4611      	mov	r1, r2
 80049da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f2c0 80ab 	blt.w	8004b3a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	3304      	adds	r3, #4
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd fdab 	bl	8002550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049fa:	463b      	mov	r3, r7
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff6b 	bl	80048d8 <prvSampleTimeNow>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b09      	cmp	r3, #9
 8004a08:	f200 8096 	bhi.w	8004b38 <prvProcessReceivedCommands+0x19c>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <prvProcessReceivedCommands+0x78>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a3d 	.word	0x08004a3d
 8004a20:	08004ab1 	.word	0x08004ab1
 8004a24:	08004ac5 	.word	0x08004ac5
 8004a28:	08004b0f 	.word	0x08004b0f
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a3d 	.word	0x08004a3d
 8004a34:	08004ab1 	.word	0x08004ab1
 8004a38:	08004ac5 	.word	0x08004ac5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	18d1      	adds	r1, r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5c:	f7ff ff5c 	bl	8004918 <prvInsertTimerInActiveList>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d069      	beq.n	8004b3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d05e      	beq.n	8004b3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	441a      	add	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8e:	f7ff fe05 	bl	800469c <xTimerGenericCommand>
 8004a92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d14f      	bne.n	8004b3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	61bb      	str	r3, [r7, #24]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ac2:	e03a      	b.n	8004b3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	617b      	str	r3, [r7, #20]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	18d1      	adds	r1, r2, r3
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b08:	f7ff ff06 	bl	8004918 <prvInsertTimerInActiveList>
					break;
 8004b0c:	e015      	b.n	8004b3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1e:	f000 fbdf 	bl	80052e0 <vPortFree>
 8004b22:	e00a      	b.n	8004b3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b36:	e000      	b.n	8004b3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <prvProcessReceivedCommands+0x1c0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1d39      	adds	r1, r7, #4
 8004b40:	2200      	movs	r2, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f8fc 	bl	8002d40 <xQueueReceive>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f af2a 	bne.w	80049a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3730      	adds	r7, #48	; 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000d9c 	.word	0x20000d9c

08004b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b66:	e048      	b.n	8004bfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b68:	4b2d      	ldr	r3, [pc, #180]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b72:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fce5 	bl	8002550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d02e      	beq.n	8004bfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d90e      	bls.n	8004bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7fd fc8a 	bl	80024de <vListInsert>
 8004bca:	e016      	b.n	8004bfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fd60 	bl	800469c <xTimerGenericCommand>
 8004bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	603b      	str	r3, [r7, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1b1      	bne.n	8004b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <prvSwitchTimerLists+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <prvSwitchTimerLists+0xc0>)
 8004c10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <prvSwitchTimerLists+0xc4>)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000d94 	.word	0x20000d94
 8004c24:	20000d98 	.word	0x20000d98

08004c28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c2e:	f000 f969 	bl	8004f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <prvCheckForValidListAndQueue+0x60>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d120      	bne.n	8004c7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c3a:	4814      	ldr	r0, [pc, #80]	; (8004c8c <prvCheckForValidListAndQueue+0x64>)
 8004c3c:	f7fd fbfe 	bl	800243c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c40:	4813      	ldr	r0, [pc, #76]	; (8004c90 <prvCheckForValidListAndQueue+0x68>)
 8004c42:	f7fd fbfb 	bl	800243c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <prvCheckForValidListAndQueue+0x6c>)
 8004c48:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <prvCheckForValidListAndQueue+0x64>)
 8004c4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <prvCheckForValidListAndQueue+0x70>)
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <prvCheckForValidListAndQueue+0x68>)
 8004c50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <prvCheckForValidListAndQueue+0x74>)
 8004c58:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <prvCheckForValidListAndQueue+0x78>)
 8004c5a:	2110      	movs	r1, #16
 8004c5c:	200a      	movs	r0, #10
 8004c5e:	f7fd fd09 	bl	8002674 <xQueueGenericCreateStatic>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <prvCheckForValidListAndQueue+0x60>)
 8004c66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <prvCheckForValidListAndQueue+0x60>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <prvCheckForValidListAndQueue+0x60>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	490b      	ldr	r1, [pc, #44]	; (8004ca4 <prvCheckForValidListAndQueue+0x7c>)
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fc1a 	bl	80034b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c7c:	f000 f972 	bl	8004f64 <vPortExitCritical>
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000d9c 	.word	0x20000d9c
 8004c8c:	20000d6c 	.word	0x20000d6c
 8004c90:	20000d80 	.word	0x20000d80
 8004c94:	20000d94 	.word	0x20000d94
 8004c98:	20000d98 	.word	0x20000d98
 8004c9c:	20000e48 	.word	0x20000e48
 8004ca0:	20000da8 	.word	0x20000da8
 8004ca4:	08005738 	.word	0x08005738

08004ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b04      	subs	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cd8:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <pxPortInitialiseStack+0x64>)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b14      	subs	r3, #20
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b04      	subs	r3, #4
 8004cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f06f 0202 	mvn.w	r2, #2
 8004cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b20      	subs	r3, #32
 8004cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	08004d11 	.word	0x08004d11

08004d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <prvTaskExitError+0x54>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d00a      	beq.n	8004d3a <prvTaskExitError+0x2a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	60fb      	str	r3, [r7, #12]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <prvTaskExitError+0x28>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60bb      	str	r3, [r7, #8]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d4e:	bf00      	nop
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0fc      	beq.n	8004d50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	2000000c 	.word	0x2000000c
	...

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d98:	4808      	ldr	r0, [pc, #32]	; (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dba:	bf00      	nop
 8004dbc:	e000ed08 	.word	0xe000ed08

08004dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <xPortStartScheduler+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10a      	bne.n	8004de6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <xPortStartScheduler+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x46>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <xPortStartScheduler+0x12c>)
 8004e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <xPortStartScheduler+0x130>)
 8004e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e34:	e009      	b.n	8004e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d0ef      	beq.n	8004e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e56:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00a      	beq.n	8004e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eae:	f000 f8dd 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <xPortStartScheduler+0x13c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eb8:	f000 f8fc 	bl	80050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ec8:	f7ff ff66 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ecc:	f7fe ff4a 	bl	8003d64 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed0:	f7ff ff1e 	bl	8004d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00
 8004ee4:	410fc271 	.word	0x410fc271
 8004ee8:	410fc270 	.word	0x410fc270
 8004eec:	e000e400 	.word	0xe000e400
 8004ef0:	20000e98 	.word	0x20000e98
 8004ef4:	20000e9c 	.word	0x20000e9c
 8004ef8:	e000ed20 	.word	0xe000ed20
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	e000ef34 	.word	0xe000ef34

08004f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10f      	bne.n	8004f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortEnterCritical+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	603b      	str	r3, [r7, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <vPortEnterCritical+0x4a>
	}
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vPortExitCritical+0x24>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <vPortExitCritical+0x42>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
}
 8004fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7fe feb8 	bl	8003d64 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7fe fdd5 	bl	8003bf0 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <xPortSysTickHandler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <vPortSetupTimerInterrupt+0x44>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	20000000 	.word	0x20000000
 80050ac:	10624dd3 	.word	0x10624dd3
 80050b0:	e000e014 	.word	0xe000e014

080050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c4 <vPortEnableVFP+0x10>
 80050b8:	6801      	ldr	r1, [r0, #0]
 80050ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050be:	6001      	str	r1, [r0, #0]
 80050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed88 	.word	0xe000ed88

080050c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ce:	f3ef 8305 	mrs	r3, IPSR
 80050d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d914      	bls.n	8005104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <vPortValidateInterruptPriority+0x70>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <vPortValidateInterruptPriority+0x74>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7afa      	ldrb	r2, [r7, #11]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20a      	bcs.n	8005104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <vPortValidateInterruptPriority+0x78>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <vPortValidateInterruptPriority+0x7c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d90a      	bls.n	800512a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	603b      	str	r3, [r7, #0]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <vPortValidateInterruptPriority+0x60>
	}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000e3f0 	.word	0xe000e3f0
 800513c:	20000e98 	.word	0x20000e98
 8005140:	e000ed0c 	.word	0xe000ed0c
 8005144:	20000e9c 	.word	0x20000e9c

08005148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005154:	f7fe fc90 	bl	8003a78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <pvPortMalloc+0x180>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005160:	f000 f920 	bl	80053a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <pvPortMalloc+0x184>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8093 	bne.w	8005298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01d      	beq.n	80051b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005178:	2208      	movs	r2, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <pvPortMalloc+0x6c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	617b      	str	r3, [r7, #20]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06e      	beq.n	8005298 <pvPortMalloc+0x150>
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <pvPortMalloc+0x188>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d869      	bhi.n	8005298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <pvPortMalloc+0x18c>)
 80051c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <pvPortMalloc+0x18c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ce:	e004      	b.n	80051da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d903      	bls.n	80051ec <pvPortMalloc+0xa4>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f1      	bne.n	80051d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <pvPortMalloc+0x180>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d050      	beq.n	8005298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	2308      	movs	r3, #8
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	429a      	cmp	r2, r3
 8005216:	d91f      	bls.n	8005258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <pvPortMalloc+0xf8>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f000 f908 	bl	8005468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <pvPortMalloc+0x188>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <pvPortMalloc+0x188>)
 8005264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <pvPortMalloc+0x188>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <pvPortMalloc+0x190>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <pvPortMalloc+0x188>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <pvPortMalloc+0x190>)
 8005278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	431a      	orrs	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <pvPortMalloc+0x194>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a11      	ldr	r2, [pc, #68]	; (80052dc <pvPortMalloc+0x194>)
 8005296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005298:	f7fe fbfc 	bl	8003a94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <pvPortMalloc+0x174>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0x172>
	return pvReturn;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20001e48 	.word	0x20001e48
 80052cc:	20001e5c 	.word	0x20001e5c
 80052d0:	20001e4c 	.word	0x20001e4c
 80052d4:	20001e40 	.word	0x20001e40
 80052d8:	20001e50 	.word	0x20001e50
 80052dc:	20001e54 	.word	0x20001e54

080052e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04d      	beq.n	800538e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f2:	2308      	movs	r3, #8
 80052f4:	425b      	negs	r3, r3
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <vPortFree+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vPortFree+0x44>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <vPortFree+0x62>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <vPortFree+0xb8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11a      	bne.n	800538e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <vPortFree+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005368:	f7fe fb86 	bl	8003a78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortFree+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4413      	add	r3, r2
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <vPortFree+0xbc>)
 8005378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800537a:	6938      	ldr	r0, [r7, #16]
 800537c:	f000 f874 	bl	8005468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <vPortFree+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <vPortFree+0xc0>)
 8005388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800538a:	f7fe fb83 	bl	8003a94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20001e5c 	.word	0x20001e5c
 800539c:	20001e4c 	.word	0x20001e4c
 80053a0:	20001e58 	.word	0x20001e58

080053a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053aa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80053ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <prvHeapInit+0xac>)
 80053b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3307      	adds	r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <prvHeapInit+0xac>)
 80053d4:	4413      	add	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053dc:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <prvHeapInit+0xb0>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <prvHeapInit+0xb0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053f0:	2208      	movs	r2, #8
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <prvHeapInit+0xb4>)
 8005404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <prvHeapInit+0xb4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <prvHeapInit+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <prvHeapInit+0xb4>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <prvHeapInit+0xb8>)
 8005432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <prvHeapInit+0xbc>)
 800543a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <prvHeapInit+0xc0>)
 800543e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000ea0 	.word	0x20000ea0
 8005454:	20001e40 	.word	0x20001e40
 8005458:	20001e48 	.word	0x20001e48
 800545c:	20001e50 	.word	0x20001e50
 8005460:	20001e4c 	.word	0x20001e4c
 8005464:	20001e5c 	.word	0x20001e5c

08005468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005470:	4b28      	ldr	r3, [pc, #160]	; (8005514 <prvInsertBlockIntoFreeList+0xac>)
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e002      	b.n	800547c <prvInsertBlockIntoFreeList+0x14>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d8f7      	bhi.n	8005476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d108      	bne.n	80054aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d118      	bne.n	80054f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d00d      	beq.n	80054e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e008      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e003      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d002      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20001e40 	.word	0x20001e40
 8005518:	20001e48 	.word	0x20001e48

0800551c <memset>:
 800551c:	4402      	add	r2, r0
 800551e:	4603      	mov	r3, r0
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	f803 1b01 	strb.w	r1, [r3], #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <_reclaim_reent>:
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <_reclaim_reent+0xa8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4283      	cmp	r3, r0
 8005532:	b570      	push	{r4, r5, r6, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	d04b      	beq.n	80055d0 <_reclaim_reent+0xa4>
 8005538:	69c3      	ldr	r3, [r0, #28]
 800553a:	b143      	cbz	r3, 800554e <_reclaim_reent+0x22>
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d144      	bne.n	80055cc <_reclaim_reent+0xa0>
 8005542:	69e3      	ldr	r3, [r4, #28]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	b111      	cbz	r1, 800554e <_reclaim_reent+0x22>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f879 	bl	8005640 <_free_r>
 800554e:	6961      	ldr	r1, [r4, #20]
 8005550:	b111      	cbz	r1, 8005558 <_reclaim_reent+0x2c>
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f874 	bl	8005640 <_free_r>
 8005558:	69e1      	ldr	r1, [r4, #28]
 800555a:	b111      	cbz	r1, 8005562 <_reclaim_reent+0x36>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f86f 	bl	8005640 <_free_r>
 8005562:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005564:	b111      	cbz	r1, 800556c <_reclaim_reent+0x40>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f86a 	bl	8005640 <_free_r>
 800556c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800556e:	b111      	cbz	r1, 8005576 <_reclaim_reent+0x4a>
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f865 	bl	8005640 <_free_r>
 8005576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005578:	b111      	cbz	r1, 8005580 <_reclaim_reent+0x54>
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f860 	bl	8005640 <_free_r>
 8005580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x5e>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 f85b 	bl	8005640 <_free_r>
 800558a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x68>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f856 	bl	8005640 <_free_r>
 8005594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005596:	b111      	cbz	r1, 800559e <_reclaim_reent+0x72>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f851 	bl	8005640 <_free_r>
 800559e:	6a23      	ldr	r3, [r4, #32]
 80055a0:	b1b3      	cbz	r3, 80055d0 <_reclaim_reent+0xa4>
 80055a2:	4620      	mov	r0, r4
 80055a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055a8:	4718      	bx	r3
 80055aa:	5949      	ldr	r1, [r1, r5]
 80055ac:	b941      	cbnz	r1, 80055c0 <_reclaim_reent+0x94>
 80055ae:	3504      	adds	r5, #4
 80055b0:	69e3      	ldr	r3, [r4, #28]
 80055b2:	2d80      	cmp	r5, #128	; 0x80
 80055b4:	68d9      	ldr	r1, [r3, #12]
 80055b6:	d1f8      	bne.n	80055aa <_reclaim_reent+0x7e>
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 f841 	bl	8005640 <_free_r>
 80055be:	e7c0      	b.n	8005542 <_reclaim_reent+0x16>
 80055c0:	680e      	ldr	r6, [r1, #0]
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f83c 	bl	8005640 <_free_r>
 80055c8:	4631      	mov	r1, r6
 80055ca:	e7ef      	b.n	80055ac <_reclaim_reent+0x80>
 80055cc:	2500      	movs	r5, #0
 80055ce:	e7ef      	b.n	80055b0 <_reclaim_reent+0x84>
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
 80055d2:	bf00      	nop
 80055d4:	2000005c 	.word	0x2000005c

080055d8 <__libc_init_array>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	4d0d      	ldr	r5, [pc, #52]	; (8005610 <__libc_init_array+0x38>)
 80055dc:	4c0d      	ldr	r4, [pc, #52]	; (8005614 <__libc_init_array+0x3c>)
 80055de:	1b64      	subs	r4, r4, r5
 80055e0:	10a4      	asrs	r4, r4, #2
 80055e2:	2600      	movs	r6, #0
 80055e4:	42a6      	cmp	r6, r4
 80055e6:	d109      	bne.n	80055fc <__libc_init_array+0x24>
 80055e8:	4d0b      	ldr	r5, [pc, #44]	; (8005618 <__libc_init_array+0x40>)
 80055ea:	4c0c      	ldr	r4, [pc, #48]	; (800561c <__libc_init_array+0x44>)
 80055ec:	f000 f880 	bl	80056f0 <_init>
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	2600      	movs	r6, #0
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	d105      	bne.n	8005606 <__libc_init_array+0x2e>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005600:	4798      	blx	r3
 8005602:	3601      	adds	r6, #1
 8005604:	e7ee      	b.n	80055e4 <__libc_init_array+0xc>
 8005606:	f855 3b04 	ldr.w	r3, [r5], #4
 800560a:	4798      	blx	r3
 800560c:	3601      	adds	r6, #1
 800560e:	e7f2      	b.n	80055f6 <__libc_init_array+0x1e>
 8005610:	080057e0 	.word	0x080057e0
 8005614:	080057e0 	.word	0x080057e0
 8005618:	080057e0 	.word	0x080057e0
 800561c:	080057e4 	.word	0x080057e4

08005620 <__retarget_lock_acquire_recursive>:
 8005620:	4770      	bx	lr

08005622 <__retarget_lock_release_recursive>:
 8005622:	4770      	bx	lr

08005624 <memcpy>:
 8005624:	440a      	add	r2, r1
 8005626:	4291      	cmp	r1, r2
 8005628:	f100 33ff 	add.w	r3, r0, #4294967295
 800562c:	d100      	bne.n	8005630 <memcpy+0xc>
 800562e:	4770      	bx	lr
 8005630:	b510      	push	{r4, lr}
 8005632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800563a:	4291      	cmp	r1, r2
 800563c:	d1f9      	bne.n	8005632 <memcpy+0xe>
 800563e:	bd10      	pop	{r4, pc}

08005640 <_free_r>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	2900      	cmp	r1, #0
 8005644:	d044      	beq.n	80056d0 <_free_r+0x90>
 8005646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564a:	9001      	str	r0, [sp, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f1a1 0404 	sub.w	r4, r1, #4
 8005652:	bfb8      	it	lt
 8005654:	18e4      	addlt	r4, r4, r3
 8005656:	f000 f83f 	bl	80056d8 <__malloc_lock>
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <_free_r+0x94>)
 800565c:	9801      	ldr	r0, [sp, #4]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	b933      	cbnz	r3, 8005670 <_free_r+0x30>
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6014      	str	r4, [r2, #0]
 8005666:	b003      	add	sp, #12
 8005668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800566c:	f000 b83a 	b.w	80056e4 <__malloc_unlock>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d908      	bls.n	8005686 <_free_r+0x46>
 8005674:	6825      	ldr	r5, [r4, #0]
 8005676:	1961      	adds	r1, r4, r5
 8005678:	428b      	cmp	r3, r1
 800567a:	bf01      	itttt	eq
 800567c:	6819      	ldreq	r1, [r3, #0]
 800567e:	685b      	ldreq	r3, [r3, #4]
 8005680:	1949      	addeq	r1, r1, r5
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	e7ed      	b.n	8005662 <_free_r+0x22>
 8005686:	461a      	mov	r2, r3
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b10b      	cbz	r3, 8005690 <_free_r+0x50>
 800568c:	42a3      	cmp	r3, r4
 800568e:	d9fa      	bls.n	8005686 <_free_r+0x46>
 8005690:	6811      	ldr	r1, [r2, #0]
 8005692:	1855      	adds	r5, r2, r1
 8005694:	42a5      	cmp	r5, r4
 8005696:	d10b      	bne.n	80056b0 <_free_r+0x70>
 8005698:	6824      	ldr	r4, [r4, #0]
 800569a:	4421      	add	r1, r4
 800569c:	1854      	adds	r4, r2, r1
 800569e:	42a3      	cmp	r3, r4
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	d1e0      	bne.n	8005666 <_free_r+0x26>
 80056a4:	681c      	ldr	r4, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	440c      	add	r4, r1
 80056ac:	6014      	str	r4, [r2, #0]
 80056ae:	e7da      	b.n	8005666 <_free_r+0x26>
 80056b0:	d902      	bls.n	80056b8 <_free_r+0x78>
 80056b2:	230c      	movs	r3, #12
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	e7d6      	b.n	8005666 <_free_r+0x26>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf04      	itt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	bf04      	itt	eq
 80056c8:	1949      	addeq	r1, r1, r5
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	6054      	str	r4, [r2, #4]
 80056ce:	e7ca      	b.n	8005666 <_free_r+0x26>
 80056d0:	b003      	add	sp, #12
 80056d2:	bd30      	pop	{r4, r5, pc}
 80056d4:	20001f9c 	.word	0x20001f9c

080056d8 <__malloc_lock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__malloc_lock+0x8>)
 80056da:	f7ff bfa1 	b.w	8005620 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	20001f98 	.word	0x20001f98

080056e4 <__malloc_unlock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__malloc_unlock+0x8>)
 80056e6:	f7ff bf9c 	b.w	8005622 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	20001f98 	.word	0x20001f98

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
