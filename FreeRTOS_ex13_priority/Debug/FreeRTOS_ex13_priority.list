
FreeRTOS_ex13_priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed0  08004ed0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004ed0  08004ed0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ed0  08004ed0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000060  08004f38  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08004f38  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001575f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb1  00000000  00000000  00035832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  000387e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee7  00000000  00000000  00039b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146aa  00000000  00000000  0003d82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d30  00000000  00000000  00051ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053c4  00000000  00000000  00148c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e00 	.word	0x08004e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004e00 	.word	0x08004e00

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa3b 	bl	800069e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f868 	bl	8000300 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fed2 	bl	8001fd8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <main+0x3c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0x40>)
 800023a:	f001 ff17 	bl	800206c <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0x44>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <main+0x48>)
 8000246:	2100      	movs	r1, #0
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x4c>)
 800024a:	f001 ff0f 	bl	800206c <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <main+0x50>)
 8000252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000254:	f001 fee4 	bl	8002020 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	bf00      	nop
 800025c:	08004e40 	.word	0x08004e40
 8000260:	080003e5 	.word	0x080003e5
 8000264:	2000007c 	.word	0x2000007c
 8000268:	08004e64 	.word	0x08004e64
 800026c:	0800041d 	.word	0x0800041d
 8000270:	20000080 	.word	0x20000080

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b096      	sub	sp, #88	; 0x58
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fcd2 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029a:	f000 fd33 	bl	8000d04 <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a4:	f000 f8e4 	bl	8000470 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a8:	2310      	movs	r3, #16
 80002aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b4:	2360      	movs	r3, #96	; 0x60
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fd75 	bl	8000db0 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002cc:	f000 f8d0 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 f93d 	bl	8001568 <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f4:	f000 f8bc 	bl	8000470 <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a28      	ldr	r2, [pc, #160]	; (80003bc <MX_GPIO_Init+0xbc>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	f003 0304 	and.w	r3, r3, #4
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a22      	ldr	r2, [pc, #136]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_GPIO_Init+0xbc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_GPIO_Init+0xbc>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fc83 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800036a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000370:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4619      	mov	r1, r3
 8000380:	480f      	ldr	r0, [pc, #60]	; (80003c0 <MX_GPIO_Init+0xc0>)
 8000382:	f000 facb 	bl	800091c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000386:	2320      	movs	r3, #32
 8000388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	4619      	mov	r1, r3
 800039c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a0:	f000 fabc 	bl	800091c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2105      	movs	r1, #5
 80003a8:	2028      	movs	r0, #40	; 0x28
 80003aa:	f000 fa8d 	bl	80008c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ae:	2028      	movs	r0, #40	; 0x28
 80003b0:	f000 faa6 	bl	8000900 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800

080003c4 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff fefd 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 80003d6:	200a      	movs	r0, #10
 80003d8:	f7ff fefa 	bl	80001d0 <ITM_SendChar>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osPriority_t priority;
  /* Infinite loop */
  for(;;)
  {
	priority = osThreadGetPriority(Task02Handle);//Get Task2 priority
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <StartTask01+0x34>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fef7 	bl	80021e4 <osThreadGetPriority>
 80003f6:	60f8      	str	r0, [r7, #12]
	Task_action('A');
 80003f8:	2041      	movs	r0, #65	; 0x41
 80003fa:	f7ff ffe3 	bl	80003c4 <Task_action>
	osThreadSetPriority(Task02Handle, priority + 1); //Increase Task2 priority by 1
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <StartTask01+0x34>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	4619      	mov	r1, r3
 8000408:	4610      	mov	r0, r2
 800040a:	f001 fec1 	bl	8002190 <osThreadSetPriority>
    HAL_Delay(1000);//Use HAL delay to eliminate context switch to Task2 due to osDelay()
 800040e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000412:	f000 f97d 	bl	8000710 <HAL_Delay>
	priority = osThreadGetPriority(Task02Handle);//Get Task2 priority
 8000416:	e7e9      	b.n	80003ec <StartTask01+0x8>
 8000418:	20000080 	.word	0x20000080

0800041c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  osPriority_t priority;
  /* Infinite loop */
  for(;;)
  {
	priority = osThreadGetPriority(Task02Handle);//Get this task priority
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <StartTask02+0x2c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fedb 	bl	80021e4 <osThreadGetPriority>
 800042e:	60f8      	str	r0, [r7, #12]
    Task_action('B');
 8000430:	2042      	movs	r0, #66	; 0x42
 8000432:	f7ff ffc7 	bl	80003c4 <Task_action>
    osThreadSetPriority(Task02Handle, priority - 2); //Decrease this task priority by 2
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <StartTask02+0x2c>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3b02      	subs	r3, #2
 800043e:	4619      	mov	r1, r3
 8000440:	4610      	mov	r0, r2
 8000442:	f001 fea5 	bl	8002190 <osThreadSetPriority>
	priority = osThreadGetPriority(Task02Handle);//Get this task priority
 8000446:	e7ed      	b.n	8000424 <StartTask02+0x8>
 8000448:	20000080 	.word	0x20000080

0800044c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d101      	bne.n	8000462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800045e:	f000 f937 	bl	80006d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40001000 	.word	0x40001000

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <HAL_MspInit+0x64>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <HAL_MspInit+0x64>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6613      	str	r3, [r2, #96]	; 0x60
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <HAL_MspInit+0x64>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_MspInit+0x64>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <HAL_MspInit+0x64>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	6593      	str	r3, [r2, #88]	; 0x58
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <HAL_MspInit+0x64>)
 80004a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2105      	movs	r1, #5
 80004b6:	f06f 0004 	mvn.w	r0, #4
 80004ba:	f000 fa05 	bl	80008c8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2105      	movs	r1, #5
 80004c2:	f06f 0003 	mvn.w	r0, #3
 80004c6:	f000 f9ff 	bl	80008c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	210f      	movs	r1, #15
 80004ce:	f06f 0001 	mvn.w	r0, #1
 80004d2:	f000 f9f9 	bl	80008c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08e      	sub	sp, #56	; 0x38
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004f2:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <HAL_InitTick+0xe0>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <HAL_InitTick+0xe0>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6593      	str	r3, [r2, #88]	; 0x58
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <HAL_InitTick+0xe0>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050a:	f107 0210 	add.w	r2, r7, #16
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f001 f9d5 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000524:	f001 f9b8 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8000528:	6378      	str	r0, [r7, #52]	; 0x34
 800052a:	e004      	b.n	8000536 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800052c:	f001 f9b4 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8000530:	4603      	mov	r3, r0
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000538:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <HAL_InitTick+0xe4>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	0c9b      	lsrs	r3, r3, #18
 8000540:	3b01      	subs	r3, #1
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <HAL_InitTick+0xe8>)
 8000546:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <HAL_InitTick+0xec>)
 8000548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <HAL_InitTick+0xe8>)
 800054c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000552:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <HAL_InitTick+0xe8>)
 8000554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000556:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <HAL_InitTick+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <HAL_InitTick+0xe8>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <HAL_InitTick+0xe8>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800056a:	4818      	ldr	r0, [pc, #96]	; (80005cc <HAL_InitTick+0xe8>)
 800056c:	f001 fa3c 	bl	80019e8 <HAL_TIM_Base_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800057a:	2b00      	cmp	r3, #0
 800057c:	d11b      	bne.n	80005b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800057e:	4813      	ldr	r0, [pc, #76]	; (80005cc <HAL_InitTick+0xe8>)
 8000580:	f001 fa94 	bl	8001aac <HAL_TIM_Base_Start_IT>
 8000584:	4603      	mov	r3, r0
 8000586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800058a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800058e:	2b00      	cmp	r3, #0
 8000590:	d111      	bne.n	80005b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000592:	2036      	movs	r0, #54	; 0x36
 8000594:	f000 f9b4 	bl	8000900 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d808      	bhi.n	80005b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800059e:	2200      	movs	r2, #0
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	2036      	movs	r0, #54	; 0x36
 80005a4:	f000 f990 	bl	80008c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_InitTick+0xf0>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	e002      	b.n	80005b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3738      	adds	r7, #56	; 0x38
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	431bde83 	.word	0x431bde83
 80005cc:	20000084 	.word	0x20000084
 80005d0:	40001000 	.word	0x40001000
 80005d4:	20000004 	.word	0x20000004

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005dc:	e7fe      	b.n	80005dc <NMI_Handler+0x4>

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000608:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800060c:	f000 fb48 	bl	8000ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TIM6_DAC_IRQHandler+0x10>)
 800061a:	f001 fab7 	bl	8001b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000084 	.word	0x20000084

08000628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <SystemInit+0x20>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <SystemInit+0x20>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000650:	f7ff ffea 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f004 fb35 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067e:	f7ff fdcf 	bl	8000220 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000684:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000690:	08004ed8 	.word	0x08004ed8
  ldr r2, =_sbss
 8000694:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000698:	20001bb4 	.word	0x20001bb4

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>

0800069e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f902 	bl	80008b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ae:	200f      	movs	r0, #15
 80006b0:	f7ff ff18 	bl	80004e4 <HAL_InitTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	e001      	b.n	80006c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c0:	f7ff fedc 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x20>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x24>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_IncTick+0x24>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000008 	.word	0x20000008
 80006f4:	200000d0 	.word	0x200000d0

080006f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <HAL_GetTick+0x14>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200000d0 	.word	0x200000d0

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff ffee 	bl	80006f8 <HAL_GetTick>
 800071c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000728:	d005      	beq.n	8000736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_Delay+0x44>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000736:	bf00      	nop
 8000738:	f7ff ffde 	bl	80006f8 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8f7      	bhi.n	8000738 <HAL_Delay+0x28>
  {
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008

08000758 <__NVIC_SetPriorityGrouping>:
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_EnableIRQ>:
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <__NVIC_EnableIRQ+0x38>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff4c 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008da:	f7ff ff61 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 80008de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	6978      	ldr	r0, [r7, #20]
 80008e6:	f7ff ffb1 	bl	800084c <NVIC_EncodePriority>
 80008ea:	4602      	mov	r2, r0
 80008ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff80 	bl	80007f8 <__NVIC_SetPriority>
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff54 	bl	80007bc <__NVIC_EnableIRQ>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092a:	e17f      	b.n	8000c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 8171 	beq.w	8000c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	2b01      	cmp	r3, #1
 800094e:	d005      	beq.n	800095c <HAL_GPIO_Init+0x40>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d130      	bne.n	80009be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000992:	2201      	movs	r2, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	091b      	lsrs	r3, r3, #4
 80009a8:	f003 0201 	and.w	r2, r3, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d118      	bne.n	80009fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009d0:	2201      	movs	r2, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f003 0201 	and.w	r2, r3, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d017      	beq.n	8000a38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d123      	bne.n	8000a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	691a      	ldr	r2, [r3, #16]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	08da      	lsrs	r2, r3, #3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3208      	adds	r2, #8
 8000a86:	6939      	ldr	r1, [r7, #16]
 8000a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0203 	and.w	r2, r3, #3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80ac 	beq.w	8000c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b5f      	ldr	r3, [pc, #380]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a5e      	ldr	r2, [pc, #376]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae6:	4a5a      	ldr	r2, [pc, #360]	; (8000c50 <HAL_GPIO_Init+0x334>)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	3302      	adds	r3, #2
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b10:	d025      	beq.n	8000b5e <HAL_GPIO_Init+0x242>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <HAL_GPIO_Init+0x338>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d01f      	beq.n	8000b5a <HAL_GPIO_Init+0x23e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4e      	ldr	r2, [pc, #312]	; (8000c58 <HAL_GPIO_Init+0x33c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d019      	beq.n	8000b56 <HAL_GPIO_Init+0x23a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4d      	ldr	r2, [pc, #308]	; (8000c5c <HAL_GPIO_Init+0x340>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0x236>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_GPIO_Init+0x344>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00d      	beq.n	8000b4e <HAL_GPIO_Init+0x232>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_GPIO_Init+0x348>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <HAL_GPIO_Init+0x22e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4a      	ldr	r2, [pc, #296]	; (8000c68 <HAL_GPIO_Init+0x34c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_GPIO_Init+0x22a>
 8000b42:	2306      	movs	r3, #6
 8000b44:	e00c      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b46:	2307      	movs	r3, #7
 8000b48:	e00a      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e008      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b52:	2303      	movs	r3, #3
 8000b54:	e004      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	f002 0203 	and.w	r2, r2, #3
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	4093      	lsls	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b70:	4937      	ldr	r1, [pc, #220]	; (8000c50 <HAL_GPIO_Init+0x334>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba2:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_GPIO_Init+0x350>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f ae78 	bne.w	800092c <HAL_GPIO_Init+0x10>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48001400 	.word	0x48001400
 8000c68:	48001800 	.word	0x48001800
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f806 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40007000 	.word	0x40007000

08000d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d12:	d130      	bne.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d20:	d038      	beq.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2232      	movs	r2, #50	; 0x32
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d48:	e002      	b.n	8000d50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5c:	d102      	bne.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f2      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d70:	d110      	bne.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e00f      	b.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d82:	d007      	beq.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40007000 	.word	0x40007000
 8000da8:	20000000 	.word	0x20000000
 8000dac:	431bde83 	.word	0x431bde83

08000db0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e3ca      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dc2:	4b97      	ldr	r3, [pc, #604]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dcc:	4b94      	ldr	r3, [pc, #592]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80e4 	beq.w	8000fac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_RCC_OscConfig+0x4a>
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	2b0c      	cmp	r3, #12
 8000dee:	f040 808b 	bne.w	8000f08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	f040 8087 	bne.w	8000f08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dfa:	4b89      	ldr	r3, [pc, #548]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <HAL_RCC_OscConfig+0x62>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e3a2      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1a      	ldr	r2, [r3, #32]
 8000e16:	4b82      	ldr	r3, [pc, #520]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <HAL_RCC_OscConfig+0x7c>
 8000e22:	4b7f      	ldr	r3, [pc, #508]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e2a:	e005      	b.n	8000e38 <HAL_RCC_OscConfig+0x88>
 8000e2c:	4b7c      	ldr	r3, [pc, #496]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d223      	bcs.n	8000e84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fd71 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e383      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e50:	4b73      	ldr	r3, [pc, #460]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a72      	ldr	r2, [pc, #456]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b70      	ldr	r3, [pc, #448]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	496d      	ldr	r1, [pc, #436]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e6e:	4b6c      	ldr	r3, [pc, #432]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	4968      	ldr	r1, [pc, #416]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
 8000e82:	e025      	b.n	8000ed0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e84:	4b66      	ldr	r3, [pc, #408]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a65      	ldr	r2, [pc, #404]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4960      	ldr	r1, [pc, #384]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	495b      	ldr	r1, [pc, #364]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d109      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fd31 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e343      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ed0:	f000 fc4a 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	4950      	ldr	r1, [pc, #320]	; (8001024 <HAL_RCC_OscConfig+0x274>)
 8000ee2:	5ccb      	ldrb	r3, [r1, r3]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_RCC_OscConfig+0x278>)
 8000eee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <HAL_RCC_OscConfig+0x27c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff faf5 	bl	80004e4 <HAL_InitTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d052      	beq.n	8000faa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	e327      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d032      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f10:	4b43      	ldr	r3, [pc, #268]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a42      	ldr	r2, [pc, #264]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fbec 	bl	80006f8 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f24:	f7ff fbe8 	bl	80006f8 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e310      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a36      	ldr	r2, [pc, #216]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4931      	ldr	r1, [pc, #196]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	492c      	ldr	r1, [pc, #176]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
 8000f74:	e01a      	b.n	8000fac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fbb9 	bl	80006f8 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fbb5 	bl	80006f8 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e2dd      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x1da>
 8000fa8:	e000      	b.n	8000fac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000faa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d074      	beq.n	80010a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d005      	beq.n	8000fca <HAL_RCC_OscConfig+0x21a>
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d10e      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d064      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2f0>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d160      	bne.n	80010a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e2ba      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x24a>
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e026      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001002:	d115      	bne.n	8001030 <HAL_RCC_OscConfig+0x280>
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a02      	ldr	r2, [pc, #8]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8001016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e014      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	08004e88 	.word	0x08004e88
 8001028:	20000000 	.word	0x20000000
 800102c:	20000004 	.word	0x20000004
 8001030:	4ba0      	ldr	r3, [pc, #640]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a9f      	ldr	r2, [pc, #636]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b9d      	ldr	r3, [pc, #628]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a9c      	ldr	r2, [pc, #624]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fb52 	bl	80006f8 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fb4e 	bl	80006f8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e276      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800106a:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x2a8>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fb3e 	bl	80006f8 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fb3a 	bl	80006f8 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e262      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001092:	4b88      	ldr	r3, [pc, #544]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x2d0>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d060      	beq.n	8001170 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_OscConfig+0x310>
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d119      	bne.n	80010ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d116      	bne.n	80010ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c0:	4b7c      	ldr	r3, [pc, #496]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x328>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e23f      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	061b      	lsls	r3, r3, #24
 80010e6:	4973      	ldr	r1, [pc, #460]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ec:	e040      	b.n	8001170 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d023      	beq.n	800113e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f6:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001102:	f7ff faf9 	bl	80006f8 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff faf5 	bl	80006f8 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e21d      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111c:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	061b      	lsls	r3, r3, #24
 8001136:	495f      	ldr	r1, [pc, #380]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e018      	b.n	8001170 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a5c      	ldr	r2, [pc, #368]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fad5 	bl	80006f8 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fad1 	bl	80006f8 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e1f9      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d03c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01c      	beq.n	80011be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118a:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fab0 	bl	80006f8 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff faac 	bl	80006f8 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1d4      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ef      	beq.n	800119c <HAL_RCC_OscConfig+0x3ec>
 80011bc:	e01b      	b.n	80011f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80011c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c4:	4a3b      	ldr	r2, [pc, #236]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff fa93 	bl	80006f8 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fa8f 	bl	80006f8 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e1b7      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ef      	bne.n	80011d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80a6 	beq.w	8001350 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122c:	2301      	movs	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_RCC_OscConfig+0x508>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d118      	bne.n	800126e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_RCC_OscConfig+0x508>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_RCC_OscConfig+0x508>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001248:	f7ff fa56 	bl	80006f8 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001250:	f7ff fa52 	bl	80006f8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e17a      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x508>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_RCC_OscConfig+0x4d8>
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001286:	e029      	b.n	80012dc <HAL_RCC_OscConfig+0x52c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d115      	bne.n	80012bc <HAL_RCC_OscConfig+0x50c>
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_RCC_OscConfig+0x504>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b0:	e014      	b.n	80012dc <HAL_RCC_OscConfig+0x52c>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40007000 	.word	0x40007000
 80012bc:	4b9c      	ldr	r3, [pc, #624]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80012be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c2:	4a9b      	ldr	r2, [pc, #620]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012cc:	4b98      	ldr	r3, [pc, #608]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	4a97      	ldr	r2, [pc, #604]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d016      	beq.n	8001312 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fa08 	bl	80006f8 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa04 	bl	80006f8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e12a      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001302:	4b8b      	ldr	r3, [pc, #556]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ed      	beq.n	80012ec <HAL_RCC_OscConfig+0x53c>
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff f9f1 	bl	80006f8 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff f9ed 	bl	80006f8 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e113      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001330:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ed      	bne.n	800131a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001344:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 800134a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80fe 	beq.w	8001556 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 80d0 	bne.w	8001504 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001364:	4b72      	ldr	r3, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	429a      	cmp	r2, r3
 8001376:	d130      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	3b01      	subs	r3, #1
 8001384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d127      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001394:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d11f      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a4:	2a07      	cmp	r2, #7
 80013a6:	bf14      	ite	ne
 80013a8:	2201      	movne	r2, #1
 80013aa:	2200      	moveq	r2, #0
 80013ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d113      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	3b01      	subs	r3, #1
 80013c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d109      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	3b01      	subs	r3, #1
 80013d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d06e      	beq.n	80014b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	d069      	beq.n	80014b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0ad      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013fc:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001406:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001408:	f7ff f976 	bl	80006f8 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f972 	bl	80006f8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e09a      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <HAL_RCC_OscConfig+0x784>)
 8001434:	4013      	ands	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143e:	3a01      	subs	r2, #1
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	4311      	orrs	r1, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	4311      	orrs	r1, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001450:	0852      	lsrs	r2, r2, #1
 8001452:	3a01      	subs	r2, #1
 8001454:	0552      	lsls	r2, r2, #21
 8001456:	4311      	orrs	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800145c:	0852      	lsrs	r2, r2, #1
 800145e:	3a01      	subs	r2, #1
 8001460:	0652      	lsls	r2, r2, #25
 8001462:	4311      	orrs	r1, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001468:	0912      	lsrs	r2, r2, #4
 800146a:	0452      	lsls	r2, r2, #17
 800146c:	430a      	orrs	r2, r1
 800146e:	4930      	ldr	r1, [pc, #192]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800148c:	f7ff f934 	bl	80006f8 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f930 	bl	80006f8 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e058      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b2:	e050      	b.n	8001556 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e04f      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d148      	bne.n	8001556 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014dc:	f7ff f90c 	bl	80006f8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f908 	bl	80006f8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e030      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x734>
 8001502:	e028      	b.n	8001556 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d023      	beq.n	8001552 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_RCC_OscConfig+0x780>)
 8001510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff f8ef 	bl	80006f8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	e00c      	b.n	8001538 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f8eb 	bl	80006f8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d905      	bls.n	8001538 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e013      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
 8001530:	40021000 	.word	0x40021000
 8001534:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_OscConfig+0x7b0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ec      	bne.n	800151e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x7b0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4905      	ldr	r1, [pc, #20]	; (8001560 <HAL_RCC_OscConfig+0x7b0>)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x7b4>)
 800154c:	4013      	ands	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e001      	b.n	8001556 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	feeefffc 	.word	0xfeeefffc

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0e7      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d910      	bls.n	80015ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0207 	bic.w	r2, r3, #7
 8001592:	4970      	ldr	r1, [pc, #448]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cf      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d010      	beq.n	80015da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d908      	bls.n	80015da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4960      	ldr	r1, [pc, #384]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04c      	beq.n	8001680 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d121      	bne.n	800163e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0a6      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d115      	bne.n	800163e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e09a      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e08e      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e086      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4943      	ldr	r1, [pc, #268]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001650:	f7ff f852 	bl	80006f8 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff f84e 	bl	80006f8 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e06e      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001698:	429a      	cmp	r2, r3
 800169a:	d208      	bcs.n	80016ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	492b      	ldr	r1, [pc, #172]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d210      	bcs.n	80016de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 0207 	bic.w	r2, r3, #7
 80016c4:	4923      	ldr	r1, [pc, #140]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_ClockConfig+0x1ec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e036      	b.n	800174c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4918      	ldr	r1, [pc, #96]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4910      	ldr	r1, [pc, #64]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171c:	f000 f824 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_RCC_ClockConfig+0x1f0>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	490b      	ldr	r1, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1f4>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1fc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fecf 	bl	80004e4 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	72fb      	strb	r3, [r7, #11]

  return status;
 800174a:	7afb      	ldrb	r3, [r7, #11]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40022000 	.word	0x40022000
 8001758:	40021000 	.word	0x40021000
 800175c:	08004e88 	.word	0x08004e88
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x34>
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d121      	bne.n	80017da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d11e      	bne.n	80017da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017c4:	4a2b      	ldr	r2, [pc, #172]	; (8001874 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10d      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_GetSysClockFreq+0x110>)
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	e004      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_RCC_GetSysClockFreq+0x114>)
 80017ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d134      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0xa6>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d003      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0xac>
 800180c:	e005      	b.n	800181a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_RCC_GetSysClockFreq+0x110>)
 8001810:	617b      	str	r3, [r7, #20]
      break;
 8001812:	e005      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_GetSysClockFreq+0x114>)
 8001816:	617b      	str	r3, [r7, #20]
      break;
 8001818:	e002      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	617b      	str	r3, [r7, #20]
      break;
 800181e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	3301      	adds	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	fb03 f202 	mul.w	r2, r3, r2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_GetSysClockFreq+0x108>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	0e5b      	lsrs	r3, r3, #25
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	3301      	adds	r3, #1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001860:	69bb      	ldr	r3, [r7, #24]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	08004ea0 	.word	0x08004ea0
 8001878:	00f42400 	.word	0x00f42400
 800187c:	007a1200 	.word	0x007a1200

08001880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_RCC_GetHCLKFreq+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000000 	.word	0x20000000

08001898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800189c:	f7ff fff0 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08004e98 	.word	0x08004e98

080018c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_RCC_GetClockConfig+0x60>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	40022000 	.word	0x40022000

08001928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001940:	f7ff f9d2 	bl	8000ce8 <HAL_PWREx_GetVoltageRange>
 8001944:	6178      	str	r0, [r7, #20]
 8001946:	e014      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001960:	f7ff f9c2 	bl	8000ce8 <HAL_PWREx_GetVoltageRange>
 8001964:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001978:	d10b      	bne.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d919      	bls.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2ba0      	cmp	r3, #160	; 0xa0
 8001984:	d902      	bls.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e013      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800198c:	2301      	movs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e010      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d902      	bls.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001998:	2303      	movs	r3, #3
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e00a      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d102      	bne.n	80019aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e004      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b70      	cmp	r3, #112	; 0x70
 80019ae:	d101      	bne.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e049      	b.n	8001a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f841 	bl	8001a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 f9da 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d001      	beq.n	8001ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e04f      	b.n	8001b64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01d      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aee:	d018      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00e      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d009      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d004      	beq.n	8001b22 <HAL_TIM_Base_Start_IT+0x76>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d115      	bne.n	8001b4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d015      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0xb4>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d011      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	e008      	b.n	8001b60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e000      	b.n	8001b62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40012c00 	.word	0x40012c00
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40000c00 	.word	0x40000c00
 8001b80:	40013400 	.word	0x40013400
 8001b84:	40014000 	.word	0x40014000
 8001b88:	00010007 	.word	0x00010007

08001b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d020      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0202 	mvn.w	r2, #2
 8001bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8e4 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e005      	b.n	8001bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8d6 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8e7 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d020      	beq.n	8001c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0204 	mvn.w	r2, #4
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8be 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8b0 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8c1 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d020      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0208 	mvn.w	r2, #8
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f898 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f88a 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f89b 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d020      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0210 	mvn.w	r2, #16
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f872 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f864 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f875 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0201 	mvn.w	r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fbaa 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f906 	bl	8001f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8fe 	bl	8001f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f834 	bl	8001dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0220 	mvn.w	r2, #32
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8c6 	bl	8001f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <TIM_Base_SetConfig+0x114>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d00f      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <TIM_Base_SetConfig+0x118>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00b      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <TIM_Base_SetConfig+0x11c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <TIM_Base_SetConfig+0x120>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <TIM_Base_SetConfig+0x124>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d108      	bne.n	8001e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <TIM_Base_SetConfig+0x114>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d01b      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <TIM_Base_SetConfig+0x118>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d017      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <TIM_Base_SetConfig+0x11c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <TIM_Base_SetConfig+0x120>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <TIM_Base_SetConfig+0x124>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00b      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <TIM_Base_SetConfig+0x128>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_Base_SetConfig+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <TIM_Base_SetConfig+0x130>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <TIM_Base_SetConfig+0x114>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <TIM_Base_SetConfig+0x124>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <TIM_Base_SetConfig+0x128>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0xf8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <TIM_Base_SetConfig+0x130>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d103      	bne.n	8001ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	615a      	str	r2, [r3, #20]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800
 8001f00:	40000c00 	.word	0x40000c00
 8001f04:	40013400 	.word	0x40013400
 8001f08:	40014000 	.word	0x40014000
 8001f0c:	40014400 	.word	0x40014400
 8001f10:	40014800 	.word	0x40014800

08001f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <__NVIC_SetPriority>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Handler+0x1c>)
 8001faa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fac:	f001 fdd8 	bl	8003b60 <xTaskGetSchedulerState>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fb6:	f002 fbbf 	bl	8004738 <xPortSysTickHandler>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f06f 0004 	mvn.w	r0, #4
 8001fce:	f7ff ffbf 	bl	8001f50 <__NVIC_SetPriority>
#endif
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fde:	f3ef 8305 	mrs	r3, IPSR
 8001fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fea:	f06f 0305 	mvn.w	r3, #5
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e00c      	b.n	800200c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <osKernelInitialize+0x44>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <osKernelInitialize+0x44>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e002      	b.n	800200c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200000d4 	.word	0x200000d4

08002020 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002026:	f3ef 8305 	mrs	r3, IPSR
 800202a:	603b      	str	r3, [r7, #0]
  return(result);
 800202c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002032:	f06f 0305 	mvn.w	r3, #5
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	e010      	b.n	800205c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <osKernelStart+0x48>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d109      	bne.n	8002056 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002042:	f7ff ffbf 	bl	8001fc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <osKernelStart+0x48>)
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800204c:	f001 f92c 	bl	80032a8 <vTaskStartScheduler>
      stat = osOK;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	e002      	b.n	800205c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000d4 	.word	0x200000d4

0800206c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af04      	add	r7, sp, #16
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800207c:	f3ef 8305 	mrs	r3, IPSR
 8002080:	617b      	str	r3, [r7, #20]
  return(result);
 8002082:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002084:	2b00      	cmp	r3, #0
 8002086:	d17e      	bne.n	8002186 <osThreadNew+0x11a>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d07b      	beq.n	8002186 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002092:	2318      	movs	r3, #24
 8002094:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d045      	beq.n	8002132 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <osThreadNew+0x48>
        name = attr->name;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <osThreadNew+0x6e>
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b38      	cmp	r3, #56	; 0x38
 80020cc:	d805      	bhi.n	80020da <osThreadNew+0x6e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <osThreadNew+0x72>
        return (NULL);
 80020da:	2300      	movs	r3, #0
 80020dc:	e054      	b.n	8002188 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <osThreadNew+0xa8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2ba7      	cmp	r3, #167	; 0xa7
 80020fc:	d90a      	bls.n	8002114 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <osThreadNew+0xa8>
        mem = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	e010      	b.n	8002136 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10c      	bne.n	8002136 <osThreadNew+0xca>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <osThreadNew+0xca>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <osThreadNew+0xca>
          mem = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e001      	b.n	8002136 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d110      	bne.n	800215e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002144:	9202      	str	r2, [sp, #8]
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fe38 	bl	8002dc8 <xTaskCreateStatic>
 8002158:	4603      	mov	r3, r0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e013      	b.n	8002186 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d110      	bne.n	8002186 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	b29a      	uxth	r2, r3
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fe83 	bl	8002e82 <xTaskCreate>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <osThreadNew+0x11a>
            hTask = NULL;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002186:	693b      	ldr	r3, [r7, #16]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800219e:	f3ef 8305 	mrs	r3, IPSR
 80021a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 80021aa:	f06f 0305 	mvn.w	r3, #5
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	e013      	b.n	80021da <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <osThreadSetPriority+0x34>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	dd02      	ble.n	80021c4 <osThreadSetPriority+0x34>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b38      	cmp	r3, #56	; 0x38
 80021c2:	dd03      	ble.n	80021cc <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 80021c4:	f06f 0303 	mvn.w	r3, #3
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e006      	b.n	80021da <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	6938      	ldr	r0, [r7, #16]
 80021d6:	f000 ffc9 	bl	800316c <vTaskPrioritySet>
  }

  return (stat);
 80021da:	697b      	ldr	r3, [r7, #20]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <osThreadGetPriority>:

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021f0:	f3ef 8305 	mrs	r3, IPSR
 80021f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021f6:	68fb      	ldr	r3, [r7, #12]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <osThreadGetPriority+0x1e>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <osThreadGetPriority+0x26>
    prio = osPriorityError;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e004      	b.n	8002214 <osThreadGetPriority+0x30>
  } else {
    prio = (osPriority_t)((int32_t)uxTaskPriorityGet (hTask));
 800220a:	6938      	ldr	r0, [r7, #16]
 800220c:	f000 ff94 	bl	8003138 <uxTaskPriorityGet>
 8002210:	4603      	mov	r3, r0
 8002212:	617b      	str	r3, [r7, #20]
  }

  return (prio);
 8002214:	697b      	ldr	r3, [r7, #20]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <vApplicationGetIdleTaskMemory+0x2c>)
 8002230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <vApplicationGetIdleTaskMemory+0x30>)
 8002236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200000d8 	.word	0x200000d8
 8002250:	20000180 	.word	0x20000180

08002254 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <vApplicationGetTimerTaskMemory+0x2c>)
 8002264:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <vApplicationGetTimerTaskMemory+0x30>)
 800226a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000380 	.word	0x20000380
 8002284:	20000428 	.word	0x20000428

08002288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 0208 	add.w	r2, r3, #8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d103      	bne.n	800234a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e00c      	b.n	8002364 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3308      	adds	r3, #8
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e002      	b.n	8002358 <vListInsert+0x2e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d2f6      	bcs.n	8002352 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6892      	ldr	r2, [r2, #8]
 80023b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6852      	ldr	r2, [r2, #4]
 80023bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d103      	bne.n	80023d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800241a:	f002 f8fb 	bl	8004614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	441a      	add	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	3b01      	subs	r3, #1
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	441a      	add	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01a      	beq.n	80024ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3310      	adds	r3, #16
 800247c:	4618      	mov	r0, r3
 800247e:	f001 f9ad 	bl	80037dc <xTaskRemoveFromEventList>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <xQueueGenericReset+0xcc>)
 800248a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	e009      	b.n	80024ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3310      	adds	r3, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fef2 	bl	8002288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3324      	adds	r3, #36	; 0x24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff feed 	bl	8002288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024ae:	f002 f8e1 	bl	8004674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	e000ed04 	.word	0xe000ed04

080024c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	; 0x38
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <xQueueGenericCreateStatic+0x52>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <xQueueGenericCreateStatic+0x56>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <xQueueGenericCreateStatic+0x58>
 8002516:	2300      	movs	r3, #0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	623b      	str	r3, [r7, #32]
}
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <xQueueGenericCreateStatic+0x7e>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <xQueueGenericCreateStatic+0x82>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <xQueueGenericCreateStatic+0x84>
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	61fb      	str	r3, [r7, #28]
}
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800255e:	2350      	movs	r3, #80	; 0x50
 8002560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b50      	cmp	r3, #80	; 0x50
 8002566:	d00a      	beq.n	800257e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800257e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002592:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4613      	mov	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f805 	bl	80025b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3730      	adds	r7, #48	; 0x30
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e002      	b.n	80025d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025de:	2101      	movs	r1, #1
 80025e0:	69b8      	ldr	r0, [r7, #24]
 80025e2:	f7ff ff05 	bl	80023f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueGenericSend+0x32>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <xQueueGenericSend+0x40>
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <xQueueGenericSend+0x44>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <xQueueGenericSend+0x46>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <xQueueGenericSend+0x60>
	__asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002654:	bf00      	nop
 8002656:	e7fe      	b.n	8002656 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d103      	bne.n	8002666 <xQueueGenericSend+0x6e>
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <xQueueGenericSend+0x72>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueGenericSend+0x74>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericSend+0x8e>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	623b      	str	r3, [r7, #32]
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002686:	f001 fa6b 	bl	8003b60 <xTaskGetSchedulerState>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <xQueueGenericSend+0x9e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <xQueueGenericSend+0xa2>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <xQueueGenericSend+0xa4>
 800269a:	2300      	movs	r3, #0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61fb      	str	r3, [r7, #28]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026b6:	f001 ffad 	bl	8004614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <xQueueGenericSend+0xd4>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d129      	bne.n	8002720 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d2:	f000 fa0b 	bl	8002aec <prvCopyDataToQueue>
 80026d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 f879 	bl	80037dc <xTaskRemoveFromEventList>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <xQueueGenericSend+0x1f8>)
 80026f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	e00a      	b.n	8002718 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <xQueueGenericSend+0x1f8>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002718:	f001 ffac 	bl	8004674 <vPortExitCritical>
				return pdPASS;
 800271c:	2301      	movs	r3, #1
 800271e:	e063      	b.n	80027e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002726:	f001 ffa5 	bl	8004674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800272a:	2300      	movs	r3, #0
 800272c:	e05c      	b.n	80027e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f8b3 	bl	80038a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800273e:	2301      	movs	r3, #1
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002742:	f001 ff97 	bl	8004674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002746:	f000 fe1f 	bl	8003388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800274a:	f001 ff63 	bl	8004614 <vPortEnterCritical>
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002754:	b25b      	sxtb	r3, r3
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d103      	bne.n	8002764 <xQueueGenericSend+0x16c>
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276a:	b25b      	sxtb	r3, r3
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d103      	bne.n	800277a <xQueueGenericSend+0x182>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800277a:	f001 ff7b 	bl	8004674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800277e:	1d3a      	adds	r2, r7, #4
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f001 f8a2 	bl	80038d0 <xTaskCheckForTimeOut>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d124      	bne.n	80027dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002794:	f000 faa2 	bl	8002cdc <prvIsQueueFull>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	3310      	adds	r3, #16
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 ffc8 	bl	800373c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ae:	f000 fa2d 	bl	8002c0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027b2:	f000 fdf7 	bl	80033a4 <xTaskResumeAll>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f47f af7c 	bne.w	80026b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <xQueueGenericSend+0x1f8>)
 80027c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	e772      	b.n	80026b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f000 fa1b 	bl	8002c0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027d6:	f000 fde5 	bl	80033a4 <xTaskResumeAll>
 80027da:	e76c      	b.n	80026b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027de:	f000 fa15 	bl	8002c0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027e2:	f000 fddf 	bl	80033a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3738      	adds	r7, #56	; 0x38
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b090      	sub	sp, #64	; 0x40
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <xQueueGenericSendFromISR+0x3c>
 8002828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <xQueueGenericSendFromISR+0x40>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <xQueueGenericSendFromISR+0x42>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <xQueueGenericSendFromISR+0x6a>
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <xQueueGenericSendFromISR+0x6e>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueGenericSendFromISR+0x70>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	623b      	str	r3, [r7, #32]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800287e:	f001 ffab 	bl	80047d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002882:	f3ef 8211 	mrs	r2, BASEPRI
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	61fa      	str	r2, [r7, #28]
 8002898:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800289a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <xQueueGenericSendFromISR+0xbc>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d12f      	bne.n	8002910 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028c6:	f000 f911 	bl	8002aec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d112      	bne.n	80028fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 ff7b 	bl	80037dc <xTaskRemoveFromEventList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e007      	b.n	800290a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028fe:	3301      	adds	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	b25a      	sxtb	r2, r3
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800290a:	2301      	movs	r3, #1
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800290e:	e001      	b.n	8002914 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002910:	2300      	movs	r3, #0
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800291e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002922:	4618      	mov	r0, r3
 8002924:	3740      	adds	r7, #64	; 0x40
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <xQueueReceive+0x30>
	__asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	623b      	str	r3, [r7, #32]
}
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <xQueueReceive+0x3e>
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <xQueueReceive+0x42>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <xQueueReceive+0x44>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xQueueReceive+0x5e>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	61fb      	str	r3, [r7, #28]
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800298a:	f001 f8e9 	bl	8003b60 <xTaskGetSchedulerState>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <xQueueReceive+0x6e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <xQueueReceive+0x72>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xQueueReceive+0x74>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueReceive+0x8e>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	61bb      	str	r3, [r7, #24]
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ba:	f001 fe2b 	bl	8004614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01f      	beq.n	8002a0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ce:	f000 f8f7 	bl	8002bc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00f      	beq.n	8002a02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	3310      	adds	r3, #16
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fef8 	bl	80037dc <xTaskRemoveFromEventList>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <xQueueReceive+0x1bc>)
 80029f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a02:	f001 fe37 	bl	8004674 <vPortExitCritical>
				return pdPASS;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e069      	b.n	8002ade <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a10:	f001 fe30 	bl	8004674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e062      	b.n	8002ade <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 ff3e 	bl	80038a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a2c:	f001 fe22 	bl	8004674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a30:	f000 fcaa 	bl	8003388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a34:	f001 fdee 	bl	8004614 <vPortEnterCritical>
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d103      	bne.n	8002a4e <xQueueReceive+0x122>
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d103      	bne.n	8002a64 <xQueueReceive+0x138>
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a64:	f001 fe06 	bl	8004674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a68:	1d3a      	adds	r2, r7, #4
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 ff2d 	bl	80038d0 <xTaskCheckForTimeOut>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d123      	bne.n	8002ac4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7e:	f000 f917 	bl	8002cb0 <prvIsQueueEmpty>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d017      	beq.n	8002ab8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	3324      	adds	r3, #36	; 0x24
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fe53 	bl	800373c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a98:	f000 f8b8 	bl	8002c0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a9c:	f000 fc82 	bl	80033a4 <xTaskResumeAll>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d189      	bne.n	80029ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <xQueueReceive+0x1bc>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	e780      	b.n	80029ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aba:	f000 f8a7 	bl	8002c0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002abe:	f000 fc71 	bl	80033a4 <xTaskResumeAll>
 8002ac2:	e77a      	b.n	80029ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac6:	f000 f8a1 	bl	8002c0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aca:	f000 fc6b 	bl	80033a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad0:	f000 f8ee 	bl	8002cb0 <prvIsQueueEmpty>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f43f af6f 	beq.w	80029ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002adc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3730      	adds	r7, #48	; 0x30
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14d      	bne.n	8002bae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f840 	bl	8003b9c <xTaskPriorityDisinherit>
 8002b1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	e043      	b.n	8002bae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d119      	bne.n	8002b60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6858      	ldr	r0, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	461a      	mov	r2, r3
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	f002 f8fc 	bl	8004d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	441a      	add	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d32b      	bcc.n	8002bae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e026      	b.n	8002bae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68d8      	ldr	r0, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	f002 f8e2 	bl	8004d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	425b      	negs	r3, r3
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d207      	bcs.n	8002b9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	425b      	negs	r3, r3
 8002b96:	441a      	add	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d105      	bne.n	8002bae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bb6:	697b      	ldr	r3, [r7, #20]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d303      	bcc.n	8002bf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68d9      	ldr	r1, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f002 f898 	bl	8004d34 <memcpy>
	}
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c14:	f001 fcfe 	bl	8004614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c20:	e011      	b.n	8002c46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3324      	adds	r3, #36	; 0x24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fdd4 	bl	80037dc <xTaskRemoveFromEventList>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c3a:	f000 feab 	bl	8003994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	dce9      	bgt.n	8002c22 <prvUnlockQueue+0x16>
 8002c4e:	e000      	b.n	8002c52 <prvUnlockQueue+0x46>
					break;
 8002c50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	22ff      	movs	r2, #255	; 0xff
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c5a:	f001 fd0b 	bl	8004674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c5e:	f001 fcd9 	bl	8004614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c6a:	e011      	b.n	8002c90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3310      	adds	r3, #16
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fdaf 	bl	80037dc <xTaskRemoveFromEventList>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c84:	f000 fe86 	bl	8003994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	dce9      	bgt.n	8002c6c <prvUnlockQueue+0x60>
 8002c98:	e000      	b.n	8002c9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	22ff      	movs	r2, #255	; 0xff
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ca4:	f001 fce6 	bl	8004674 <vPortExitCritical>
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cb8:	f001 fcac 	bl	8004614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e001      	b.n	8002cce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cce:	f001 fcd1 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ce4:	f001 fc96 	bl	8004614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d102      	bne.n	8002cfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e001      	b.n	8002cfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cfe:	f001 fcb9 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e014      	b.n	8002d46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <vQueueAddToRegistry+0x50>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <vQueueAddToRegistry+0x50>)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <vQueueAddToRegistry+0x50>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d3e:	e006      	b.n	8002d4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9e7      	bls.n	8002d1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000828 	.word	0x20000828

08002d60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d70:	f001 fc50 	bl	8004614 <vPortEnterCritical>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d103      	bne.n	8002d8a <vQueueWaitForMessageRestricted+0x2a>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d103      	bne.n	8002da0 <vQueueWaitForMessageRestricted+0x40>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da0:	f001 fc68 	bl	8004674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fce5 	bl	8003784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff26 	bl	8002c0c <prvUnlockQueue>
	}
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	623b      	str	r3, [r7, #32]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xTaskCreateStatic+0x46>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e0e:	23a8      	movs	r3, #168	; 0xa8
 8002e10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2ba8      	cmp	r3, #168	; 0xa8
 8002e16:	d00a      	beq.n	8002e2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61bb      	str	r3, [r7, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01e      	beq.n	8002e74 <xTaskCreateStatic+0xac>
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9303      	str	r3, [sp, #12]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f850 	bl	8002f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e6e:	f000 f8f3 	bl	8003058 <prvAddNewTaskToReadyList>
 8002e72:	e001      	b.n	8002e78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e78:	697b      	ldr	r3, [r7, #20]
	}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3728      	adds	r7, #40	; 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08c      	sub	sp, #48	; 0x30
 8002e86:	af04      	add	r7, sp, #16
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fcde 	bl	8004858 <pvPortMalloc>
 8002e9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ea4:	20a8      	movs	r0, #168	; 0xa8
 8002ea6:	f001 fcd7 	bl	8004858 <pvPortMalloc>
 8002eaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb8:	e005      	b.n	8002ec6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f001 fd98 	bl	80049f0 <vPortFree>
 8002ec0:	e001      	b.n	8002ec6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d017      	beq.n	8002efc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9303      	str	r3, [sp, #12]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	9302      	str	r3, [sp, #8]
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f80e 	bl	8002f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ef0:	69f8      	ldr	r0, [r7, #28]
 8002ef2:	f000 f8b1 	bl	8003058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e002      	b.n	8002f02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
 8002f00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f02:	69bb      	ldr	r3, [r7, #24]
	}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	21a5      	movs	r1, #165	; 0xa5
 8002f26:	f001 fe81 	bl	8004c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f34:	3b01      	subs	r3, #1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	617b      	str	r3, [r7, #20]
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01f      	beq.n	8002faa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e012      	b.n	8002f96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	7819      	ldrb	r1, [r3, #0]
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3334      	adds	r3, #52	; 0x34
 8002f80:	460a      	mov	r2, r1
 8002f82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d9e9      	bls.n	8002f70 <prvInitialiseNewTask+0x64>
 8002f9c:	e000      	b.n	8002fa0 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa8:	e003      	b.n	8002fb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2b37      	cmp	r3, #55	; 0x37
 8002fb6:	d901      	bls.n	8002fbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fb8:	2337      	movs	r3, #55	; 0x37
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	2200      	movs	r2, #0
 8002fcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f978 	bl	80022c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	3318      	adds	r3, #24
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff f973 	bl	80022c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2200      	movs	r2, #0
 8003004:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	3354      	adds	r3, #84	; 0x54
 800300c:	224c      	movs	r2, #76	; 0x4c
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fe0b 	bl	8004c2c <memset>
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <prvInitialiseNewTask+0x140>)
 800301a:	659a      	str	r2, [r3, #88]	; 0x58
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <prvInitialiseNewTask+0x144>)
 8003020:	65da      	str	r2, [r3, #92]	; 0x5c
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <prvInitialiseNewTask+0x148>)
 8003026:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	69b8      	ldr	r0, [r7, #24]
 800302e:	f001 f9c5 	bl	80043bc <pxPortInitialiseStack>
 8003032:	4602      	mov	r2, r0
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003042:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20001a74 	.word	0x20001a74
 8003050:	20001adc 	.word	0x20001adc
 8003054:	20001b44 	.word	0x20001b44

08003058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003060:	f001 fad8 	bl	8004614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <prvAddNewTaskToReadyList+0xc4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <prvAddNewTaskToReadyList+0xc4>)
 800306c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <prvAddNewTaskToReadyList+0xc8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <prvAddNewTaskToReadyList+0xc8>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <prvAddNewTaskToReadyList+0xc4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d110      	bne.n	80030a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003084:	f000 fcaa 	bl	80039dc <prvInitialiseTaskLists>
 8003088:	e00d      	b.n	80030a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <prvAddNewTaskToReadyList+0xcc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <prvAddNewTaskToReadyList+0xc8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
 800309e:	d802      	bhi.n	80030a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030a0:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <prvAddNewTaskToReadyList+0xc8>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <prvAddNewTaskToReadyList+0xd0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <prvAddNewTaskToReadyList+0xd0>)
 80030ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <prvAddNewTaskToReadyList+0xd0>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <prvAddNewTaskToReadyList+0xd4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d903      	bls.n	80030cc <prvAddNewTaskToReadyList+0x74>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <prvAddNewTaskToReadyList+0xd4>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <prvAddNewTaskToReadyList+0xd8>)
 80030da:	441a      	add	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7ff f8fd 	bl	80022e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030e8:	f001 fac4 	bl	8004674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <prvAddNewTaskToReadyList+0xcc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <prvAddNewTaskToReadyList+0xc8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	429a      	cmp	r2, r3
 8003100:	d207      	bcs.n	8003112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <prvAddNewTaskToReadyList+0xdc>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000d3c 	.word	0x20000d3c
 8003120:	20000868 	.word	0x20000868
 8003124:	20000d48 	.word	0x20000d48
 8003128:	20000d58 	.word	0x20000d58
 800312c:	20000d44 	.word	0x20000d44
 8003130:	2000086c 	.word	0x2000086c
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003140:	f001 fa68 	bl	8004614 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <uxTaskPriorityGet+0x18>
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <uxTaskPriorityGet+0x30>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e000      	b.n	8003152 <uxTaskPriorityGet+0x1a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800315a:	f001 fa8b 	bl	8004674 <vPortExitCritical>

		return uxReturn;
 800315e:	68bb      	ldr	r3, [r7, #8]
	}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000868 	.word	0x20000868

0800316c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b37      	cmp	r3, #55	; 0x37
 800317e:	d90a      	bls.n	8003196 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60fb      	str	r3, [r7, #12]
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b37      	cmp	r3, #55	; 0x37
 800319a:	d901      	bls.n	80031a0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319c:	2337      	movs	r3, #55	; 0x37
 800319e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80031a0:	f001 fa38 	bl	8004614 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <vTaskPrioritySet+0x44>
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <vTaskPrioritySet+0x12c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e000      	b.n	80031b2 <vTaskPrioritySet+0x46>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d063      	beq.n	800328a <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d90d      	bls.n	80031e6 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <vTaskPrioritySet+0x12c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d00f      	beq.n	80031f4 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <vTaskPrioritySet+0x12c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d309      	bcc.n	80031f4 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e006      	b.n	80031f4 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <vTaskPrioritySet+0x12c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d101      	bne.n	80031f4 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d102      	bne.n	800320c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db04      	blt.n	8003224 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6959      	ldr	r1, [r3, #20]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <vTaskPrioritySet+0x130>)
 8003234:	4413      	add	r3, r2
 8003236:	4299      	cmp	r1, r3
 8003238:	d11c      	bne.n	8003274 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3304      	adds	r3, #4
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f8ac 	bl	800239c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <vTaskPrioritySet+0x134>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d903      	bls.n	8003258 <vTaskPrioritySet+0xec>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <vTaskPrioritySet+0x134>)
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <vTaskPrioritySet+0x130>)
 8003266:	441a      	add	r2, r3
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7ff f837 	bl	80022e2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <vTaskPrioritySet+0x138>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800328a:	f001 f9f3 	bl	8004674 <vPortExitCritical>
	}
 800328e:	bf00      	nop
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000868 	.word	0x20000868
 800329c:	2000086c 	.word	0x2000086c
 80032a0:	20000d44 	.word	0x20000d44
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032b6:	463a      	mov	r2, r7
 80032b8:	1d39      	adds	r1, r7, #4
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe ffae 	bl	8002220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	9202      	str	r2, [sp, #8]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	460a      	mov	r2, r1
 80032d6:	4924      	ldr	r1, [pc, #144]	; (8003368 <vTaskStartScheduler+0xc0>)
 80032d8:	4824      	ldr	r0, [pc, #144]	; (800336c <vTaskStartScheduler+0xc4>)
 80032da:	f7ff fd75 	bl	8002dc8 <xTaskCreateStatic>
 80032de:	4603      	mov	r3, r0
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <vTaskStartScheduler+0xc8>)
 80032e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032e4:	4b22      	ldr	r3, [pc, #136]	; (8003370 <vTaskStartScheduler+0xc8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032ec:	2301      	movs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e001      	b.n	80032f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032fc:	f000 fd10 	bl	8003d20 <xTimerCreateTimerTask>
 8003300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d11b      	bne.n	8003340 <vTaskStartScheduler+0x98>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	613b      	str	r3, [r7, #16]
}
 800331a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <vTaskStartScheduler+0xcc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3354      	adds	r3, #84	; 0x54
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <vTaskStartScheduler+0xd0>)
 8003324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <vTaskStartScheduler+0xd4>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <vTaskStartScheduler+0xd8>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <vTaskStartScheduler+0xdc>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800333a:	f001 f8c9 	bl	80044d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800333e:	e00e      	b.n	800335e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d10a      	bne.n	800335e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60fb      	str	r3, [r7, #12]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <vTaskStartScheduler+0xb4>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08004e28 	.word	0x08004e28
 800336c:	080039ad 	.word	0x080039ad
 8003370:	20000d60 	.word	0x20000d60
 8003374:	20000868 	.word	0x20000868
 8003378:	2000005c 	.word	0x2000005c
 800337c:	20000d5c 	.word	0x20000d5c
 8003380:	20000d48 	.word	0x20000d48
 8003384:	20000d40 	.word	0x20000d40

08003388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <vTaskSuspendAll+0x18>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <vTaskSuspendAll+0x18>)
 8003394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000d64 	.word	0x20000d64

080033a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <xTaskResumeAll+0x118>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	603b      	str	r3, [r7, #0]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033d0:	f001 f920 	bl	8004614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <xTaskResumeAll+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	4a38      	ldr	r2, [pc, #224]	; (80034bc <xTaskResumeAll+0x118>)
 80033dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <xTaskResumeAll+0x118>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d162      	bne.n	80034ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <xTaskResumeAll+0x11c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d05e      	beq.n	80034ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ee:	e02f      	b.n	8003450 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <xTaskResumeAll+0x120>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3318      	adds	r3, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ffcd 	bl	800239c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3304      	adds	r3, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffc8 	bl	800239c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <xTaskResumeAll+0x124>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d903      	bls.n	8003420 <xTaskResumeAll+0x7c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <xTaskResumeAll+0x124>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <xTaskResumeAll+0x128>)
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7fe ff53 	bl	80022e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <xTaskResumeAll+0x12c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <xTaskResumeAll+0x130>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <xTaskResumeAll+0x120>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1cb      	bne.n	80033f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800345e:	f000 fb5f 	bl	8003b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <xTaskResumeAll+0x134>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800346e:	f000 f847 	bl	8003500 <xTaskIncrementTick>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <xTaskResumeAll+0x130>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3b01      	subs	r3, #1
 8003482:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f1      	bne.n	800346e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <xTaskResumeAll+0x134>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <xTaskResumeAll+0x130>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <xTaskResumeAll+0x138>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034ac:	f001 f8e2 	bl	8004674 <vPortExitCritical>

	return xAlreadyYielded;
 80034b0:	68bb      	ldr	r3, [r7, #8]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000d64 	.word	0x20000d64
 80034c0:	20000d3c 	.word	0x20000d3c
 80034c4:	20000cfc 	.word	0x20000cfc
 80034c8:	20000d44 	.word	0x20000d44
 80034cc:	2000086c 	.word	0x2000086c
 80034d0:	20000868 	.word	0x20000868
 80034d4:	20000d50 	.word	0x20000d50
 80034d8:	20000d4c 	.word	0x20000d4c
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <xTaskGetTickCount+0x1c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034ec:	687b      	ldr	r3, [r7, #4]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000d40 	.word	0x20000d40

08003500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350a:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <xTaskIncrementTick+0x148>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 808f 	bne.w	8003632 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003514:	4b4d      	ldr	r3, [pc, #308]	; (800364c <xTaskIncrementTick+0x14c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <xTaskIncrementTick+0x14c>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d120      	bne.n	800356a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003528:	4b49      	ldr	r3, [pc, #292]	; (8003650 <xTaskIncrementTick+0x150>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <xTaskIncrementTick+0x48>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	603b      	str	r3, [r7, #0]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <xTaskIncrementTick+0x46>
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <xTaskIncrementTick+0x150>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b41      	ldr	r3, [pc, #260]	; (8003654 <xTaskIncrementTick+0x154>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <xTaskIncrementTick+0x150>)
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <xTaskIncrementTick+0x154>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <xTaskIncrementTick+0x158>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a3d      	ldr	r2, [pc, #244]	; (8003658 <xTaskIncrementTick+0x158>)
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	f000 fadb 	bl	8003b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <xTaskIncrementTick+0x15c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	429a      	cmp	r2, r3
 8003572:	d349      	bcc.n	8003608 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <xTaskIncrementTick+0x150>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d104      	bne.n	8003588 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <xTaskIncrementTick+0x15c>)
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	601a      	str	r2, [r3, #0]
					break;
 8003586:	e03f      	b.n	8003608 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003588:	4b31      	ldr	r3, [pc, #196]	; (8003650 <xTaskIncrementTick+0x150>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d203      	bcs.n	80035a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035a0:	4a2e      	ldr	r2, [pc, #184]	; (800365c <xTaskIncrementTick+0x15c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035a6:	e02f      	b.n	8003608 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fef5 	bl	800239c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3318      	adds	r3, #24
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe feec 	bl	800239c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <xTaskIncrementTick+0x160>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d903      	bls.n	80035d8 <xTaskIncrementTick+0xd8>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	4a22      	ldr	r2, [pc, #136]	; (8003660 <xTaskIncrementTick+0x160>)
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <xTaskIncrementTick+0x164>)
 80035e6:	441a      	add	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fe fe77 	bl	80022e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <xTaskIncrementTick+0x168>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3b8      	bcc.n	8003574 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003606:	e7b5      	b.n	8003574 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <xTaskIncrementTick+0x168>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	4915      	ldr	r1, [pc, #84]	; (8003664 <xTaskIncrementTick+0x164>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d901      	bls.n	8003624 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <xTaskIncrementTick+0x16c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e004      	b.n	800363c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <xTaskIncrementTick+0x170>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <xTaskIncrementTick+0x170>)
 800363a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800363c:	697b      	ldr	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000d64 	.word	0x20000d64
 800364c:	20000d40 	.word	0x20000d40
 8003650:	20000cf4 	.word	0x20000cf4
 8003654:	20000cf8 	.word	0x20000cf8
 8003658:	20000d54 	.word	0x20000d54
 800365c:	20000d5c 	.word	0x20000d5c
 8003660:	20000d44 	.word	0x20000d44
 8003664:	2000086c 	.word	0x2000086c
 8003668:	20000868 	.word	0x20000868
 800366c:	20000d50 	.word	0x20000d50
 8003670:	20000d4c 	.word	0x20000d4c

08003674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <vTaskSwitchContext+0xb0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <vTaskSwitchContext+0xb4>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003688:	e046      	b.n	8003718 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800368a:	4b27      	ldr	r3, [pc, #156]	; (8003728 <vTaskSwitchContext+0xb4>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	4b26      	ldr	r3, [pc, #152]	; (800372c <vTaskSwitchContext+0xb8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e010      	b.n	80036ba <vTaskSwitchContext+0x46>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	607b      	str	r3, [r7, #4]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <vTaskSwitchContext+0x3e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	491d      	ldr	r1, [pc, #116]	; (8003730 <vTaskSwitchContext+0xbc>)
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0e4      	beq.n	8003698 <vTaskSwitchContext+0x24>
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <vTaskSwitchContext+0xbc>)
 80036da:	4413      	add	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3308      	adds	r3, #8
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d104      	bne.n	80036fe <vTaskSwitchContext+0x8a>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <vTaskSwitchContext+0xc0>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <vTaskSwitchContext+0xb8>)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <vTaskSwitchContext+0xc0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3354      	adds	r3, #84	; 0x54
 8003714:	4a08      	ldr	r2, [pc, #32]	; (8003738 <vTaskSwitchContext+0xc4>)
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20000d64 	.word	0x20000d64
 8003728:	20000d50 	.word	0x20000d50
 800372c:	20000d44 	.word	0x20000d44
 8003730:	2000086c 	.word	0x2000086c
 8003734:	20000868 	.word	0x20000868
 8003738:	2000005c 	.word	0x2000005c

0800373c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <vTaskPlaceOnEventList+0x44>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3318      	adds	r3, #24
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fddd 	bl	800232a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003770:	2101      	movs	r1, #1
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f000 fa80 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000868 	.word	0x20000868

08003784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	617b      	str	r3, [r7, #20]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3318      	adds	r3, #24
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7fe fd94 	bl	80022e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68b8      	ldr	r0, [r7, #8]
 80037ca:	f000 fa55 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
	}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000868 	.word	0x20000868

080037dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3318      	adds	r3, #24
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fdc5 	bl	800239c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <xTaskRemoveFromEventList+0xb0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11d      	bne.n	8003856 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fdbc 	bl	800239c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d903      	bls.n	8003838 <xTaskRemoveFromEventList+0x5c>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <xTaskRemoveFromEventList+0xb8>)
 8003846:	441a      	add	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7fe fd47 	bl	80022e2 <vListInsertEnd>
 8003854:	e005      	b.n	8003862 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3318      	adds	r3, #24
 800385a:	4619      	mov	r1, r3
 800385c:	480e      	ldr	r0, [pc, #56]	; (8003898 <xTaskRemoveFromEventList+0xbc>)
 800385e:	f7fe fd40 	bl	80022e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <xTaskRemoveFromEventList+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	429a      	cmp	r2, r3
 800386e:	d905      	bls.n	800387c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <xTaskRemoveFromEventList+0xc4>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e001      	b.n	8003880 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003880:	697b      	ldr	r3, [r7, #20]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000d64 	.word	0x20000d64
 8003890:	20000d44 	.word	0x20000d44
 8003894:	2000086c 	.word	0x2000086c
 8003898:	20000cfc 	.word	0x20000cfc
 800389c:	20000868 	.word	0x20000868
 80038a0:	20000d50 	.word	0x20000d50

080038a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <vTaskInternalSetTimeOutState+0x24>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <vTaskInternalSetTimeOutState+0x28>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	20000d54 	.word	0x20000d54
 80038cc:	20000d40 	.word	0x20000d40

080038d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	613b      	str	r3, [r7, #16]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003912:	f000 fe7f 	bl	8004614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <xTaskCheckForTimeOut+0xbc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d102      	bne.n	8003936 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e023      	b.n	800397e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <xTaskCheckForTimeOut+0xc0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d007      	beq.n	8003952 <xTaskCheckForTimeOut+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e015      	b.n	800397e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d20b      	bcs.n	8003974 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff9b 	bl	80038a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e004      	b.n	800397e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f000 fe79 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000d40 	.word	0x20000d40
 8003990:	20000d54 	.word	0x20000d54

08003994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <vTaskMissedYield+0x14>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	20000d50 	.word	0x20000d50

080039ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039b4:	f000 f852 	bl	8003a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <prvIdleTask+0x28>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d9f9      	bls.n	80039b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <prvIdleTask+0x2c>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039d0:	e7f0      	b.n	80039b4 <prvIdleTask+0x8>
 80039d2:	bf00      	nop
 80039d4:	2000086c 	.word	0x2000086c
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	e00c      	b.n	8003a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <prvInitialiseTaskLists+0x60>)
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fc46 	bl	8002288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b37      	cmp	r3, #55	; 0x37
 8003a06:	d9ef      	bls.n	80039e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a08:	480d      	ldr	r0, [pc, #52]	; (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a0a:	f7fe fc3d 	bl	8002288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a0e:	480d      	ldr	r0, [pc, #52]	; (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a10:	f7fe fc3a 	bl	8002288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <prvInitialiseTaskLists+0x6c>)
 8003a16:	f7fe fc37 	bl	8002288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a1a:	480c      	ldr	r0, [pc, #48]	; (8003a4c <prvInitialiseTaskLists+0x70>)
 8003a1c:	f7fe fc34 	bl	8002288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a20:	480b      	ldr	r0, [pc, #44]	; (8003a50 <prvInitialiseTaskLists+0x74>)
 8003a22:	f7fe fc31 	bl	8002288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <prvInitialiseTaskLists+0x78>)
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvInitialiseTaskLists+0x7c>)
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2000086c 	.word	0x2000086c
 8003a40:	20000ccc 	.word	0x20000ccc
 8003a44:	20000ce0 	.word	0x20000ce0
 8003a48:	20000cfc 	.word	0x20000cfc
 8003a4c:	20000d10 	.word	0x20000d10
 8003a50:	20000d28 	.word	0x20000d28
 8003a54:	20000cf4 	.word	0x20000cf4
 8003a58:	20000cf8 	.word	0x20000cf8

08003a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a62:	e019      	b.n	8003a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a64:	f000 fdd6 	bl	8004614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <prvCheckTasksWaitingTermination+0x50>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc91 	bl	800239c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a8e:	f000 fdf1 	bl	8004674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f810 	bl	8003ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e1      	bne.n	8003a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000d10 	.word	0x20000d10
 8003ab0:	20000d3c 	.word	0x20000d3c
 8003ab4:	20000d24 	.word	0x20000d24

08003ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3354      	adds	r3, #84	; 0x54
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f8b9 	bl	8004c3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d108      	bne.n	8003ae6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 ff89 	bl	80049f0 <vPortFree>
				vPortFree( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 ff86 	bl	80049f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ae4:	e018      	b.n	8003b18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d103      	bne.n	8003af8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 ff7d 	bl	80049f0 <vPortFree>
	}
 8003af6:	e00f      	b.n	8003b18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d00a      	beq.n	8003b18 <prvDeleteTCB+0x60>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60fb      	str	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <prvDeleteTCB+0x5e>
	}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <prvResetNextTaskUnblockTime+0x38>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <prvResetNextTaskUnblockTime+0x3c>)
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b38:	e008      	b.n	8003b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <prvResetNextTaskUnblockTime+0x38>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <prvResetNextTaskUnblockTime+0x3c>)
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000cf4 	.word	0x20000cf4
 8003b5c:	20000d5c 	.word	0x20000d5c

08003b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <xTaskGetSchedulerState+0x34>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	e008      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <xTaskGetSchedulerState+0x38>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e001      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b86:	687b      	ldr	r3, [r7, #4]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	20000d48 	.word	0x20000d48
 8003b98:	20000d64 	.word	0x20000d64

08003b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d056      	beq.n	8003c60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <xTaskPriorityDisinherit+0xd0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d00a      	beq.n	8003bd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	60fb      	str	r3, [r7, #12]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d02c      	beq.n	8003c60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d128      	bne.n	8003c60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fbc2 	bl	800239c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <xTaskPriorityDisinherit+0xd4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d903      	bls.n	8003c40 <xTaskPriorityDisinherit+0xa4>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <xTaskPriorityDisinherit+0xd4>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <xTaskPriorityDisinherit+0xd8>)
 8003c4e:	441a      	add	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7fe fb43 	bl	80022e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c60:	697b      	ldr	r3, [r7, #20]
	}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000868 	.word	0x20000868
 8003c70:	20000d44 	.word	0x20000d44
 8003c74:	2000086c 	.word	0x2000086c

08003c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fb84 	bl	800239c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d10a      	bne.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4819      	ldr	r0, [pc, #100]	; (8003d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cac:	f7fe fb19 	bl	80022e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cb0:	e026      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d209      	bcs.n	8003cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe fb27 	bl	800232a <vListInsert>
}
 8003cdc:	e010      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe fb1d 	bl	800232a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d202      	bcs.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000d40 	.word	0x20000d40
 8003d0c:	20000868 	.word	0x20000868
 8003d10:	20000d28 	.word	0x20000d28
 8003d14:	20000cf8 	.word	0x20000cf8
 8003d18:	20000cf4 	.word	0x20000cf4
 8003d1c:	20000d5c 	.word	0x20000d5c

08003d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d2a:	f000 fb07 	bl	800433c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTimerCreateTimerTask+0x80>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d021      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d3e:	1d3a      	adds	r2, r7, #4
 8003d40:	f107 0108 	add.w	r1, r7, #8
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fa83 	bl	8002254 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2302      	movs	r3, #2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	460a      	mov	r2, r1
 8003d60:	4910      	ldr	r1, [pc, #64]	; (8003da4 <xTimerCreateTimerTask+0x84>)
 8003d62:	4811      	ldr	r0, [pc, #68]	; (8003da8 <xTimerCreateTimerTask+0x88>)
 8003d64:	f7ff f830 	bl	8002dc8 <xTaskCreateStatic>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d76:	2301      	movs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d96:	697b      	ldr	r3, [r7, #20]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000d98 	.word	0x20000d98
 8003da4:	08004e30 	.word	0x08004e30
 8003da8:	08003ee5 	.word	0x08003ee5
 8003dac:	20000d9c 	.word	0x20000d9c

08003db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	623b      	str	r3, [r7, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02a      	beq.n	8003e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	dc18      	bgt.n	8003e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003df8:	f7ff feb2 	bl	8003b60 <xTaskGetSchedulerState>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d109      	bne.n	8003e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f107 0110 	add.w	r1, r7, #16
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	f7fe fbf3 	bl	80025f8 <xQueueGenericSend>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24
 8003e14:	e012      	b.n	8003e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f107 0110 	add.w	r1, r7, #16
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	f7fe fbe9 	bl	80025f8 <xQueueGenericSend>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
 8003e28:	e008      	b.n	8003e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0110 	add.w	r1, r7, #16
 8003e32:	2300      	movs	r3, #0
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f7fe fcdd 	bl	80027f4 <xQueueGenericSendFromISR>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000d98 	.word	0x20000d98

08003e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <prvProcessExpiredTimer+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fa99 	bl	800239c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	18d1      	adds	r1, r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	f000 f8d1 	bl	800402c <prvInsertTimerInActiveList>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01f      	beq.n	8003ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff88 	bl	8003db0 <xTimerGenericCommand>
 8003ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	60fb      	str	r3, [r7, #12]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	6978      	ldr	r0, [r7, #20]
 8003ed6:	4798      	blx	r3
}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000d90 	.word	0x20000d90

08003ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f857 	bl	8003fa4 <prvGetNextExpireTime>
 8003ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f803 	bl	8003f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f02:	f000 f8d5 	bl	80040b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f06:	e7f1      	b.n	8003eec <prvTimerTask+0x8>

08003f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f12:	f7ff fa39 	bl	8003388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f866 	bl	8003fec <prvSampleTimeNow>
 8003f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d130      	bne.n	8003f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d806      	bhi.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f36:	f7ff fa35 	bl	80033a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff85 	bl	8003e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f42:	e024      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <prvProcessTimerOrBlockTask+0x90>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <prvProcessTimerOrBlockTask+0x50>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <prvProcessTimerOrBlockTask+0x52>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <prvProcessTimerOrBlockTask+0x94>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7fe fef9 	bl	8002d60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f6e:	f7ff fa19 	bl	80033a4 <xTaskResumeAll>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <prvProcessTimerOrBlockTask+0x98>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
}
 8003f88:	e001      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f8a:	f7ff fa0b 	bl	80033a4 <xTaskResumeAll>
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000d94 	.word	0x20000d94
 8003f9c:	20000d98 	.word	0x20000d98
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <prvGetNextExpireTime+0x16>
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	e000      	b.n	8003fbc <prvGetNextExpireTime+0x18>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e001      	b.n	8003fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000d90 	.word	0x20000d90

08003fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ff4:	f7ff fa74 	bl	80034e0 <xTaskGetTickCount>
 8003ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvSampleTimeNow+0x3c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d205      	bcs.n	8004010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004004:	f000 f936 	bl	8004274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvSampleTimeNow+0x3c>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000da0 	.word	0x20000da0

0800402c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d812      	bhi.n	8004078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e01b      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <prvInsertTimerInActiveList+0x7c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe f95a 	bl	800232a <vListInsert>
 8004076:	e012      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d206      	bcs.n	800408e <prvInsertTimerInActiveList+0x62>
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e007      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvInsertTimerInActiveList+0x80>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7fe f946 	bl	800232a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000d94 	.word	0x20000d94
 80040ac:	20000d90 	.word	0x20000d90

080040b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08e      	sub	sp, #56	; 0x38
 80040b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b6:	e0ca      	b.n	800424e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da18      	bge.n	80040f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	3304      	adds	r3, #4
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	61fb      	str	r3, [r7, #28]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	6850      	ldr	r0, [r2, #4]
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f2c0 80ab 	blt.w	800424e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	3304      	adds	r3, #4
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f947 	bl	800239c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800410e:	463b      	mov	r3, r7
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff6b 	bl	8003fec <prvSampleTimeNow>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b09      	cmp	r3, #9
 800411c:	f200 8096 	bhi.w	800424c <prvProcessReceivedCommands+0x19c>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <prvProcessReceivedCommands+0x78>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004151 	.word	0x08004151
 8004134:	080041c5 	.word	0x080041c5
 8004138:	080041d9 	.word	0x080041d9
 800413c:	08004223 	.word	0x08004223
 8004140:	08004151 	.word	0x08004151
 8004144:	08004151 	.word	0x08004151
 8004148:	080041c5 	.word	0x080041c5
 800414c:	080041d9 	.word	0x080041d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	18d1      	adds	r1, r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004170:	f7ff ff5c 	bl	800402c <prvInsertTimerInActiveList>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d069      	beq.n	800424e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05e      	beq.n	800424e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	441a      	add	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2300      	movs	r3, #0
 800419e:	2100      	movs	r1, #0
 80041a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a2:	f7ff fe05 	bl	8003db0 <xTimerGenericCommand>
 80041a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d14f      	bne.n	800424e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	61bb      	str	r3, [r7, #24]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80041d6:	e03a      	b.n	800424e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	617b      	str	r3, [r7, #20]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	18d1      	adds	r1, r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421c:	f7ff ff06 	bl	800402c <prvInsertTimerInActiveList>
					break;
 8004220:	e015      	b.n	800424e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004232:	f000 fbdd 	bl	80049f0 <vPortFree>
 8004236:	e00a      	b.n	800424e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800424a:	e000      	b.n	800424e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800424c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <prvProcessReceivedCommands+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1d39      	adds	r1, r7, #4
 8004254:	2200      	movs	r2, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fb68 	bl	800292c <xQueueReceive>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af2a 	bne.w	80040b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3730      	adds	r7, #48	; 0x30
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000d98 	.word	0x20000d98

08004274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800427a:	e048      	b.n	800430e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <prvSwitchTimerLists+0xc0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe f881 	bl	800239c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02e      	beq.n	800430e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90e      	bls.n	80042e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <prvSwitchTimerLists+0xc0>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7fe f826 	bl	800232a <vListInsert>
 80042de:	e016      	b.n	800430e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042e0:	2300      	movs	r3, #0
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	2100      	movs	r1, #0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff fd60 	bl	8003db0 <xTimerGenericCommand>
 80042f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	603b      	str	r3, [r7, #0]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1b1      	bne.n	800427c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <prvSwitchTimerLists+0xc0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <prvSwitchTimerLists+0xc4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <prvSwitchTimerLists+0xc4>)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000d90 	.word	0x20000d90
 8004338:	20000d94 	.word	0x20000d94

0800433c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004342:	f000 f967 	bl	8004614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d120      	bne.n	8004390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800434e:	4814      	ldr	r0, [pc, #80]	; (80043a0 <prvCheckForValidListAndQueue+0x64>)
 8004350:	f7fd ff9a 	bl	8002288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <prvCheckForValidListAndQueue+0x68>)
 8004356:	f7fd ff97 	bl	8002288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <prvCheckForValidListAndQueue+0x6c>)
 800435c:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <prvCheckForValidListAndQueue+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <prvCheckForValidListAndQueue+0x70>)
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <prvCheckForValidListAndQueue+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <prvCheckForValidListAndQueue+0x74>)
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <prvCheckForValidListAndQueue+0x78>)
 800436e:	2110      	movs	r1, #16
 8004370:	200a      	movs	r0, #10
 8004372:	f7fe f8a5 	bl	80024c0 <xQueueGenericCreateStatic>
 8004376:	4603      	mov	r3, r0
 8004378:	4a08      	ldr	r2, [pc, #32]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 800437a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	490b      	ldr	r1, [pc, #44]	; (80043b8 <prvCheckForValidListAndQueue+0x7c>)
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fcbe 	bl	8002d0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004390:	f000 f970 	bl	8004674 <vPortExitCritical>
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000d98 	.word	0x20000d98
 80043a0:	20000d68 	.word	0x20000d68
 80043a4:	20000d7c 	.word	0x20000d7c
 80043a8:	20000d90 	.word	0x20000d90
 80043ac:	20000d94 	.word	0x20000d94
 80043b0:	20000e44 	.word	0x20000e44
 80043b4:	20000da4 	.word	0x20000da4
 80043b8:	08004e38 	.word	0x08004e38

080043bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b04      	subs	r3, #4
 80043cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b04      	subs	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <pxPortInitialiseStack+0x64>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b14      	subs	r3, #20
 80043f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b04      	subs	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f06f 0202 	mvn.w	r2, #2
 800440a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b20      	subs	r3, #32
 8004410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	08004425 	.word	0x08004425

08004424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <prvTaskExitError+0x54>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d00a      	beq.n	800444e <prvTaskExitError+0x2a>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <prvTaskExitError+0x28>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60bb      	str	r3, [r7, #8]
}
 8004460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004462:	bf00      	nop
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0fc      	beq.n	8004464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	2000000c 	.word	0x2000000c
 800447c:	00000000 	.word	0x00000000

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	4770      	bx	lr
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst2>:
 80044a0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044a8:	4808      	ldr	r0, [pc, #32]	; (80044cc <prvPortStartFirstTask+0x24>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8814 	msr	CONTROL, r0
 80044ba:	b662      	cpsie	i
 80044bc:	b661      	cpsie	f
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	df00      	svc	0
 80044c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ca:	bf00      	nop
 80044cc:	e000ed08 	.word	0xe000ed08

080044d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <xPortStartScheduler+0x120>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <xPortStartScheduler+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10a      	bne.n	80044f6 <xPortStartScheduler+0x26>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <xPortStartScheduler+0x120>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <xPortStartScheduler+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10a      	bne.n	8004516 <xPortStartScheduler+0x46>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <xPortStartScheduler+0x12c>)
 8004518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <xPortStartScheduler+0x130>)
 800453c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <xPortStartScheduler+0x134>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004544:	e009      	b.n	800455a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <xPortStartScheduler+0x134>)
 800454e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d0ef      	beq.n	8004546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00a      	beq.n	8004588 <xPortStartScheduler+0xb8>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <xPortStartScheduler+0x134>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <xPortStartScheduler+0x134>)
 8004590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004592:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <xPortStartScheduler+0x134>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <xPortStartScheduler+0x134>)
 800459c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <xPortStartScheduler+0x138>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <xPortStartScheduler+0x138>)
 80045ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <xPortStartScheduler+0x138>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <xPortStartScheduler+0x138>)
 80045b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045be:	f000 f8dd 	bl	800477c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <xPortStartScheduler+0x13c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045c8:	f000 f8fc 	bl	80047c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xPortStartScheduler+0x140>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <xPortStartScheduler+0x140>)
 80045d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045d8:	f7ff ff66 	bl	80044a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045dc:	f7ff f84a 	bl	8003674 <vTaskSwitchContext>
	prvTaskExitError();
 80045e0:	f7ff ff20 	bl	8004424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000ed00 	.word	0xe000ed00
 80045f4:	410fc271 	.word	0x410fc271
 80045f8:	410fc270 	.word	0x410fc270
 80045fc:	e000e400 	.word	0xe000e400
 8004600:	20000e94 	.word	0x20000e94
 8004604:	20000e98 	.word	0x20000e98
 8004608:	e000ed20 	.word	0xe000ed20
 800460c:	2000000c 	.word	0x2000000c
 8004610:	e000ef34 	.word	0xe000ef34

08004614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
}
 800462c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vPortEnterCritical+0x58>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vPortEnterCritical+0x58>)
 8004636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <vPortEnterCritical+0x58>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortEnterCritical+0x5c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vPortEnterCritical+0x4c>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortEnterCritical+0x4a>
	}
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vPortExitCritical+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <vPortExitCritical+0x24>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortExitCritical+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vPortExitCritical+0x50>)
 80046a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vPortExitCritical+0x50>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <vPortExitCritical+0x42>
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f383 8811 	msr	BASEPRI, r3
}
 80046b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046f4:	f380 8811 	msr	BASEPRI, r0
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f7fe ffb8 	bl	8003674 <vTaskSwitchContext>
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f380 8811 	msr	BASEPRI, r0
 800470c:	bc09      	pop	{r0, r3}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	f01e 0f10 	tst.w	lr, #16
 800471a:	bf08      	it	eq
 800471c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004720:	f380 8809 	msr	PSP, r0
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst>:
 8004730:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004752:	f7fe fed5 	bl	8003500 <xTaskIncrementTick>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <xPortSysTickHandler+0x40>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f383 8811 	msr	BASEPRI, r3
}
 800476e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortSetupTimerInterrupt+0x38>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x40>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x44>)
 800479a:	3b01      	subs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010
 80047b4:	e000e018 	.word	0xe000e018
 80047b8:	20000000 	.word	0x20000000
 80047bc:	10624dd3 	.word	0x10624dd3
 80047c0:	e000e014 	.word	0xe000e014

080047c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047d4 <vPortEnableVFP+0x10>
 80047c8:	6801      	ldr	r1, [r0, #0]
 80047ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ce:	6001      	str	r1, [r0, #0]
 80047d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047d2:	bf00      	nop
 80047d4:	e000ed88 	.word	0xe000ed88

080047d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047de:	f3ef 8305 	mrs	r3, IPSR
 80047e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	d914      	bls.n	8004814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <vPortValidateInterruptPriority+0x70>)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <vPortValidateInterruptPriority+0x74>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	7afa      	ldrb	r2, [r7, #11]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20a      	bcs.n	8004814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <vPortValidateInterruptPriority+0x78>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <vPortValidateInterruptPriority+0x7c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d90a      	bls.n	800483a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	603b      	str	r3, [r7, #0]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <vPortValidateInterruptPriority+0x60>
	}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e3f0 	.word	0xe000e3f0
 800484c:	20000e94 	.word	0x20000e94
 8004850:	e000ed0c 	.word	0xe000ed0c
 8004854:	20000e98 	.word	0x20000e98

08004858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004864:	f7fe fd90 	bl	8003388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <pvPortMalloc+0x180>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004870:	f000 f920 	bl	8004ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <pvPortMalloc+0x184>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8093 	bne.w	80049a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01d      	beq.n	80048c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004888:	2208      	movs	r2, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	3308      	adds	r3, #8
 80048a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <pvPortMalloc+0x6c>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	617b      	str	r3, [r7, #20]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d06e      	beq.n	80049a8 <pvPortMalloc+0x150>
 80048ca:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <pvPortMalloc+0x188>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d869      	bhi.n	80049a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <pvPortMalloc+0x18c>)
 80048d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048d8:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <pvPortMalloc+0x18c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048de:	e004      	b.n	80048ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d903      	bls.n	80048fc <pvPortMalloc+0xa4>
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f1      	bne.n	80048e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <pvPortMalloc+0x180>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	429a      	cmp	r2, r3
 8004904:	d050      	beq.n	80049a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2208      	movs	r2, #8
 800490c:	4413      	add	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	2308      	movs	r3, #8
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d91f      	bls.n	8004968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <pvPortMalloc+0xf8>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	613b      	str	r3, [r7, #16]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004962:	69b8      	ldr	r0, [r7, #24]
 8004964:	f000 f908 	bl	8004b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <pvPortMalloc+0x188>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <pvPortMalloc+0x188>)
 8004974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <pvPortMalloc+0x188>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <pvPortMalloc+0x190>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d203      	bcs.n	800498a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <pvPortMalloc+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <pvPortMalloc+0x190>)
 8004988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <pvPortMalloc+0x184>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	431a      	orrs	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <pvPortMalloc+0x194>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <pvPortMalloc+0x194>)
 80049a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049a8:	f7fe fcfc 	bl	80033a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <pvPortMalloc+0x174>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <pvPortMalloc+0x172>
	return pvReturn;
 80049cc:	69fb      	ldr	r3, [r7, #28]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20001a5c 	.word	0x20001a5c
 80049dc:	20001a70 	.word	0x20001a70
 80049e0:	20001a60 	.word	0x20001a60
 80049e4:	20001a54 	.word	0x20001a54
 80049e8:	20001a64 	.word	0x20001a64
 80049ec:	20001a68 	.word	0x20001a68

080049f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04d      	beq.n	8004a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a02:	2308      	movs	r3, #8
 8004a04:	425b      	negs	r3, r3
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <vPortFree+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vPortFree+0x44>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <vPortFree+0x62>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60bb      	str	r3, [r7, #8]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <vPortFree+0xb8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11a      	bne.n	8004a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <vPortFree+0xb8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a78:	f7fe fc86 	bl	8003388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vPortFree+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4413      	add	r3, r2
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <vPortFree+0xbc>)
 8004a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a8a:	6938      	ldr	r0, [r7, #16]
 8004a8c:	f000 f874 	bl	8004b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <vPortFree+0xc0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <vPortFree+0xc0>)
 8004a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a9a:	f7fe fc83 	bl	80033a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20001a70 	.word	0x20001a70
 8004aac:	20001a60 	.word	0x20001a60
 8004ab0:	20001a6c 	.word	0x20001a6c

08004ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <prvHeapInit+0xac>)
 8004ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3307      	adds	r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <prvHeapInit+0xac>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <prvHeapInit+0xb0>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <prvHeapInit+0xb0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b00:	2208      	movs	r2, #8
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <prvHeapInit+0xb4>)
 8004b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <prvHeapInit+0xb4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <prvHeapInit+0xb4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvHeapInit+0xb4>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <prvHeapInit+0xb8>)
 8004b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <prvHeapInit+0xbc>)
 8004b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <prvHeapInit+0xc0>)
 8004b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000e9c 	.word	0x20000e9c
 8004b64:	20001a54 	.word	0x20001a54
 8004b68:	20001a5c 	.word	0x20001a5c
 8004b6c:	20001a64 	.word	0x20001a64
 8004b70:	20001a60 	.word	0x20001a60
 8004b74:	20001a70 	.word	0x20001a70

08004b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <prvInsertBlockIntoFreeList+0xac>)
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e002      	b.n	8004b8c <prvInsertBlockIntoFreeList+0x14>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d8f7      	bhi.n	8004b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d108      	bne.n	8004bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d118      	bne.n	8004c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d00d      	beq.n	8004bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e008      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e003      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d002      	beq.n	8004c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20001a54 	.word	0x20001a54
 8004c28:	20001a5c 	.word	0x20001a5c

08004c2c <memset>:
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <_reclaim_reent>:
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <_reclaim_reent+0xa8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4283      	cmp	r3, r0
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	d04b      	beq.n	8004ce0 <_reclaim_reent+0xa4>
 8004c48:	69c3      	ldr	r3, [r0, #28]
 8004c4a:	b143      	cbz	r3, 8004c5e <_reclaim_reent+0x22>
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d144      	bne.n	8004cdc <_reclaim_reent+0xa0>
 8004c52:	69e3      	ldr	r3, [r4, #28]
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	b111      	cbz	r1, 8004c5e <_reclaim_reent+0x22>
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f000 f879 	bl	8004d50 <_free_r>
 8004c5e:	6961      	ldr	r1, [r4, #20]
 8004c60:	b111      	cbz	r1, 8004c68 <_reclaim_reent+0x2c>
 8004c62:	4620      	mov	r0, r4
 8004c64:	f000 f874 	bl	8004d50 <_free_r>
 8004c68:	69e1      	ldr	r1, [r4, #28]
 8004c6a:	b111      	cbz	r1, 8004c72 <_reclaim_reent+0x36>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f000 f86f 	bl	8004d50 <_free_r>
 8004c72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c74:	b111      	cbz	r1, 8004c7c <_reclaim_reent+0x40>
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f86a 	bl	8004d50 <_free_r>
 8004c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c7e:	b111      	cbz	r1, 8004c86 <_reclaim_reent+0x4a>
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 f865 	bl	8004d50 <_free_r>
 8004c86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c88:	b111      	cbz	r1, 8004c90 <_reclaim_reent+0x54>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f860 	bl	8004d50 <_free_r>
 8004c90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c92:	b111      	cbz	r1, 8004c9a <_reclaim_reent+0x5e>
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 f85b 	bl	8004d50 <_free_r>
 8004c9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c9c:	b111      	cbz	r1, 8004ca4 <_reclaim_reent+0x68>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 f856 	bl	8004d50 <_free_r>
 8004ca4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ca6:	b111      	cbz	r1, 8004cae <_reclaim_reent+0x72>
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f851 	bl	8004d50 <_free_r>
 8004cae:	6a23      	ldr	r3, [r4, #32]
 8004cb0:	b1b3      	cbz	r3, 8004ce0 <_reclaim_reent+0xa4>
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cb8:	4718      	bx	r3
 8004cba:	5949      	ldr	r1, [r1, r5]
 8004cbc:	b941      	cbnz	r1, 8004cd0 <_reclaim_reent+0x94>
 8004cbe:	3504      	adds	r5, #4
 8004cc0:	69e3      	ldr	r3, [r4, #28]
 8004cc2:	2d80      	cmp	r5, #128	; 0x80
 8004cc4:	68d9      	ldr	r1, [r3, #12]
 8004cc6:	d1f8      	bne.n	8004cba <_reclaim_reent+0x7e>
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f841 	bl	8004d50 <_free_r>
 8004cce:	e7c0      	b.n	8004c52 <_reclaim_reent+0x16>
 8004cd0:	680e      	ldr	r6, [r1, #0]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f83c 	bl	8004d50 <_free_r>
 8004cd8:	4631      	mov	r1, r6
 8004cda:	e7ef      	b.n	8004cbc <_reclaim_reent+0x80>
 8004cdc:	2500      	movs	r5, #0
 8004cde:	e7ef      	b.n	8004cc0 <_reclaim_reent+0x84>
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000005c 	.word	0x2000005c

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f000 f880 	bl	8004e00 <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08004ed0 	.word	0x08004ed0
 8004d24:	08004ed0 	.word	0x08004ed0
 8004d28:	08004ed0 	.word	0x08004ed0
 8004d2c:	08004ed4 	.word	0x08004ed4

08004d30 <__retarget_lock_acquire_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <__retarget_lock_release_recursive>:
 8004d32:	4770      	bx	lr

08004d34 <memcpy>:
 8004d34:	440a      	add	r2, r1
 8004d36:	4291      	cmp	r1, r2
 8004d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d3c:	d100      	bne.n	8004d40 <memcpy+0xc>
 8004d3e:	4770      	bx	lr
 8004d40:	b510      	push	{r4, lr}
 8004d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	d1f9      	bne.n	8004d42 <memcpy+0xe>
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <_free_r>:
 8004d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d52:	2900      	cmp	r1, #0
 8004d54:	d044      	beq.n	8004de0 <_free_r+0x90>
 8004d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d5a:	9001      	str	r0, [sp, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d62:	bfb8      	it	lt
 8004d64:	18e4      	addlt	r4, r4, r3
 8004d66:	f000 f83f 	bl	8004de8 <__malloc_lock>
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <_free_r+0x94>)
 8004d6c:	9801      	ldr	r0, [sp, #4]
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	b933      	cbnz	r3, 8004d80 <_free_r+0x30>
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	6014      	str	r4, [r2, #0]
 8004d76:	b003      	add	sp, #12
 8004d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d7c:	f000 b83a 	b.w	8004df4 <__malloc_unlock>
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d908      	bls.n	8004d96 <_free_r+0x46>
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	1961      	adds	r1, r4, r5
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf01      	itttt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	e7ed      	b.n	8004d72 <_free_r+0x22>
 8004d96:	461a      	mov	r2, r3
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	b10b      	cbz	r3, 8004da0 <_free_r+0x50>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d9fa      	bls.n	8004d96 <_free_r+0x46>
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	1855      	adds	r5, r2, r1
 8004da4:	42a5      	cmp	r5, r4
 8004da6:	d10b      	bne.n	8004dc0 <_free_r+0x70>
 8004da8:	6824      	ldr	r4, [r4, #0]
 8004daa:	4421      	add	r1, r4
 8004dac:	1854      	adds	r4, r2, r1
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	d1e0      	bne.n	8004d76 <_free_r+0x26>
 8004db4:	681c      	ldr	r4, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	6053      	str	r3, [r2, #4]
 8004dba:	440c      	add	r4, r1
 8004dbc:	6014      	str	r4, [r2, #0]
 8004dbe:	e7da      	b.n	8004d76 <_free_r+0x26>
 8004dc0:	d902      	bls.n	8004dc8 <_free_r+0x78>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	6003      	str	r3, [r0, #0]
 8004dc6:	e7d6      	b.n	8004d76 <_free_r+0x26>
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	1961      	adds	r1, r4, r5
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	bf04      	itt	eq
 8004dd0:	6819      	ldreq	r1, [r3, #0]
 8004dd2:	685b      	ldreq	r3, [r3, #4]
 8004dd4:	6063      	str	r3, [r4, #4]
 8004dd6:	bf04      	itt	eq
 8004dd8:	1949      	addeq	r1, r1, r5
 8004dda:	6021      	streq	r1, [r4, #0]
 8004ddc:	6054      	str	r4, [r2, #4]
 8004dde:	e7ca      	b.n	8004d76 <_free_r+0x26>
 8004de0:	b003      	add	sp, #12
 8004de2:	bd30      	pop	{r4, r5, pc}
 8004de4:	20001bb0 	.word	0x20001bb0

08004de8 <__malloc_lock>:
 8004de8:	4801      	ldr	r0, [pc, #4]	; (8004df0 <__malloc_lock+0x8>)
 8004dea:	f7ff bfa1 	b.w	8004d30 <__retarget_lock_acquire_recursive>
 8004dee:	bf00      	nop
 8004df0:	20001bac 	.word	0x20001bac

08004df4 <__malloc_unlock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	; (8004dfc <__malloc_unlock+0x8>)
 8004df6:	f7ff bf9c 	b.w	8004d32 <__retarget_lock_release_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	20001bac 	.word	0x20001bac

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
