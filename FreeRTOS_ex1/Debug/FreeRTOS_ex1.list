
FreeRTOS_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000060  08004cb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08004cb8  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156fb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9f  00000000  00000000  000357ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00038770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee7  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001466b  00000000  00000000  0003d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d28  00000000  00000000  00051e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053c4  00000000  00000000  00148b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014df0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b80 	.word	0x08004b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004b80 	.word	0x08004b80

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa21 	bl	800066a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f868 	bl	8000300 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fe94 	bl	8001f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <main+0x3c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0x40>)
 800023a:	f001 fed9 	bl	8001ff0 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0x44>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <main+0x48>)
 8000246:	2100      	movs	r1, #0
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x4c>)
 800024a:	f001 fed1 	bl	8001ff0 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <main+0x50>)
 8000252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000254:	f001 fea6 	bl	8001fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	bf00      	nop
 800025c:	08004bc0 	.word	0x08004bc0
 8000260:	080003e5 	.word	0x080003e5
 8000264:	2000007c 	.word	0x2000007c
 8000268:	08004be4 	.word	0x08004be4
 800026c:	08000409 	.word	0x08000409
 8000270:	20000080 	.word	0x20000080

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b096      	sub	sp, #88	; 0x58
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fb92 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029a:	f000 fcf5 	bl	8000c88 <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a4:	f000 f8ca 	bl	800043c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a8:	2310      	movs	r3, #16
 80002aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b4:	2360      	movs	r3, #96	; 0x60
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fd37 	bl	8000d34 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002cc:	f000 f8b6 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 f8ff 	bl	80014ec <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f4:	f000 f8a2 	bl	800043c <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a28      	ldr	r2, [pc, #160]	; (80003bc <MX_GPIO_Init+0xbc>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	f003 0304 	and.w	r3, r3, #4
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a22      	ldr	r2, [pc, #136]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_GPIO_Init+0xbc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_GPIO_Init+0xbc>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fc45 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800036a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000370:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4619      	mov	r1, r3
 8000380:	480f      	ldr	r0, [pc, #60]	; (80003c0 <MX_GPIO_Init+0xc0>)
 8000382:	f000 fa8d 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000386:	2320      	movs	r3, #32
 8000388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	4619      	mov	r1, r3
 800039c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a0:	f000 fa7e 	bl	80008a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2105      	movs	r1, #5
 80003a8:	2028      	movs	r0, #40	; 0x28
 80003aa:	f000 fa4f 	bl	800084c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ae:	2028      	movs	r0, #40	; 0x28
 80003b0:	f000 fa68 	bl	8000884 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800

080003c4 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff fefd 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 80003d6:	200a      	movs	r0, #10
 80003d8:	f7ff fefa 	bl	80001d0 <ITM_SendChar>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	task_action('1');
 80003ec:	2031      	movs	r0, #49	; 0x31
 80003ee:	f7ff ffe9 	bl	80003c4 <task_action>
	taskYIELD();
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <StartTask01+0x20>)
 80003f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	f3bf 8f4f 	dsb	sy
 80003fe:	f3bf 8f6f 	isb	sy
	task_action('1');
 8000402:	e7f3      	b.n	80003ec <StartTask01+0x8>
 8000404:	e000ed04 	.word	0xe000ed04

08000408 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  //osPriority_t priority;

  /* Infinite loop */
  for(;;)
  {
	task_action('2');
 8000410:	2032      	movs	r0, #50	; 0x32
 8000412:	f7ff ffd7 	bl	80003c4 <task_action>
 8000416:	e7fb      	b.n	8000410 <StartTask02+0x8>

08000418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800042a:	f000 f937 	bl	800069c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40001000 	.word	0x40001000

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_MspInit+0x64>)
 8000450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000452:	4a16      	ldr	r2, [pc, #88]	; (80004ac <HAL_MspInit+0x64>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6613      	str	r3, [r2, #96]	; 0x60
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_MspInit+0x64>)
 800045c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <HAL_MspInit+0x64>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <HAL_MspInit+0x64>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	6593      	str	r3, [r2, #88]	; 0x58
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_MspInit+0x64>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2105      	movs	r1, #5
 8000482:	f06f 0004 	mvn.w	r0, #4
 8000486:	f000 f9e1 	bl	800084c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2105      	movs	r1, #5
 800048e:	f06f 0003 	mvn.w	r0, #3
 8000492:	f000 f9db 	bl	800084c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	210f      	movs	r1, #15
 800049a:	f06f 0001 	mvn.w	r0, #1
 800049e:	f000 f9d5 	bl	800084c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08e      	sub	sp, #56	; 0x38
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <HAL_InitTick+0xe0>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c2:	4a33      	ldr	r2, [pc, #204]	; (8000590 <HAL_InitTick+0xe0>)
 80004c4:	f043 0310 	orr.w	r3, r3, #16
 80004c8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <HAL_InitTick+0xe0>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	f003 0310 	and.w	r3, r3, #16
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d6:	f107 0210 	add.w	r2, r7, #16
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 f9b1 	bl	8001848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004f0:	f001 f994 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 80004f4:	6378      	str	r0, [r7, #52]	; 0x34
 80004f6:	e004      	b.n	8000502 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004f8:	f001 f990 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 80004fc:	4603      	mov	r3, r0
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000504:	4a23      	ldr	r2, [pc, #140]	; (8000594 <HAL_InitTick+0xe4>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9b      	lsrs	r3, r3, #18
 800050c:	3b01      	subs	r3, #1
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <HAL_InitTick+0xe8>)
 8000512:	4a22      	ldr	r2, [pc, #136]	; (800059c <HAL_InitTick+0xec>)
 8000514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <HAL_InitTick+0xe8>)
 8000518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800051c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_InitTick+0xe8>)
 8000520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000522:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <HAL_InitTick+0xe8>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <HAL_InitTick+0xe8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <HAL_InitTick+0xe8>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000536:	4818      	ldr	r0, [pc, #96]	; (8000598 <HAL_InitTick+0xe8>)
 8000538:	f001 fa18 	bl	800196c <HAL_TIM_Base_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000546:	2b00      	cmp	r3, #0
 8000548:	d11b      	bne.n	8000582 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <HAL_InitTick+0xe8>)
 800054c:	f001 fa70 	bl	8001a30 <HAL_TIM_Base_Start_IT>
 8000550:	4603      	mov	r3, r0
 8000552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800055a:	2b00      	cmp	r3, #0
 800055c:	d111      	bne.n	8000582 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800055e:	2036      	movs	r0, #54	; 0x36
 8000560:	f000 f990 	bl	8000884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	d808      	bhi.n	800057c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800056a:	2200      	movs	r2, #0
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	2036      	movs	r0, #54	; 0x36
 8000570:	f000 f96c 	bl	800084c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <HAL_InitTick+0xf0>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e002      	b.n	8000582 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000586:	4618      	mov	r0, r3
 8000588:	3738      	adds	r7, #56	; 0x38
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	431bde83 	.word	0x431bde83
 8000598:	20000084 	.word	0x20000084
 800059c:	40001000 	.word	0x40001000
 80005a0:	20000004 	.word	0x20000004

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80005d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005d8:	f000 fb24 	bl	8000c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <TIM6_DAC_IRQHandler+0x10>)
 80005e6:	f001 fa93 	bl	8001b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff ffea 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f004 fa0f 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fde9 	bl	8000220 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000650:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800065c:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8000660:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000664:	20001bb4 	.word	0x20001bb4

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>

0800066a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f8de 	bl	8000836 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067a:	200f      	movs	r0, #15
 800067c:	f7ff ff18 	bl	80004b0 <HAL_InitTick>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e001      	b.n	8000690 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800068c:	f7ff fedc 	bl	8000448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008
 80006c0:	200000d0 	.word	0x200000d0

080006c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000d0 	.word	0x200000d0

080006dc <__NVIC_SetPriorityGrouping>:
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <__NVIC_EnableIRQ+0x38>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff4c 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800085e:	f7ff ff61 	bl	8000724 <__NVIC_GetPriorityGrouping>
 8000862:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	68b9      	ldr	r1, [r7, #8]
 8000868:	6978      	ldr	r0, [r7, #20]
 800086a:	f7ff ffb1 	bl	80007d0 <NVIC_EncodePriority>
 800086e:	4602      	mov	r2, r0
 8000870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff80 	bl	800077c <__NVIC_SetPriority>
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff54 	bl	8000740 <__NVIC_EnableIRQ>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e17f      	b.n	8000bb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8171 	beq.w	8000baa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d005      	beq.n	80008e0 <HAL_GPIO_Init+0x40>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0303 	and.w	r3, r3, #3
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d130      	bne.n	8000942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000916:	2201      	movs	r2, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	f003 0201 	and.w	r2, r3, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	2b03      	cmp	r3, #3
 800094c:	d118      	bne.n	8000980 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000954:	2201      	movs	r2, #1
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	f003 0201 	and.w	r2, r3, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b03      	cmp	r3, #3
 800098a:	d017      	beq.n	80009bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d123      	bne.n	8000a10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	08da      	lsrs	r2, r3, #3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3208      	adds	r2, #8
 80009d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0203 	and.w	r2, r3, #3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80ac 	beq.w	8000baa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <HAL_GPIO_Init+0x330>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a5e      	ldr	r2, [pc, #376]	; (8000bd0 <HAL_GPIO_Init+0x330>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b5c      	ldr	r3, [pc, #368]	; (8000bd0 <HAL_GPIO_Init+0x330>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a6a:	4a5a      	ldr	r2, [pc, #360]	; (8000bd4 <HAL_GPIO_Init+0x334>)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3302      	adds	r3, #2
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a94:	d025      	beq.n	8000ae2 <HAL_GPIO_Init+0x242>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a4f      	ldr	r2, [pc, #316]	; (8000bd8 <HAL_GPIO_Init+0x338>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d01f      	beq.n	8000ade <HAL_GPIO_Init+0x23e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <HAL_GPIO_Init+0x33c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d019      	beq.n	8000ada <HAL_GPIO_Init+0x23a>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <HAL_GPIO_Init+0x340>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x236>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <HAL_GPIO_Init+0x344>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_GPIO_Init+0x232>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <HAL_GPIO_Init+0x348>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d007      	beq.n	8000ace <HAL_GPIO_Init+0x22e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4a      	ldr	r2, [pc, #296]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_GPIO_Init+0x22a>
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000aca:	2307      	movs	r3, #7
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af4:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <HAL_GPIO_Init+0x334>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b26:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b50:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_GPIO_Init+0x350>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f47f ae78 	bne.w	80008b0 <HAL_GPIO_Init+0x10>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	48001000 	.word	0x48001000
 8000be8:	48001400 	.word	0x48001400
 8000bec:	48001800 	.word	0x48001800
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f806 	bl	8000c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000

08000c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c96:	d130      	bne.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca4:	d038      	beq.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2232      	movs	r2, #50	; 0x32
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ccc:	e002      	b.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce0:	d102      	bne.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f2      	bne.n	8000cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf4:	d110      	bne.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e00f      	b.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d06:	d007      	beq.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40007000 	.word	0x40007000
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e3ca      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d46:	4b97      	ldr	r3, [pc, #604]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d50:	4b94      	ldr	r3, [pc, #592]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80e4 	beq.w	8000f30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <HAL_RCC_OscConfig+0x4a>
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	f040 808b 	bne.w	8000e8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	f040 8087 	bne.w	8000e8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d7e:	4b89      	ldr	r3, [pc, #548]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d005      	beq.n	8000d96 <HAL_RCC_OscConfig+0x62>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e3a2      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1a      	ldr	r2, [r3, #32]
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_RCC_OscConfig+0x7c>
 8000da6:	4b7f      	ldr	r3, [pc, #508]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dae:	e005      	b.n	8000dbc <HAL_RCC_OscConfig+0x88>
 8000db0:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d223      	bcs.n	8000e08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fd71 	bl	80018ac <RCC_SetFlashLatencyFromMSIRange>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e383      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd4:	4b73      	ldr	r3, [pc, #460]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a72      	ldr	r2, [pc, #456]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b70      	ldr	r3, [pc, #448]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	496d      	ldr	r1, [pc, #436]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df2:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	4968      	ldr	r1, [pc, #416]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
 8000e06:	e025      	b.n	8000e54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e08:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a65      	ldr	r2, [pc, #404]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4960      	ldr	r1, [pc, #384]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e26:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	495b      	ldr	r1, [pc, #364]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fd31 	bl	80018ac <RCC_SetFlashLatencyFromMSIRange>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e343      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e54:	f000 fc4a 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	4950      	ldr	r1, [pc, #320]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_RCC_OscConfig+0x278>)
 8000e72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e74:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb19 	bl	80004b0 <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d052      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	e327      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d032      	beq.n	8000efa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e94:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc10 	bl	80006c4 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc0c 	bl	80006c4 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e310      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4931      	ldr	r1, [pc, #196]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	492c      	ldr	r1, [pc, #176]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
 8000ef8:	e01a      	b.n	8000f30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fbdd 	bl	80006c4 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fbd9 	bl	80006c4 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e2dd      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x1da>
 8000f2c:	e000      	b.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d074      	beq.n	8001026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d005      	beq.n	8000f4e <HAL_RCC_OscConfig+0x21a>
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b0c      	cmp	r3, #12
 8000f46:	d10e      	bne.n	8000f66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d10b      	bne.n	8000f66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d064      	beq.n	8001024 <HAL_RCC_OscConfig+0x2f0>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d160      	bne.n	8001024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e2ba      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x24a>
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e026      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f86:	d115      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x280>
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e014      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	08004c08 	.word	0x08004c08
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	4ba0      	ldr	r3, [pc, #640]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a9f      	ldr	r2, [pc, #636]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a9c      	ldr	r2, [pc, #624]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb76 	bl	80006c4 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb72 	bl	80006c4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e276      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	4b92      	ldr	r3, [pc, #584]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2a8>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb62 	bl	80006c4 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fb5e 	bl	80006c4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e262      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	4b88      	ldr	r3, [pc, #544]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x2d0>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d060      	beq.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x310>
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d119      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d116      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001044:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x328>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e23f      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	4973      	ldr	r1, [pc, #460]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	e040      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d023      	beq.n	80010c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6e      	ldr	r2, [pc, #440]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fb1d 	bl	80006c4 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fb19 	bl	80006c4 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e21d      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b62      	ldr	r3, [pc, #392]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	495f      	ldr	r1, [pc, #380]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
 80010c0:	e018      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff faf9 	bl	80006c4 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff faf5 	bl	80006c4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1f9      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03c      	beq.n	800117a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01c      	beq.n	8001142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110e:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff fad4 	bl	80006c4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fad0 	bl	80006c4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1d4      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ef      	beq.n	8001120 <HAL_RCC_OscConfig+0x3ec>
 8001140:	e01b      	b.n	800117a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001148:	4a3b      	ldr	r2, [pc, #236]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001152:	f7ff fab7 	bl	80006c4 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fab3 	bl	80006c4 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1b7      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ef      	bne.n	800115a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10d      	bne.n	80011b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6593      	str	r3, [r2, #88]	; 0x58
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d118      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa7a 	bl	80006c4 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff fa76 	bl	80006c4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e17a      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x4d8>
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120a:	e029      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d115      	bne.n	8001240 <HAL_RCC_OscConfig+0x50c>
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40007000 	.word	0x40007000
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	4a9b      	ldr	r2, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001250:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	4a97      	ldr	r2, [pc, #604]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d016      	beq.n	8001296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fa2c 	bl	80006c4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fa28 	bl	80006c4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e12a      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ed      	beq.n	8001270 <HAL_RCC_OscConfig+0x53c>
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff fa15 	bl	80006c4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fa11 	bl	80006c4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e113      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ed      	bne.n	800129e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	4a79      	ldr	r2, [pc, #484]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80fe 	beq.w	80014da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f040 80d0 	bne.w	8001488 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012e8:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d130      	bne.n	800135e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	3b01      	subs	r3, #1
 8001308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d127      	bne.n	800135e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d11f      	bne.n	800135e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001328:	2a07      	cmp	r2, #7
 800132a:	bf14      	ite	ne
 800132c:	2201      	movne	r2, #1
 800132e:	2200      	moveq	r2, #0
 8001330:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001332:	4293      	cmp	r3, r2
 8001334:	d113      	bne.n	800135e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d109      	bne.n	800135e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	3b01      	subs	r3, #1
 8001358:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d06e      	beq.n	800143c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d069      	beq.n	8001438 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001370:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0ad      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001380:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800138c:	f7ff f99a 	bl	80006c4 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff f996 	bl	80006c4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e09a      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x784>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c2:	3a01      	subs	r2, #1
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	4311      	orrs	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013cc:	0212      	lsls	r2, r2, #8
 80013ce:	4311      	orrs	r1, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013d4:	0852      	lsrs	r2, r2, #1
 80013d6:	3a01      	subs	r2, #1
 80013d8:	0552      	lsls	r2, r2, #21
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013e0:	0852      	lsrs	r2, r2, #1
 80013e2:	3a01      	subs	r2, #1
 80013e4:	0652      	lsls	r2, r2, #25
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013ec:	0912      	lsrs	r2, r2, #4
 80013ee:	0452      	lsls	r2, r2, #17
 80013f0:	430a      	orrs	r2, r1
 80013f2:	4930      	ldr	r1, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001402:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001410:	f7ff f958 	bl	80006c4 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f954 	bl	80006c4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e058      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001436:	e050      	b.n	80014da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e04f      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d148      	bne.n	80014da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800145a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001460:	f7ff f930 	bl	80006c4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff f92c 	bl	80006c4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e030      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x734>
 8001486:	e028      	b.n	80014da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d023      	beq.n	80014d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_RCC_OscConfig+0x780>)
 8001494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff f913 	bl	80006c4 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a0:	e00c      	b.n	80014bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff f90f 	bl	80006c4 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d905      	bls.n	80014bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_OscConfig+0x7b0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ec      	bne.n	80014a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_OscConfig+0x7b0>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	4905      	ldr	r1, [pc, #20]	; (80014e4 <HAL_RCC_OscConfig+0x7b0>)
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_RCC_OscConfig+0x7b4>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
 80014d4:	e001      	b.n	80014da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	feeefffc 	.word	0xfeeefffc

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0e7      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d910      	bls.n	8001530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4970      	ldr	r1, [pc, #448]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0cf      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d010      	beq.n	800155e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	429a      	cmp	r2, r3
 800154a:	d908      	bls.n	800155e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4960      	ldr	r1, [pc, #384]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d04c      	beq.n	8001604 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d121      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0a6      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d115      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e09a      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a2:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e08e      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e086      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f023 0203 	bic.w	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4943      	ldr	r1, [pc, #268]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d4:	f7ff f876 	bl	80006c4 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff f872 	bl	80006c4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e06e      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 020c 	and.w	r2, r3, #12
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d1eb      	bne.n	80015dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d010      	beq.n	8001632 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161c:	429a      	cmp	r2, r3
 800161e:	d208      	bcs.n	8001632 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	492b      	ldr	r1, [pc, #172]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d210      	bcs.n	8001662 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 0207 	bic.w	r2, r3, #7
 8001648:	4923      	ldr	r1, [pc, #140]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e036      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4918      	ldr	r1, [pc, #96]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4910      	ldr	r1, [pc, #64]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016a0:	f000 f824 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	490b      	ldr	r1, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1f4>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1f8>)
 80016be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1fc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fef3 	bl	80004b0 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ce:	7afb      	ldrb	r3, [r7, #11]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08004c08 	.word	0x08004c08
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x34>
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d121      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d11e      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e005      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001748:	4a2b      	ldr	r2, [pc, #172]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10d      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d102      	bne.n	800176a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_GetSysClockFreq+0x110>)
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	e004      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b08      	cmp	r3, #8
 800176e:	d101      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_RCC_GetSysClockFreq+0x114>)
 8001772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d134      	bne.n	80017e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0xa6>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d003      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0xac>
 8001790:	e005      	b.n	800179e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_RCC_GetSysClockFreq+0x110>)
 8001794:	617b      	str	r3, [r7, #20]
      break;
 8001796:	e005      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_GetSysClockFreq+0x114>)
 800179a:	617b      	str	r3, [r7, #20]
      break;
 800179c:	e002      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	617b      	str	r3, [r7, #20]
      break;
 80017a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	3301      	adds	r3, #1
 80017b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	fb03 f202 	mul.w	r2, r3, r2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	0e5b      	lsrs	r3, r3, #25
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	3301      	adds	r3, #1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017e4:	69bb      	ldr	r3, [r7, #24]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08004c20 	.word	0x08004c20
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	007a1200 	.word	0x007a1200

08001804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_RCC_GetHCLKFreq+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001820:	f7ff fff0 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	08004c18 	.word	0x08004c18

08001848 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	220f      	movs	r2, #15
 8001856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_RCC_GetClockConfig+0x60>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40022000 	.word	0x40022000

080018ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018c4:	f7ff f9d2 	bl	8000c6c <HAL_PWREx_GetVoltageRange>
 80018c8:	6178      	str	r0, [r7, #20]
 80018ca:	e014      	b.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	4a24      	ldr	r2, [pc, #144]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6593      	str	r3, [r2, #88]	; 0x58
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018e4:	f7ff f9c2 	bl	8000c6c <HAL_PWREx_GetVoltageRange>
 80018e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d10b      	bne.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b80      	cmp	r3, #128	; 0x80
 8001902:	d919      	bls.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2ba0      	cmp	r3, #160	; 0xa0
 8001908:	d902      	bls.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800190a:	2302      	movs	r3, #2
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e013      	b.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e010      	b.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d902      	bls.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800191c:	2303      	movs	r3, #3
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e00a      	b.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d102      	bne.n	800192e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	e004      	b.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b70      	cmp	r3, #112	; 0x70
 8001932:	d101      	bne.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001934:	2301      	movs	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0207 	bic.w	r2, r3, #7
 8001940:	4909      	ldr	r1, [pc, #36]	; (8001968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e049      	b.n	8001a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f841 	bl	8001a1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f000 f9da 	bl	8001d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e04f      	b.n	8001ae8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a72:	d018      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_TIM_Base_Start_IT+0xcc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x76>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d115      	bne.n	8001ad2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d015      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0xb4>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d011      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad0:	e008      	b.n	8001ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40000c00 	.word	0x40000c00
 8001b04:	40013400 	.word	0x40013400
 8001b08:	40014000 	.word	0x40014000
 8001b0c:	00010007 	.word	0x00010007

08001b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0202 	mvn.w	r2, #2
 8001b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8e4 	bl	8001d28 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8d6 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8e7 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0204 	mvn.w	r2, #4
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8be 	bl	8001d28 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8b0 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8c1 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0208 	mvn.w	r2, #8
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f898 	bl	8001d28 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f88a 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f89b 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d020      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0210 	mvn.w	r2, #16
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f872 	bl	8001d28 <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f864 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f875 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0201 	mvn.w	r2, #1
 8001c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fbce 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f906 	bl	8001eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8fe 	bl	8001ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f834 	bl	8001d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00c      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0220 	mvn.w	r2, #32
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8c6 	bl	8001e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <TIM_Base_SetConfig+0x114>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <TIM_Base_SetConfig+0x40>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d82:	d00f      	beq.n	8001da4 <TIM_Base_SetConfig+0x40>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <TIM_Base_SetConfig+0x118>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00b      	beq.n	8001da4 <TIM_Base_SetConfig+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <TIM_Base_SetConfig+0x11c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <TIM_Base_SetConfig+0x40>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <TIM_Base_SetConfig+0x120>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <TIM_Base_SetConfig+0x40>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3a      	ldr	r2, [pc, #232]	; (8001e88 <TIM_Base_SetConfig+0x124>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2f      	ldr	r2, [pc, #188]	; (8001e78 <TIM_Base_SetConfig+0x114>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d01b      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <TIM_Base_SetConfig+0x118>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d017      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <TIM_Base_SetConfig+0x11c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <TIM_Base_SetConfig+0x120>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00f      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <TIM_Base_SetConfig+0x124>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <TIM_Base_SetConfig+0x128>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <TIM_Base_SetConfig+0x12c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x9a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <TIM_Base_SetConfig+0x130>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <TIM_Base_SetConfig+0x114>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00f      	beq.n	8001e5c <TIM_Base_SetConfig+0xf8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <TIM_Base_SetConfig+0x124>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <TIM_Base_SetConfig+0xf8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <TIM_Base_SetConfig+0x128>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0xf8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <TIM_Base_SetConfig+0x12c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0xf8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <TIM_Base_SetConfig+0x130>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40013400 	.word	0x40013400
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800

08001e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <__NVIC_SetPriority>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Handler+0x1c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f30:	f001 fcd8 	bl	80038e4 <xTaskGetSchedulerState>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f3a:	f002 fabd 	bl	80044b8 <xPortSysTickHandler>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f06f 0004 	mvn.w	r0, #4
 8001f52:	f7ff ffbf 	bl	8001ed4 <__NVIC_SetPriority>
#endif
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f62:	f3ef 8305 	mrs	r3, IPSR
 8001f66:	603b      	str	r3, [r7, #0]
  return(result);
 8001f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f6e:	f06f 0305 	mvn.w	r3, #5
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	e00c      	b.n	8001f90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <osKernelInitialize+0x44>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <osKernelInitialize+0x44>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e002      	b.n	8001f90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000d4 	.word	0x200000d4

08001fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001faa:	f3ef 8305 	mrs	r3, IPSR
 8001fae:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8001fb6:	f06f 0305 	mvn.w	r3, #5
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e010      	b.n	8001fe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <osKernelStart+0x48>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d109      	bne.n	8001fda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fc6:	f7ff ffbf 	bl	8001f48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <osKernelStart+0x48>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fd0:	f001 f82c 	bl	800302c <vTaskStartScheduler>
      stat = osOK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	e002      	b.n	8001fe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200000d4 	.word	0x200000d4

08001ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	; 0x38
 8001ff4:	af04      	add	r7, sp, #16
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002000:	f3ef 8305 	mrs	r3, IPSR
 8002004:	617b      	str	r3, [r7, #20]
  return(result);
 8002006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002008:	2b00      	cmp	r3, #0
 800200a:	d17e      	bne.n	800210a <osThreadNew+0x11a>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d07b      	beq.n	800210a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002016:	2318      	movs	r3, #24
 8002018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d045      	beq.n	80020b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <osThreadNew+0x48>
        name = attr->name;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <osThreadNew+0x6e>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b38      	cmp	r3, #56	; 0x38
 8002050:	d805      	bhi.n	800205e <osThreadNew+0x6e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <osThreadNew+0x72>
        return (NULL);
 800205e:	2300      	movs	r3, #0
 8002060:	e054      	b.n	800210c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00e      	beq.n	8002098 <osThreadNew+0xa8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2ba7      	cmp	r3, #167	; 0xa7
 8002080:	d90a      	bls.n	8002098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <osThreadNew+0xa8>
        mem = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	e010      	b.n	80020ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10c      	bne.n	80020ba <osThreadNew+0xca>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <osThreadNew+0xca>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <osThreadNew+0xca>
          mem = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	e001      	b.n	80020ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d110      	bne.n	80020e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020c8:	9202      	str	r2, [sp, #8]
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6a3a      	ldr	r2, [r7, #32]
 80020d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fdf0 	bl	8002cbc <xTaskCreateStatic>
 80020dc:	4603      	mov	r3, r0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e013      	b.n	800210a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d110      	bne.n	800210a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fe3b 	bl	8002d76 <xTaskCreate>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <osThreadNew+0x11a>
            hTask = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800210a:	693b      	ldr	r3, [r7, #16]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <vApplicationGetIdleTaskMemory+0x2c>)
 8002124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <vApplicationGetIdleTaskMemory+0x30>)
 800212a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200000d8 	.word	0x200000d8
 8002144:	20000180 	.word	0x20000180

08002148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <vApplicationGetTimerTaskMemory+0x2c>)
 8002158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <vApplicationGetTimerTaskMemory+0x30>)
 800215e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000380 	.word	0x20000380
 8002178:	20000428 	.word	0x20000428

0800217c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d103      	bne.n	800223e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e00c      	b.n	8002258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3308      	adds	r3, #8
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e002      	b.n	800224c <vListInsert+0x2e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	429a      	cmp	r2, r3
 8002256:	d2f6      	bcs.n	8002246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6852      	ldr	r2, [r2, #4]
 80022b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d103      	bne.n	80022c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800230e:	f002 f841 	bl	8004394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	441a      	add	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	3b01      	subs	r3, #1
 8002340:	68f9      	ldr	r1, [r7, #12]
 8002342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	441a      	add	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	22ff      	movs	r2, #255	; 0xff
 8002352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d114      	bne.n	800238e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01a      	beq.n	80023a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3310      	adds	r3, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f001 f8f5 	bl	8003560 <xTaskRemoveFromEventList>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <xQueueGenericReset+0xcc>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	e009      	b.n	80023a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3310      	adds	r3, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fef2 	bl	800217c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3324      	adds	r3, #36	; 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff feed 	bl	800217c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023a2:	f002 f827 	bl	80043f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08e      	sub	sp, #56	; 0x38
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <xQueueGenericCreateStatic+0x52>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <xQueueGenericCreateStatic+0x56>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericCreateStatic+0x58>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	623b      	str	r3, [r7, #32]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <xQueueGenericCreateStatic+0x7e>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <xQueueGenericCreateStatic+0x82>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <xQueueGenericCreateStatic+0x84>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	61fb      	str	r3, [r7, #28]
}
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002452:	2350      	movs	r3, #80	; 0x50
 8002454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d00a      	beq.n	8002472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61bb      	str	r3, [r7, #24]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002472:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002486:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f805 	bl	80024a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800249c:	4618      	mov	r0, r3
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e002      	b.n	80024c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024d2:	2101      	movs	r1, #1
 80024d4:	69b8      	ldr	r0, [r7, #24]
 80024d6:	f7ff ff05 	bl	80022e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericSend+0x32>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <xQueueGenericSend+0x40>
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <xQueueGenericSend+0x44>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <xQueueGenericSend+0x46>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <xQueueGenericSend+0x60>
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002548:	bf00      	nop
 800254a:	e7fe      	b.n	800254a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d103      	bne.n	800255a <xQueueGenericSend+0x6e>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <xQueueGenericSend+0x72>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <xQueueGenericSend+0x74>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <xQueueGenericSend+0x8e>
	__asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	623b      	str	r3, [r7, #32]
}
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257a:	f001 f9b3 	bl	80038e4 <xTaskGetSchedulerState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <xQueueGenericSend+0x9e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <xQueueGenericSend+0xa2>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <xQueueGenericSend+0xa4>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	61fb      	str	r3, [r7, #28]
}
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025aa:	f001 fef3 	bl	8004394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <xQueueGenericSend+0xd4>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d129      	bne.n	8002614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c6:	f000 fa0b 	bl	80029e0 <prvCopyDataToQueue>
 80025ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	3324      	adds	r3, #36	; 0x24
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 ffc1 	bl	8003560 <xTaskRemoveFromEventList>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025e4:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <xQueueGenericSend+0x1f8>)
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	e00a      	b.n	800260c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <xQueueGenericSend+0x1f8>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800260c:	f001 fef2 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 8002610:	2301      	movs	r3, #1
 8002612:	e063      	b.n	80026dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800261a:	f001 feeb 	bl	80043f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800261e:	2300      	movs	r3, #0
 8002620:	e05c      	b.n	80026dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fffb 	bl	8003628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002632:	2301      	movs	r3, #1
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002636:	f001 fedd 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800263a:	f000 fd67 	bl	800310c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800263e:	f001 fea9 	bl	8004394 <vPortEnterCritical>
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d103      	bne.n	8002658 <xQueueGenericSend+0x16c>
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265e:	b25b      	sxtb	r3, r3
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <xQueueGenericSend+0x182>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800266e:	f001 fec1 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002672:	1d3a      	adds	r2, r7, #4
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f000 ffea 	bl	8003654 <xTaskCheckForTimeOut>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d124      	bne.n	80026d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002688:	f000 faa2 	bl	8002bd0 <prvIsQueueFull>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d018      	beq.n	80026c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	3310      	adds	r3, #16
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f000 ff10 	bl	80034c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a2:	f000 fa2d 	bl	8002b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026a6:	f000 fd3f 	bl	8003128 <xTaskResumeAll>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f af7c 	bne.w	80025aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <xQueueGenericSend+0x1f8>)
 80026b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	e772      	b.n	80025aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c6:	f000 fa1b 	bl	8002b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ca:	f000 fd2d 	bl	8003128 <xTaskResumeAll>
 80026ce:	e76c      	b.n	80025aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d2:	f000 fa15 	bl	8002b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026d6:	f000 fd27 	bl	8003128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3738      	adds	r7, #56	; 0x38
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b090      	sub	sp, #64	; 0x40
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d103      	bne.n	8002724 <xQueueGenericSendFromISR+0x3c>
 800271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <xQueueGenericSendFromISR+0x40>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <xQueueGenericSendFromISR+0x42>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002740:	bf00      	nop
 8002742:	e7fe      	b.n	8002742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d103      	bne.n	8002752 <xQueueGenericSendFromISR+0x6a>
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <xQueueGenericSendFromISR+0x6e>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <xQueueGenericSendFromISR+0x70>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	623b      	str	r3, [r7, #32]
}
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002772:	f001 fef1 	bl	8004558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002776:	f3ef 8211 	mrs	r2, BASEPRI
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	61fa      	str	r2, [r7, #28]
 800278c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800278e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <xQueueGenericSendFromISR+0xbc>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d12f      	bne.n	8002804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027ba:	f000 f911 	bl	80029e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d112      	bne.n	80027ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d016      	beq.n	80027fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fec3 	bl	8003560 <xTaskRemoveFromEventList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	b25a      	sxtb	r2, r3
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027fe:	2301      	movs	r3, #1
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002802:	e001      	b.n	8002808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002804:	2300      	movs	r3, #0
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002816:	4618      	mov	r0, r3
 8002818:	3740      	adds	r7, #64	; 0x40
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueReceive+0x30>
	__asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	623b      	str	r3, [r7, #32]
}
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <xQueueReceive+0x3e>
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueReceive+0x42>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueReceive+0x44>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueReceive+0x5e>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fb      	str	r3, [r7, #28]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287e:	f001 f831 	bl	80038e4 <xTaskGetSchedulerState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xQueueReceive+0x6e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueReceive+0x72>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueReceive+0x74>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueReceive+0x8e>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61bb      	str	r3, [r7, #24]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ae:	f001 fd71 	bl	8004394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01f      	beq.n	80028fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c2:	f000 f8f7 	bl	8002ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00f      	beq.n	80028f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	3310      	adds	r3, #16
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fe40 	bl	8003560 <xTaskRemoveFromEventList>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <xQueueReceive+0x1bc>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028f6:	f001 fd7d 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e069      	b.n	80029d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002904:	f001 fd76 	bl	80043f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002908:	2300      	movs	r3, #0
 800290a:	e062      	b.n	80029d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fe86 	bl	8003628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800291c:	2301      	movs	r3, #1
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002920:	f001 fd68 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002924:	f000 fbf2 	bl	800310c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002928:	f001 fd34 	bl	8004394 <vPortEnterCritical>
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d103      	bne.n	8002942 <xQueueReceive+0x122>
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002948:	b25b      	sxtb	r3, r3
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d103      	bne.n	8002958 <xQueueReceive+0x138>
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002958:	f001 fd4c 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295c:	1d3a      	adds	r2, r7, #4
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe75 	bl	8003654 <xTaskCheckForTimeOut>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d123      	bne.n	80029b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 f917 	bl	8002ba4 <prvIsQueueEmpty>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	3324      	adds	r3, #36	; 0x24
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fd9b 	bl	80034c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800298a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800298c:	f000 f8b8 	bl	8002b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002990:	f000 fbca 	bl	8003128 <xTaskResumeAll>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d189      	bne.n	80028ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <xQueueReceive+0x1bc>)
 800299c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	e780      	b.n	80028ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ae:	f000 f8a7 	bl	8002b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029b2:	f000 fbb9 	bl	8003128 <xTaskResumeAll>
 80029b6:	e77a      	b.n	80028ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f8a1 	bl	8002b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029be:	f000 fbb3 	bl	8003128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c4:	f000 f8ee 	bl	8002ba4 <prvIsQueueEmpty>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f43f af6f 	beq.w	80028ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3730      	adds	r7, #48	; 0x30
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d14d      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ff88 	bl	8003920 <xTaskPriorityDisinherit>
 8002a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e043      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d119      	bne.n	8002a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6858      	ldr	r0, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	f002 f842 	bl	8004ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	441a      	add	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d32b      	bcc.n	8002aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e026      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68d8      	ldr	r0, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	f002 f828 	bl	8004ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	425b      	negs	r3, r3
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d105      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aaa:	697b      	ldr	r3, [r7, #20]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	441a      	add	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d303      	bcc.n	8002ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68d9      	ldr	r1, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	461a      	mov	r2, r3
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f001 ffde 	bl	8004ab4 <memcpy>
	}
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b08:	f001 fc44 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b14:	e011      	b.n	8002b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fd1c 	bl	8003560 <xTaskRemoveFromEventList>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b2e:	f000 fdf3 	bl	8003718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dce9      	bgt.n	8002b16 <prvUnlockQueue+0x16>
 8002b42:	e000      	b.n	8002b46 <prvUnlockQueue+0x46>
					break;
 8002b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b4e:	f001 fc51 	bl	80043f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b52:	f001 fc1f 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5e:	e011      	b.n	8002b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fcf7 	bl	8003560 <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b78:	f000 fdce 	bl	8003718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dce9      	bgt.n	8002b60 <prvUnlockQueue+0x60>
 8002b8c:	e000      	b.n	8002b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b98:	f001 fc2c 	bl	80043f4 <vPortExitCritical>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bac:	f001 fbf2 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bc2:	f001 fc17 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bd8:	f001 fbdc 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d102      	bne.n	8002bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e001      	b.n	8002bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bf2:	f001 fbff 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e014      	b.n	8002c3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <vQueueAddToRegistry+0x50>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <vQueueAddToRegistry+0x50>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <vQueueAddToRegistry+0x50>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c32:	e006      	b.n	8002c42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3301      	adds	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b07      	cmp	r3, #7
 8002c3e:	d9e7      	bls.n	8002c10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000828 	.word	0x20000828

08002c54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c64:	f001 fb96 	bl	8004394 <vPortEnterCritical>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <vQueueWaitForMessageRestricted+0x2a>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d103      	bne.n	8002c94 <vQueueWaitForMessageRestricted+0x40>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c94:	f001 fbae 	bl	80043f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3324      	adds	r3, #36	; 0x24
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fc2d 	bl	8003508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff26 	bl	8002b00 <prvUnlockQueue>
	}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	; 0x38
 8002cc0:	af04      	add	r7, sp, #16
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	61fb      	str	r3, [r7, #28]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d02:	23a8      	movs	r3, #168	; 0xa8
 8002d04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2ba8      	cmp	r3, #168	; 0xa8
 8002d0a:	d00a      	beq.n	8002d22 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	61bb      	str	r3, [r7, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01e      	beq.n	8002d68 <xTaskCreateStatic+0xac>
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d42:	2300      	movs	r3, #0
 8002d44:	9303      	str	r3, [sp, #12]
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	9302      	str	r3, [sp, #8]
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f850 	bl	8002e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d62:	f000 f8f3 	bl	8002f4c <prvAddNewTaskToReadyList>
 8002d66:	e001      	b.n	8002d6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d6c:	697b      	ldr	r3, [r7, #20]
	}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08c      	sub	sp, #48	; 0x30
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 fc24 	bl	80045d8 <pvPortMalloc>
 8002d90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d98:	20a8      	movs	r0, #168	; 0xa8
 8002d9a:	f001 fc1d 	bl	80045d8 <pvPortMalloc>
 8002d9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dac:	e005      	b.n	8002dba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f001 fcde 	bl	8004770 <vPortFree>
 8002db4:	e001      	b.n	8002dba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	9302      	str	r3, [sp, #8]
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f80e 	bl	8002e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002de4:	69f8      	ldr	r0, [r7, #28]
 8002de6:	f000 f8b1 	bl	8002f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e002      	b.n	8002df6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002df6:	69bb      	ldr	r3, [r7, #24]
	}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	21a5      	movs	r1, #165	; 0xa5
 8002e1a:	f001 fdc7 	bl	80049ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	617b      	str	r3, [r7, #20]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01f      	beq.n	8002e9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e012      	b.n	8002e8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	7819      	ldrb	r1, [r3, #0]
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	3334      	adds	r3, #52	; 0x34
 8002e74:	460a      	mov	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d9e9      	bls.n	8002e64 <prvInitialiseNewTask+0x64>
 8002e90:	e000      	b.n	8002e94 <prvInitialiseNewTask+0x94>
			{
				break;
 8002e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e9c:	e003      	b.n	8002ea6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	2b37      	cmp	r3, #55	; 0x37
 8002eaa:	d901      	bls.n	8002eb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eac:	2337      	movs	r3, #55	; 0x37
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f978 	bl	80021bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	3318      	adds	r3, #24
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f973 	bl	80021bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	3354      	adds	r3, #84	; 0x54
 8002f00:	224c      	movs	r2, #76	; 0x4c
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 fd51 	bl	80049ac <memset>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <prvInitialiseNewTask+0x140>)
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <prvInitialiseNewTask+0x144>)
 8002f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <prvInitialiseNewTask+0x148>)
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	69b8      	ldr	r0, [r7, #24]
 8002f22:	f001 f90d 	bl	8004140 <pxPortInitialiseStack>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20001a74 	.word	0x20001a74
 8002f44:	20001adc 	.word	0x20001adc
 8002f48:	20001b44 	.word	0x20001b44

08002f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f54:	f001 fa1e 	bl	8004394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <prvAddNewTaskToReadyList+0xc4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <prvAddNewTaskToReadyList+0xc4>)
 8002f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f62:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <prvAddNewTaskToReadyList+0xc4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d110      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f78:	f000 fbf2 	bl	8003760 <prvInitialiseTaskLists>
 8002f7c:	e00d      	b.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <prvAddNewTaskToReadyList+0xcc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d802      	bhi.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f94:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <prvAddNewTaskToReadyList+0xd0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	; (800301c <prvAddNewTaskToReadyList+0xd0>)
 8002fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <prvAddNewTaskToReadyList+0xd0>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <prvAddNewTaskToReadyList+0xd4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d903      	bls.n	8002fc0 <prvAddNewTaskToReadyList+0x74>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <prvAddNewTaskToReadyList+0xd4>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <prvAddNewTaskToReadyList+0xd8>)
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7ff f8fd 	bl	80021d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fdc:	f001 fa0a 	bl	80043f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <prvAddNewTaskToReadyList+0xcc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d207      	bcs.n	8003006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <prvAddNewTaskToReadyList+0xdc>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000d3c 	.word	0x20000d3c
 8003014:	20000868 	.word	0x20000868
 8003018:	20000d48 	.word	0x20000d48
 800301c:	20000d58 	.word	0x20000d58
 8003020:	20000d44 	.word	0x20000d44
 8003024:	2000086c 	.word	0x2000086c
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800303a:	463a      	mov	r2, r7
 800303c:	1d39      	adds	r1, r7, #4
 800303e:	f107 0308 	add.w	r3, r7, #8
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f866 	bl	8002114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	9202      	str	r2, [sp, #8]
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	460a      	mov	r2, r1
 800305a:	4924      	ldr	r1, [pc, #144]	; (80030ec <vTaskStartScheduler+0xc0>)
 800305c:	4824      	ldr	r0, [pc, #144]	; (80030f0 <vTaskStartScheduler+0xc4>)
 800305e:	f7ff fe2d 	bl	8002cbc <xTaskCreateStatic>
 8003062:	4603      	mov	r3, r0
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <vTaskStartScheduler+0xc8>)
 8003066:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003068:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <vTaskStartScheduler+0xc8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e001      	b.n	800307a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003080:	f000 fd10 	bl	8003aa4 <xTimerCreateTimerTask>
 8003084:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d11b      	bne.n	80030c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	613b      	str	r3, [r7, #16]
}
 800309e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <vTaskStartScheduler+0xcc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3354      	adds	r3, #84	; 0x54
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <vTaskStartScheduler+0xd0>)
 80030a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <vTaskStartScheduler+0xd4>)
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <vTaskStartScheduler+0xd8>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <vTaskStartScheduler+0xdc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030be:	f001 f8c7 	bl	8004250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030c2:	e00e      	b.n	80030e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d10a      	bne.n	80030e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60fb      	str	r3, [r7, #12]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <vTaskStartScheduler+0xb4>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	08004ba8 	.word	0x08004ba8
 80030f0:	08003731 	.word	0x08003731
 80030f4:	20000d60 	.word	0x20000d60
 80030f8:	20000868 	.word	0x20000868
 80030fc:	2000005c 	.word	0x2000005c
 8003100:	20000d5c 	.word	0x20000d5c
 8003104:	20000d48 	.word	0x20000d48
 8003108:	20000d40 	.word	0x20000d40

0800310c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <vTaskSuspendAll+0x18>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <vTaskSuspendAll+0x18>)
 8003118:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000d64 	.word	0x20000d64

08003128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <xTaskResumeAll+0x118>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xTaskResumeAll+0x2c>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	603b      	str	r3, [r7, #0]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003154:	f001 f91e 	bl	8004394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003158:	4b39      	ldr	r3, [pc, #228]	; (8003240 <xTaskResumeAll+0x118>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	4a38      	ldr	r2, [pc, #224]	; (8003240 <xTaskResumeAll+0x118>)
 8003160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <xTaskResumeAll+0x118>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d162      	bne.n	8003230 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <xTaskResumeAll+0x11c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d05e      	beq.n	8003230 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003172:	e02f      	b.n	80031d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003174:	4b34      	ldr	r3, [pc, #208]	; (8003248 <xTaskResumeAll+0x120>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3318      	adds	r3, #24
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f885 	bl	8002290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3304      	adds	r3, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f880 	bl	8002290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <xTaskResumeAll+0x124>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d903      	bls.n	80031a4 <xTaskResumeAll+0x7c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <xTaskResumeAll+0x124>)
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <xTaskResumeAll+0x128>)
 80031b2:	441a      	add	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7ff f80b 	bl	80021d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <xTaskResumeAll+0x12c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <xTaskResumeAll+0x130>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <xTaskResumeAll+0x120>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1cb      	bne.n	8003174 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031e2:	f000 fb5f 	bl	80038a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <xTaskResumeAll+0x134>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031f2:	f000 f847 	bl	8003284 <xTaskIncrementTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <xTaskResumeAll+0x130>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f1      	bne.n	80031f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <xTaskResumeAll+0x134>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <xTaskResumeAll+0x130>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <xTaskResumeAll+0x138>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003230:	f001 f8e0 	bl	80043f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003234:	68bb      	ldr	r3, [r7, #8]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000d64 	.word	0x20000d64
 8003244:	20000d3c 	.word	0x20000d3c
 8003248:	20000cfc 	.word	0x20000cfc
 800324c:	20000d44 	.word	0x20000d44
 8003250:	2000086c 	.word	0x2000086c
 8003254:	20000868 	.word	0x20000868
 8003258:	20000d50 	.word	0x20000d50
 800325c:	20000d4c 	.word	0x20000d4c
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <xTaskGetTickCount+0x1c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000d40 	.word	0x20000d40

08003284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328e:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <xTaskIncrementTick+0x148>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 808f 	bne.w	80033b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003298:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <xTaskIncrementTick+0x14c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <xTaskIncrementTick+0x14c>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d120      	bne.n	80032ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032ac:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <xTaskIncrementTick+0x48>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	603b      	str	r3, [r7, #0]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <xTaskIncrementTick+0x46>
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <xTaskIncrementTick+0x154>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3f      	ldr	r2, [pc, #252]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <xTaskIncrementTick+0x154>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <xTaskIncrementTick+0x158>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <xTaskIncrementTick+0x158>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	f000 fadb 	bl	80038a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <xTaskIncrementTick+0x15c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d349      	bcc.n	800338c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <xTaskIncrementTick+0x15c>)
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	601a      	str	r2, [r3, #0]
					break;
 800330a:	e03f      	b.n	800338c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <xTaskIncrementTick+0x150>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d203      	bcs.n	800332c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003324:	4a2e      	ldr	r2, [pc, #184]	; (80033e0 <xTaskIncrementTick+0x15c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800332a:	e02f      	b.n	800338c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3304      	adds	r3, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ffad 	bl	8002290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3318      	adds	r3, #24
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ffa4 	bl	8002290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <xTaskIncrementTick+0x160>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d903      	bls.n	800335c <xTaskIncrementTick+0xd8>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <xTaskIncrementTick+0x160>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <xTaskIncrementTick+0x164>)
 800336a:	441a      	add	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fe ff2f 	bl	80021d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <xTaskIncrementTick+0x168>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	429a      	cmp	r2, r3
 8003384:	d3b8      	bcc.n	80032f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003386:	2301      	movs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338a:	e7b5      	b.n	80032f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <xTaskIncrementTick+0x168>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	4915      	ldr	r1, [pc, #84]	; (80033e8 <xTaskIncrementTick+0x164>)
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d901      	bls.n	80033a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <xTaskIncrementTick+0x16c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e004      	b.n	80033c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <xTaskIncrementTick+0x170>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <xTaskIncrementTick+0x170>)
 80033be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033c0:	697b      	ldr	r3, [r7, #20]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000d64 	.word	0x20000d64
 80033d0:	20000d40 	.word	0x20000d40
 80033d4:	20000cf4 	.word	0x20000cf4
 80033d8:	20000cf8 	.word	0x20000cf8
 80033dc:	20000d54 	.word	0x20000d54
 80033e0:	20000d5c 	.word	0x20000d5c
 80033e4:	20000d44 	.word	0x20000d44
 80033e8:	2000086c 	.word	0x2000086c
 80033ec:	20000868 	.word	0x20000868
 80033f0:	20000d50 	.word	0x20000d50
 80033f4:	20000d4c 	.word	0x20000d4c

080033f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <vTaskSwitchContext+0xb0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <vTaskSwitchContext+0xb4>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800340c:	e046      	b.n	800349c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800340e:	4b27      	ldr	r3, [pc, #156]	; (80034ac <vTaskSwitchContext+0xb4>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <vTaskSwitchContext+0xb8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e010      	b.n	800343e <vTaskSwitchContext+0x46>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskSwitchContext+0x40>
	__asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
}
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskSwitchContext+0x3e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b01      	subs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	491d      	ldr	r1, [pc, #116]	; (80034b4 <vTaskSwitchContext+0xbc>)
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0e4      	beq.n	800341c <vTaskSwitchContext+0x24>
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <vTaskSwitchContext+0xbc>)
 800345e:	4413      	add	r3, r2
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3308      	adds	r3, #8
 8003474:	429a      	cmp	r2, r3
 8003476:	d104      	bne.n	8003482 <vTaskSwitchContext+0x8a>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <vTaskSwitchContext+0xc0>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <vTaskSwitchContext+0xb8>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <vTaskSwitchContext+0xc0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3354      	adds	r3, #84	; 0x54
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <vTaskSwitchContext+0xc4>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	20000d64 	.word	0x20000d64
 80034ac:	20000d50 	.word	0x20000d50
 80034b0:	20000d44 	.word	0x20000d44
 80034b4:	2000086c 	.word	0x2000086c
 80034b8:	20000868 	.word	0x20000868
 80034bc:	2000005c 	.word	0x2000005c

080034c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <vTaskPlaceOnEventList+0x44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3318      	adds	r3, #24
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fe95 	bl	800221e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f4:	2101      	movs	r1, #1
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f000 fa80 	bl	80039fc <prvAddCurrentTaskToDelayedList>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000868 	.word	0x20000868

08003508 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	617b      	str	r3, [r7, #20]
}
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <vTaskPlaceOnEventListRestricted+0x54>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3318      	adds	r3, #24
 8003536:	4619      	mov	r1, r3
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7fe fe4c 	bl	80021d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	68b8      	ldr	r0, [r7, #8]
 800354e:	f000 fa55 	bl	80039fc <prvAddCurrentTaskToDelayedList>
	}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000868 	.word	0x20000868

08003560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60fb      	str	r3, [r7, #12]
}
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3318      	adds	r3, #24
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fe7d 	bl	8002290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003596:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <xTaskRemoveFromEventList+0xb0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11d      	bne.n	80035da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fe74 	bl	8002290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <xTaskRemoveFromEventList+0xb4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d903      	bls.n	80035bc <xTaskRemoveFromEventList+0x5c>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a16      	ldr	r2, [pc, #88]	; (8003614 <xTaskRemoveFromEventList+0xb4>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <xTaskRemoveFromEventList+0xb8>)
 80035ca:	441a      	add	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7fe fdff 	bl	80021d6 <vListInsertEnd>
 80035d8:	e005      	b.n	80035e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3318      	adds	r3, #24
 80035de:	4619      	mov	r1, r3
 80035e0:	480e      	ldr	r0, [pc, #56]	; (800361c <xTaskRemoveFromEventList+0xbc>)
 80035e2:	f7fe fdf8 	bl	80021d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <xTaskRemoveFromEventList+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d905      	bls.n	8003600 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <xTaskRemoveFromEventList+0xc4>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e001      	b.n	8003604 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003604:	697b      	ldr	r3, [r7, #20]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000d64 	.word	0x20000d64
 8003614:	20000d44 	.word	0x20000d44
 8003618:	2000086c 	.word	0x2000086c
 800361c:	20000cfc 	.word	0x20000cfc
 8003620:	20000868 	.word	0x20000868
 8003624:	20000d50 	.word	0x20000d50

08003628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <vTaskInternalSetTimeOutState+0x24>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <vTaskInternalSetTimeOutState+0x28>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	605a      	str	r2, [r3, #4]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000d54 	.word	0x20000d54
 8003650:	20000d40 	.word	0x20000d40

08003654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60fb      	str	r3, [r7, #12]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003696:	f000 fe7d 	bl	8004394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <xTaskCheckForTimeOut+0xbc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d102      	bne.n	80036ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e023      	b.n	8003702 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <xTaskCheckForTimeOut+0xc0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d007      	beq.n	80036d6 <xTaskCheckForTimeOut+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e015      	b.n	8003702 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d20b      	bcs.n	80036f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1ad2      	subs	r2, r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff9b 	bl	8003628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e004      	b.n	8003702 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003702:	f000 fe77 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8003706:	69fb      	ldr	r3, [r7, #28]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000d40 	.word	0x20000d40
 8003714:	20000d54 	.word	0x20000d54

08003718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <vTaskMissedYield+0x14>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	20000d50 	.word	0x20000d50

08003730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003738:	f000 f852 	bl	80037e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvIdleTask+0x28>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d9f9      	bls.n	8003738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <prvIdleTask+0x2c>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003754:	e7f0      	b.n	8003738 <prvIdleTask+0x8>
 8003756:	bf00      	nop
 8003758:	2000086c 	.word	0x2000086c
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e00c      	b.n	8003786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <prvInitialiseTaskLists+0x60>)
 8003778:	4413      	add	r3, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fcfe 	bl	800217c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b37      	cmp	r3, #55	; 0x37
 800378a:	d9ef      	bls.n	800376c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800378c:	480d      	ldr	r0, [pc, #52]	; (80037c4 <prvInitialiseTaskLists+0x64>)
 800378e:	f7fe fcf5 	bl	800217c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003792:	480d      	ldr	r0, [pc, #52]	; (80037c8 <prvInitialiseTaskLists+0x68>)
 8003794:	f7fe fcf2 	bl	800217c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003798:	480c      	ldr	r0, [pc, #48]	; (80037cc <prvInitialiseTaskLists+0x6c>)
 800379a:	f7fe fcef 	bl	800217c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800379e:	480c      	ldr	r0, [pc, #48]	; (80037d0 <prvInitialiseTaskLists+0x70>)
 80037a0:	f7fe fcec 	bl	800217c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037a4:	480b      	ldr	r0, [pc, #44]	; (80037d4 <prvInitialiseTaskLists+0x74>)
 80037a6:	f7fe fce9 	bl	800217c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <prvInitialiseTaskLists+0x78>)
 80037ac:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <prvInitialiseTaskLists+0x64>)
 80037ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prvInitialiseTaskLists+0x7c>)
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <prvInitialiseTaskLists+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000086c 	.word	0x2000086c
 80037c4:	20000ccc 	.word	0x20000ccc
 80037c8:	20000ce0 	.word	0x20000ce0
 80037cc:	20000cfc 	.word	0x20000cfc
 80037d0:	20000d10 	.word	0x20000d10
 80037d4:	20000d28 	.word	0x20000d28
 80037d8:	20000cf4 	.word	0x20000cf4
 80037dc:	20000cf8 	.word	0x20000cf8

080037e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e6:	e019      	b.n	800381c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037e8:	f000 fdd4 	bl	8004394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <prvCheckTasksWaitingTermination+0x50>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fd49 	bl	8002290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <prvCheckTasksWaitingTermination+0x54>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <prvCheckTasksWaitingTermination+0x54>)
 8003806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3b01      	subs	r3, #1
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 8003810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003812:	f000 fdef 	bl	80043f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f810 	bl	800383c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <prvCheckTasksWaitingTermination+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e1      	bne.n	80037e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000d10 	.word	0x20000d10
 8003834:	20000d3c 	.word	0x20000d3c
 8003838:	20000d24 	.word	0x20000d24

0800383c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3354      	adds	r3, #84	; 0x54
 8003848:	4618      	mov	r0, r3
 800384a:	f001 f8b7 	bl	80049bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4618      	mov	r0, r3
 800385e:	f000 ff87 	bl	8004770 <vPortFree>
				vPortFree( pxTCB );
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 ff84 	bl	8004770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003868:	e018      	b.n	800389c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003870:	2b01      	cmp	r3, #1
 8003872:	d103      	bne.n	800387c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 ff7b 	bl	8004770 <vPortFree>
	}
 800387a:	e00f      	b.n	800389c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003882:	2b02      	cmp	r3, #2
 8003884:	d00a      	beq.n	800389c <prvDeleteTCB+0x60>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60fb      	str	r3, [r7, #12]
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <prvDeleteTCB+0x5e>
	}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <prvResetNextTaskUnblockTime+0x38>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <prvResetNextTaskUnblockTime+0x3c>)
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038bc:	e008      	b.n	80038d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <prvResetNextTaskUnblockTime+0x38>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <prvResetNextTaskUnblockTime+0x3c>)
 80038ce:	6013      	str	r3, [r2, #0]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000cf4 	.word	0x20000cf4
 80038e0:	20000d5c 	.word	0x20000d5c

080038e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <xTaskGetSchedulerState+0x34>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038f2:	2301      	movs	r3, #1
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	e008      	b.n	800390a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <xTaskGetSchedulerState+0x38>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003900:	2302      	movs	r3, #2
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	e001      	b.n	800390a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800390a:	687b      	ldr	r3, [r7, #4]
	}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	20000d48 	.word	0x20000d48
 800391c:	20000d64 	.word	0x20000d64

08003920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d056      	beq.n	80039e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <xTaskPriorityDisinherit+0xd0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d00a      	beq.n	8003956 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	60fb      	str	r3, [r7, #12]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60bb      	str	r3, [r7, #8]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	429a      	cmp	r2, r3
 8003988:	d02c      	beq.n	80039e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d128      	bne.n	80039e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fc7a 	bl	8002290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <xTaskPriorityDisinherit+0xd4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskPriorityDisinherit+0xa4>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <xTaskPriorityDisinherit+0xd4>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <xTaskPriorityDisinherit+0xd8>)
 80039d2:	441a      	add	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe fbfb 	bl	80021d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039e4:	697b      	ldr	r3, [r7, #20]
	}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000868 	.word	0x20000868
 80039f4:	20000d44 	.word	0x20000d44
 80039f8:	2000086c 	.word	0x2000086c

080039fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a06:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fc3c 	bl	8002290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d10a      	bne.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4819      	ldr	r0, [pc, #100]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a30:	f7fe fbd1 	bl	80021d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a34:	e026      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d209      	bcs.n	8003a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fe fbdf 	bl	800221e <vListInsert>
}
 8003a60:	e010      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fe fbd5 	bl	800221e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d202      	bcs.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000d40 	.word	0x20000d40
 8003a90:	20000868 	.word	0x20000868
 8003a94:	20000d28 	.word	0x20000d28
 8003a98:	20000cf8 	.word	0x20000cf8
 8003a9c:	20000cf4 	.word	0x20000cf4
 8003aa0:	20000d5c 	.word	0x20000d5c

08003aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003aae:	f000 fb07 	bl	80040c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <xTimerCreateTimerTask+0x80>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d021      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	f107 0108 	add.w	r1, r7, #8
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fb3b 	bl	8002148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	9202      	str	r2, [sp, #8]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2302      	movs	r3, #2
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <xTimerCreateTimerTask+0x84>)
 8003ae6:	4811      	ldr	r0, [pc, #68]	; (8003b2c <xTimerCreateTimerTask+0x88>)
 8003ae8:	f7ff f8e8 	bl	8002cbc <xTaskCreateStatic>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <xTimerCreateTimerTask+0x8c>)
 8003af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <xTimerCreateTimerTask+0x8c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b1a:	697b      	ldr	r3, [r7, #20]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000d98 	.word	0x20000d98
 8003b28:	08004bb0 	.word	0x08004bb0
 8003b2c:	08003c69 	.word	0x08003c69
 8003b30:	20000d9c 	.word	0x20000d9c

08003b34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	623b      	str	r3, [r7, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02a      	beq.n	8003bc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	dc18      	bgt.n	8003bae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b7c:	f7ff feb2 	bl	80038e4 <xTaskGetSchedulerState>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d109      	bne.n	8003b9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f107 0110 	add.w	r1, r7, #16
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	f7fe fcab 	bl	80024ec <xQueueGenericSend>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
 8003b98:	e012      	b.n	8003bc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f107 0110 	add.w	r1, r7, #16
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f7fe fca1 	bl	80024ec <xQueueGenericSend>
 8003baa:	6278      	str	r0, [r7, #36]	; 0x24
 8003bac:	e008      	b.n	8003bc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f107 0110 	add.w	r1, r7, #16
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	f7fe fd95 	bl	80026e8 <xQueueGenericSendFromISR>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000d98 	.word	0x20000d98

08003bd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <prvProcessExpiredTimer+0x94>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fb51 	bl	8002290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	18d1      	adds	r1, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f000 f8d1 	bl	8003db0 <prvInsertTimerInActiveList>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01f      	beq.n	8003c54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f7ff ff88 	bl	8003b34 <xTimerGenericCommand>
 8003c24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60fb      	str	r3, [r7, #12]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	4798      	blx	r3
}
 8003c5c:	bf00      	nop
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000d90 	.word	0x20000d90

08003c68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f857 	bl	8003d28 <prvGetNextExpireTime>
 8003c7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f803 	bl	8003c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c86:	f000 f8d5 	bl	8003e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c8a:	e7f1      	b.n	8003c70 <prvTimerTask+0x8>

08003c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c96:	f7ff fa39 	bl	800310c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f866 	bl	8003d70 <prvSampleTimeNow>
 8003ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d130      	bne.n	8003d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <prvProcessTimerOrBlockTask+0x3c>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d806      	bhi.n	8003cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cba:	f7ff fa35 	bl	8003128 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff85 	bl	8003bd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cc6:	e024      	b.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <prvProcessTimerOrBlockTask+0x90>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <prvProcessTimerOrBlockTask+0x50>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <prvProcessTimerOrBlockTask+0x52>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <prvProcessTimerOrBlockTask+0x94>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fe ffb1 	bl	8002c54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f7ff fa19 	bl	8003128 <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <prvProcessTimerOrBlockTask+0x98>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
}
 8003d0c:	e001      	b.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d0e:	f7ff fa0b 	bl	8003128 <xTaskResumeAll>
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000d94 	.word	0x20000d94
 8003d20:	20000d98 	.word	0x20000d98
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <prvGetNextExpireTime+0x44>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <prvGetNextExpireTime+0x16>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	e000      	b.n	8003d40 <prvGetNextExpireTime+0x18>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <prvGetNextExpireTime+0x44>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e001      	b.n	8003d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000d90 	.word	0x20000d90

08003d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d78:	f7ff fa74 	bl	8003264 <xTaskGetTickCount>
 8003d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvSampleTimeNow+0x3c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d205      	bcs.n	8003d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d88:	f000 f936 	bl	8003ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <prvSampleTimeNow+0x3c>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000da0 	.word	0x20000da0

08003db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d812      	bhi.n	8003dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e01b      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <prvInsertTimerInActiveList+0x7c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fe fa12 	bl	800221e <vListInsert>
 8003dfa:	e012      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d206      	bcs.n	8003e12 <prvInsertTimerInActiveList+0x62>
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e007      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <prvInsertTimerInActiveList+0x80>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fe f9fe 	bl	800221e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e22:	697b      	ldr	r3, [r7, #20]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000d94 	.word	0x20000d94
 8003e30:	20000d90 	.word	0x20000d90

08003e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08e      	sub	sp, #56	; 0x38
 8003e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e3a:	e0ca      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da18      	bge.n	8003e74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	3304      	adds	r3, #4
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6a:	6850      	ldr	r0, [r2, #4]
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f2c0 80ab 	blt.w	8003fd2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f9ff 	bl	8002290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e92:	463b      	mov	r3, r7
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff6b 	bl	8003d70 <prvSampleTimeNow>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	f200 8096 	bhi.w	8003fd0 <prvProcessReceivedCommands+0x19c>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <prvProcessReceivedCommands+0x78>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ed5 	.word	0x08003ed5
 8003eb8:	08003f49 	.word	0x08003f49
 8003ebc:	08003f5d 	.word	0x08003f5d
 8003ec0:	08003fa7 	.word	0x08003fa7
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ed5 	.word	0x08003ed5
 8003ecc:	08003f49 	.word	0x08003f49
 8003ed0:	08003f5d 	.word	0x08003f5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	18d1      	adds	r1, r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f7ff ff5c 	bl	8003db0 <prvInsertTimerInActiveList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d069      	beq.n	8003fd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05e      	beq.n	8003fd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	441a      	add	r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2300      	movs	r3, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f26:	f7ff fe05 	bl	8003b34 <xTimerGenericCommand>
 8003f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d14f      	bne.n	8003fd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61bb      	str	r3, [r7, #24]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f5a:	e03a      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	617b      	str	r3, [r7, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	18d1      	adds	r1, r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa0:	f7ff ff06 	bl	8003db0 <prvInsertTimerInActiveList>
					break;
 8003fa4:	e015      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f000 fbdb 	bl	8004770 <vPortFree>
 8003fba:	e00a      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fce:	e000      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003fd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <prvProcessReceivedCommands+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1d39      	adds	r1, r7, #4
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fc20 	bl	8002820 <xQueueReceive>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f47f af2a 	bne.w	8003e3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3730      	adds	r7, #48	; 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000d98 	.word	0x20000d98

08003ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffe:	e048      	b.n	8004092 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004000:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400a:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f939 	bl	8002290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02e      	beq.n	8004092 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90e      	bls.n	8004064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe f8de 	bl	800221e <vListInsert>
 8004062:	e016      	b.n	8004092 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	2100      	movs	r1, #0
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fd60 	bl	8003b34 <xTimerGenericCommand>
 8004074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	603b      	str	r3, [r7, #0]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1b1      	bne.n	8004000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <prvSwitchTimerLists+0xc4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 80040a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <prvSwitchTimerLists+0xc4>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000d90 	.word	0x20000d90
 80040bc:	20000d94 	.word	0x20000d94

080040c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040c6:	f000 f965 	bl	8004394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d120      	bne.n	8004114 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040d2:	4814      	ldr	r0, [pc, #80]	; (8004124 <prvCheckForValidListAndQueue+0x64>)
 80040d4:	f7fe f852 	bl	800217c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040d8:	4813      	ldr	r0, [pc, #76]	; (8004128 <prvCheckForValidListAndQueue+0x68>)
 80040da:	f7fe f84f 	bl	800217c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <prvCheckForValidListAndQueue+0x6c>)
 80040e0:	4a10      	ldr	r2, [pc, #64]	; (8004124 <prvCheckForValidListAndQueue+0x64>)
 80040e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <prvCheckForValidListAndQueue+0x70>)
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <prvCheckForValidListAndQueue+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040ea:	2300      	movs	r3, #0
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <prvCheckForValidListAndQueue+0x74>)
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <prvCheckForValidListAndQueue+0x78>)
 80040f2:	2110      	movs	r1, #16
 80040f4:	200a      	movs	r0, #10
 80040f6:	f7fe f95d 	bl	80023b4 <xQueueGenericCreateStatic>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 80040fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	490b      	ldr	r1, [pc, #44]	; (800413c <prvCheckForValidListAndQueue+0x7c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fd76 	bl	8002c00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004114:	f000 f96e 	bl	80043f4 <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000d98 	.word	0x20000d98
 8004124:	20000d68 	.word	0x20000d68
 8004128:	20000d7c 	.word	0x20000d7c
 800412c:	20000d90 	.word	0x20000d90
 8004130:	20000d94 	.word	0x20000d94
 8004134:	20000e44 	.word	0x20000e44
 8004138:	20000da4 	.word	0x20000da4
 800413c:	08004bb8 	.word	0x08004bb8

08004140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b04      	subs	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b04      	subs	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b04      	subs	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <pxPortInitialiseStack+0x64>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b14      	subs	r3, #20
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f06f 0202 	mvn.w	r2, #2
 800418e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b20      	subs	r3, #32
 8004194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	080041a9 	.word	0x080041a9

080041a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvTaskExitError+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d00a      	beq.n	80041d2 <prvTaskExitError+0x2a>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <prvTaskExitError+0x28>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60bb      	str	r3, [r7, #8]
}
 80041e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041e6:	bf00      	nop
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0fc      	beq.n	80041e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	2000000c 	.word	0x2000000c

08004200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004228:	4808      	ldr	r0, [pc, #32]	; (800424c <prvPortStartFirstTask+0x24>)
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f380 8808 	msr	MSP, r0
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8814 	msr	CONTROL, r0
 800423a:	b662      	cpsie	i
 800423c:	b661      	cpsie	f
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	df00      	svc	0
 8004248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800424a:	bf00      	nop
 800424c:	e000ed08 	.word	0xe000ed08

08004250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <xPortStartScheduler+0x120>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a46      	ldr	r2, [pc, #280]	; (8004374 <xPortStartScheduler+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10a      	bne.n	8004276 <xPortStartScheduler+0x26>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	613b      	str	r3, [r7, #16]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004276:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <xPortStartScheduler+0x120>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3f      	ldr	r2, [pc, #252]	; (8004378 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10a      	bne.n	8004296 <xPortStartScheduler+0x46>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <xPortStartScheduler+0x12c>)
 8004298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xPortStartScheduler+0x130>)
 80042bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <xPortStartScheduler+0x134>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c4:	e009      	b.n	80042da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <xPortStartScheduler+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <xPortStartScheduler+0x134>)
 80042ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d0ef      	beq.n	80042c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <xPortStartScheduler+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00a      	beq.n	8004308 <xPortStartScheduler+0xb8>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <xPortStartScheduler+0x134>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <xPortStartScheduler+0x134>)
 8004310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <xPortStartScheduler+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <xPortStartScheduler+0x134>)
 800431c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <xPortStartScheduler+0x138>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <xPortStartScheduler+0x138>)
 800432c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <xPortStartScheduler+0x138>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <xPortStartScheduler+0x138>)
 8004338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800433c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800433e:	f000 f8dd 	bl	80044fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <xPortStartScheduler+0x13c>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004348:	f000 f8fc 	bl	8004544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <xPortStartScheduler+0x140>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <xPortStartScheduler+0x140>)
 8004352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004358:	f7ff ff66 	bl	8004228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800435c:	f7ff f84c 	bl	80033f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004360:	f7ff ff22 	bl	80041a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed00 	.word	0xe000ed00
 8004374:	410fc271 	.word	0x410fc271
 8004378:	410fc270 	.word	0x410fc270
 800437c:	e000e400 	.word	0xe000e400
 8004380:	20000e94 	.word	0x20000e94
 8004384:	20000e98 	.word	0x20000e98
 8004388:	e000ed20 	.word	0xe000ed20
 800438c:	2000000c 	.word	0x2000000c
 8004390:	e000ef34 	.word	0xe000ef34

08004394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
}
 80043ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <vPortEnterCritical+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <vPortEnterCritical+0x58>)
 80043b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <vPortEnterCritical+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10f      	bne.n	80043e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortEnterCritical+0x5c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vPortEnterCritical+0x4a>
	}
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	2000000c 	.word	0x2000000c
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <vPortExitCritical+0x50>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <vPortExitCritical+0x24>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <vPortExitCritical+0x50>)
 8004420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <vPortExitCritical+0x42>
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f383 8811 	msr	BASEPRI, r3
}
 8004434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c
	...

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f01e 0f10 	tst.w	lr, #16
 8004460:	bf08      	it	eq
 8004462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004474:	f380 8811 	msr	BASEPRI, r0
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f7fe ffba 	bl	80033f8 <vTaskSwitchContext>
 8004484:	f04f 0000 	mov.w	r0, #0
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	bc09      	pop	{r0, r3}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004496:	f01e 0f10 	tst.w	lr, #16
 800449a:	bf08      	it	eq
 800449c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044a0:	f380 8809 	msr	PSP, r0
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst>:
 80044b0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044d2:	f7fe fed7 	bl	8003284 <xTaskIncrementTick>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <xPortSysTickHandler+0x40>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f383 8811 	msr	BASEPRI, r3
}
 80044ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004552:	bf00      	nop
 8004554:	e000ed88 	.word	0xe000ed88

08004558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800455e:	f3ef 8305 	mrs	r3, IPSR
 8004562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d914      	bls.n	8004594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <vPortValidateInterruptPriority+0x70>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <vPortValidateInterruptPriority+0x74>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	7afa      	ldrb	r2, [r7, #11]
 800457a:	429a      	cmp	r2, r3
 800457c:	d20a      	bcs.n	8004594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <vPortValidateInterruptPriority+0x78>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <vPortValidateInterruptPriority+0x7c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d90a      	bls.n	80045ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	603b      	str	r3, [r7, #0]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <vPortValidateInterruptPriority+0x60>
	}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000e3f0 	.word	0xe000e3f0
 80045cc:	20000e94 	.word	0x20000e94
 80045d0:	e000ed0c 	.word	0xe000ed0c
 80045d4:	20000e98 	.word	0x20000e98

080045d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045e4:	f7fe fd92 	bl	800310c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <pvPortMalloc+0x180>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045f0:	f000 f920 	bl	8004834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <pvPortMalloc+0x184>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8093 	bne.w	8004728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01d      	beq.n	8004644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004608:	2208      	movs	r2, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <pvPortMalloc+0x6c>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	617b      	str	r3, [r7, #20]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06e      	beq.n	8004728 <pvPortMalloc+0x150>
 800464a:	4b45      	ldr	r3, [pc, #276]	; (8004760 <pvPortMalloc+0x188>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d869      	bhi.n	8004728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004654:	4b43      	ldr	r3, [pc, #268]	; (8004764 <pvPortMalloc+0x18c>)
 8004656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <pvPortMalloc+0x18c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800465e:	e004      	b.n	800466a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <pvPortMalloc+0xa4>
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f1      	bne.n	8004660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800467c:	4b36      	ldr	r3, [pc, #216]	; (8004758 <pvPortMalloc+0x180>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	429a      	cmp	r2, r3
 8004684:	d050      	beq.n	8004728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2208      	movs	r2, #8
 800468c:	4413      	add	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	2308      	movs	r3, #8
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d91f      	bls.n	80046e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <pvPortMalloc+0xf8>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	613b      	str	r3, [r7, #16]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046e2:	69b8      	ldr	r0, [r7, #24]
 80046e4:	f000 f908 	bl	80048f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <pvPortMalloc+0x188>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <pvPortMalloc+0x188>)
 80046f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <pvPortMalloc+0x188>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <pvPortMalloc+0x190>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <pvPortMalloc+0x188>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <pvPortMalloc+0x190>)
 8004708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <pvPortMalloc+0x184>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	431a      	orrs	r2, r3
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <pvPortMalloc+0x194>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a11      	ldr	r2, [pc, #68]	; (800476c <pvPortMalloc+0x194>)
 8004726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004728:	f7fe fcfe 	bl	8003128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <pvPortMalloc+0x174>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60fb      	str	r3, [r7, #12]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <pvPortMalloc+0x172>
	return pvReturn;
 800474c:	69fb      	ldr	r3, [r7, #28]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20001a5c 	.word	0x20001a5c
 800475c:	20001a70 	.word	0x20001a70
 8004760:	20001a60 	.word	0x20001a60
 8004764:	20001a54 	.word	0x20001a54
 8004768:	20001a64 	.word	0x20001a64
 800476c:	20001a68 	.word	0x20001a68

08004770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d04d      	beq.n	800481e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004782:	2308      	movs	r3, #8
 8004784:	425b      	negs	r3, r3
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <vPortFree+0xb8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <vPortFree+0x44>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <vPortFree+0x62>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	60bb      	str	r3, [r7, #8]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <vPortFree+0xb8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01e      	beq.n	800481e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11a      	bne.n	800481e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <vPortFree+0xb8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047f8:	f7fe fc88 	bl	800310c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <vPortFree+0xbc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4413      	add	r3, r2
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <vPortFree+0xbc>)
 8004808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800480a:	6938      	ldr	r0, [r7, #16]
 800480c:	f000 f874 	bl	80048f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <vPortFree+0xc0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	4a06      	ldr	r2, [pc, #24]	; (8004830 <vPortFree+0xc0>)
 8004818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800481a:	f7fe fc85 	bl	8003128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20001a70 	.word	0x20001a70
 800482c:	20001a60 	.word	0x20001a60
 8004830:	20001a6c 	.word	0x20001a6c

08004834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800483a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800483e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <prvHeapInit+0xac>)
 8004842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3307      	adds	r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <prvHeapInit+0xac>)
 8004864:	4413      	add	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <prvHeapInit+0xb0>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <prvHeapInit+0xb0>)
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004880:	2208      	movs	r2, #8
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <prvHeapInit+0xb4>)
 8004894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <prvHeapInit+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvHeapInit+0xb4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <prvHeapInit+0xb4>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <prvHeapInit+0xb8>)
 80048c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <prvHeapInit+0xbc>)
 80048ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <prvHeapInit+0xc0>)
 80048ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20000e9c 	.word	0x20000e9c
 80048e4:	20001a54 	.word	0x20001a54
 80048e8:	20001a5c 	.word	0x20001a5c
 80048ec:	20001a64 	.word	0x20001a64
 80048f0:	20001a60 	.word	0x20001a60
 80048f4:	20001a70 	.word	0x20001a70

080048f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004900:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <prvInsertBlockIntoFreeList+0xac>)
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e002      	b.n	800490c <prvInsertBlockIntoFreeList+0x14>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d8f7      	bhi.n	8004906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4413      	add	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d108      	bne.n	800493a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d118      	bne.n	8004980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d00d      	beq.n	8004976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e008      	b.n	8004988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e003      	b.n	8004988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d002      	beq.n	8004996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20001a54 	.word	0x20001a54
 80049a8:	20001a5c 	.word	0x20001a5c

080049ac <memset>:
 80049ac:	4402      	add	r2, r0
 80049ae:	4603      	mov	r3, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <_reclaim_reent>:
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <_reclaim_reent+0xa8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4283      	cmp	r3, r0
 80049c2:	b570      	push	{r4, r5, r6, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	d04b      	beq.n	8004a60 <_reclaim_reent+0xa4>
 80049c8:	69c3      	ldr	r3, [r0, #28]
 80049ca:	b143      	cbz	r3, 80049de <_reclaim_reent+0x22>
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d144      	bne.n	8004a5c <_reclaim_reent+0xa0>
 80049d2:	69e3      	ldr	r3, [r4, #28]
 80049d4:	6819      	ldr	r1, [r3, #0]
 80049d6:	b111      	cbz	r1, 80049de <_reclaim_reent+0x22>
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 f879 	bl	8004ad0 <_free_r>
 80049de:	6961      	ldr	r1, [r4, #20]
 80049e0:	b111      	cbz	r1, 80049e8 <_reclaim_reent+0x2c>
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f874 	bl	8004ad0 <_free_r>
 80049e8:	69e1      	ldr	r1, [r4, #28]
 80049ea:	b111      	cbz	r1, 80049f2 <_reclaim_reent+0x36>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 f86f 	bl	8004ad0 <_free_r>
 80049f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049f4:	b111      	cbz	r1, 80049fc <_reclaim_reent+0x40>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f86a 	bl	8004ad0 <_free_r>
 80049fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049fe:	b111      	cbz	r1, 8004a06 <_reclaim_reent+0x4a>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f865 	bl	8004ad0 <_free_r>
 8004a06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a08:	b111      	cbz	r1, 8004a10 <_reclaim_reent+0x54>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f860 	bl	8004ad0 <_free_r>
 8004a10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a12:	b111      	cbz	r1, 8004a1a <_reclaim_reent+0x5e>
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 f85b 	bl	8004ad0 <_free_r>
 8004a1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a1c:	b111      	cbz	r1, 8004a24 <_reclaim_reent+0x68>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f856 	bl	8004ad0 <_free_r>
 8004a24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a26:	b111      	cbz	r1, 8004a2e <_reclaim_reent+0x72>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 f851 	bl	8004ad0 <_free_r>
 8004a2e:	6a23      	ldr	r3, [r4, #32]
 8004a30:	b1b3      	cbz	r3, 8004a60 <_reclaim_reent+0xa4>
 8004a32:	4620      	mov	r0, r4
 8004a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a38:	4718      	bx	r3
 8004a3a:	5949      	ldr	r1, [r1, r5]
 8004a3c:	b941      	cbnz	r1, 8004a50 <_reclaim_reent+0x94>
 8004a3e:	3504      	adds	r5, #4
 8004a40:	69e3      	ldr	r3, [r4, #28]
 8004a42:	2d80      	cmp	r5, #128	; 0x80
 8004a44:	68d9      	ldr	r1, [r3, #12]
 8004a46:	d1f8      	bne.n	8004a3a <_reclaim_reent+0x7e>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 f841 	bl	8004ad0 <_free_r>
 8004a4e:	e7c0      	b.n	80049d2 <_reclaim_reent+0x16>
 8004a50:	680e      	ldr	r6, [r1, #0]
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f83c 	bl	8004ad0 <_free_r>
 8004a58:	4631      	mov	r1, r6
 8004a5a:	e7ef      	b.n	8004a3c <_reclaim_reent+0x80>
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	e7ef      	b.n	8004a40 <_reclaim_reent+0x84>
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	bf00      	nop
 8004a64:	2000005c 	.word	0x2000005c

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4d0d      	ldr	r5, [pc, #52]	; (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	; (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1b64      	subs	r4, r4, r5
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2600      	movs	r6, #0
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4d0b      	ldr	r5, [pc, #44]	; (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	; (8004aac <__libc_init_array+0x44>)
 8004a7c:	f000 f880 	bl	8004b80 <_init>
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2600      	movs	r6, #0
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08004c50 	.word	0x08004c50
 8004aa4:	08004c50 	.word	0x08004c50
 8004aa8:	08004c50 	.word	0x08004c50
 8004aac:	08004c54 	.word	0x08004c54

08004ab0 <__retarget_lock_acquire_recursive>:
 8004ab0:	4770      	bx	lr

08004ab2 <__retarget_lock_release_recursive>:
 8004ab2:	4770      	bx	lr

08004ab4 <memcpy>:
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004abc:	d100      	bne.n	8004ac0 <memcpy+0xc>
 8004abe:	4770      	bx	lr
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aca:	4291      	cmp	r1, r2
 8004acc:	d1f9      	bne.n	8004ac2 <memcpy+0xe>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <_free_r>:
 8004ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	d044      	beq.n	8004b60 <_free_r+0x90>
 8004ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ada:	9001      	str	r0, [sp, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f1a1 0404 	sub.w	r4, r1, #4
 8004ae2:	bfb8      	it	lt
 8004ae4:	18e4      	addlt	r4, r4, r3
 8004ae6:	f000 f83f 	bl	8004b68 <__malloc_lock>
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <_free_r+0x94>)
 8004aec:	9801      	ldr	r0, [sp, #4]
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	b933      	cbnz	r3, 8004b00 <_free_r+0x30>
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	6014      	str	r4, [r2, #0]
 8004af6:	b003      	add	sp, #12
 8004af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004afc:	f000 b83a 	b.w	8004b74 <__malloc_unlock>
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d908      	bls.n	8004b16 <_free_r+0x46>
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	1961      	adds	r1, r4, r5
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	bf01      	itttt	eq
 8004b0c:	6819      	ldreq	r1, [r3, #0]
 8004b0e:	685b      	ldreq	r3, [r3, #4]
 8004b10:	1949      	addeq	r1, r1, r5
 8004b12:	6021      	streq	r1, [r4, #0]
 8004b14:	e7ed      	b.n	8004af2 <_free_r+0x22>
 8004b16:	461a      	mov	r2, r3
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b10b      	cbz	r3, 8004b20 <_free_r+0x50>
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d9fa      	bls.n	8004b16 <_free_r+0x46>
 8004b20:	6811      	ldr	r1, [r2, #0]
 8004b22:	1855      	adds	r5, r2, r1
 8004b24:	42a5      	cmp	r5, r4
 8004b26:	d10b      	bne.n	8004b40 <_free_r+0x70>
 8004b28:	6824      	ldr	r4, [r4, #0]
 8004b2a:	4421      	add	r1, r4
 8004b2c:	1854      	adds	r4, r2, r1
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	d1e0      	bne.n	8004af6 <_free_r+0x26>
 8004b34:	681c      	ldr	r4, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	6053      	str	r3, [r2, #4]
 8004b3a:	440c      	add	r4, r1
 8004b3c:	6014      	str	r4, [r2, #0]
 8004b3e:	e7da      	b.n	8004af6 <_free_r+0x26>
 8004b40:	d902      	bls.n	8004b48 <_free_r+0x78>
 8004b42:	230c      	movs	r3, #12
 8004b44:	6003      	str	r3, [r0, #0]
 8004b46:	e7d6      	b.n	8004af6 <_free_r+0x26>
 8004b48:	6825      	ldr	r5, [r4, #0]
 8004b4a:	1961      	adds	r1, r4, r5
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	bf04      	itt	eq
 8004b50:	6819      	ldreq	r1, [r3, #0]
 8004b52:	685b      	ldreq	r3, [r3, #4]
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	bf04      	itt	eq
 8004b58:	1949      	addeq	r1, r1, r5
 8004b5a:	6021      	streq	r1, [r4, #0]
 8004b5c:	6054      	str	r4, [r2, #4]
 8004b5e:	e7ca      	b.n	8004af6 <_free_r+0x26>
 8004b60:	b003      	add	sp, #12
 8004b62:	bd30      	pop	{r4, r5, pc}
 8004b64:	20001bb0 	.word	0x20001bb0

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff bfa1 	b.w	8004ab0 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20001bac 	.word	0x20001bac

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff bf9c 	b.w	8004ab2 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	20001bac 	.word	0x20001bac

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
