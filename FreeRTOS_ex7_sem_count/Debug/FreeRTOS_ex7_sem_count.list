
FreeRTOS_ex7_sem_count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800587c  0800587c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800587c  0800587c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800587c  0800587c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f48  20000060  080058e4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  080058e4  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015857  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f8c  00000000  00000000  0003592a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eee  00000000  00000000  00039c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dfd  00000000  00000000  0003ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146c2  00000000  00000000  0003d90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6e14  00000000  00000000  00051fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e4  00000000  00000000  00148de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005740 	.word	0x08005740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005740 	.word	0x08005740

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa73 	bl	800070e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f84a 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f88e 	bl	800034c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fee6 	bl	8002000 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000234:	4a15      	ldr	r2, [pc, #84]	; (800028c <main+0x6c>)
 8000236:	2100      	movs	r1, #0
 8000238:	2001      	movs	r0, #1
 800023a:	f001 ffd8 	bl	80021ee <osSemaphoreNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0x70>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8000244:	4a13      	ldr	r2, [pc, #76]	; (8000294 <main+0x74>)
 8000246:	2102      	movs	r1, #2
 8000248:	2002      	movs	r0, #2
 800024a:	f001 ffd0 	bl	80021ee <osSemaphoreNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <main+0x78>)
 8000252:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <main+0x7c>)
 8000256:	2100      	movs	r1, #0
 8000258:	4811      	ldr	r0, [pc, #68]	; (80002a0 <main+0x80>)
 800025a:	f001 ff1b 	bl	8002094 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <main+0x84>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <main+0x88>)
 8000266:	2100      	movs	r1, #0
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <main+0x8c>)
 800026a:	f001 ff13 	bl	8002094 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <main+0x90>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000274:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <main+0x94>)
 8000276:	2100      	movs	r1, #0
 8000278:	480f      	ldr	r0, [pc, #60]	; (80002b8 <main+0x98>)
 800027a:	f001 ff0b 	bl	8002094 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <main+0x9c>)
 8000282:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000284:	f001 fee0 	bl	8002048 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	e7fe      	b.n	8000288 <main+0x68>
 800028a:	bf00      	nop
 800028c:	08005814 	.word	0x08005814
 8000290:	20000088 	.word	0x20000088
 8000294:	08005824 	.word	0x08005824
 8000298:	2000008c 	.word	0x2000008c
 800029c:	080057a8 	.word	0x080057a8
 80002a0:	08000431 	.word	0x08000431
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	080057cc 	.word	0x080057cc
 80002ac:	08000459 	.word	0x08000459
 80002b0:	20000080 	.word	0x20000080
 80002b4:	080057f0 	.word	0x080057f0
 80002b8:	08000481 	.word	0x08000481
 80002bc:	20000084 	.word	0x20000084

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2244      	movs	r2, #68	; 0x44
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f005 f94c 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f000 fd21 	bl	8000d2c <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f8f0 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f4:	2310      	movs	r3, #16
 80002f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000300:	2360      	movs	r3, #96	; 0x60
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fd63 	bl	8000dd8 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000318:	f000 f8dc 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f92b 	bl	8001590 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000340:	f000 f8c8 	bl	80004d4 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3758      	adds	r7, #88	; 0x58
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000362:	4b29      	ldr	r3, [pc, #164]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a28      	ldr	r2, [pc, #160]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b26      	ldr	r3, [pc, #152]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0304 	and.w	r3, r3, #4
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_GPIO_Init+0xbc>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a22      	ldr	r2, [pc, #136]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b20      	ldr	r3, [pc, #128]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_GPIO_Init+0xbc>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_GPIO_Init+0xbc>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2120      	movs	r1, #32
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fc71 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	4619      	mov	r1, r3
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <MX_GPIO_Init+0xc0>)
 80003ce:	f000 fab9 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003d2:	2320      	movs	r3, #32
 80003d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4619      	mov	r1, r3
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f000 faaa 	bl	8000944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2105      	movs	r1, #5
 80003f4:	2028      	movs	r0, #40	; 0x28
 80003f6:	f000 fa7b 	bl	80008f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fa:	2028      	movs	r0, #40	; 0x28
 80003fc:	f000 fa94 	bl	8000928 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800

08000410 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fed7 	bl	80001d0 <ITM_SendChar>
	ITM_SendChar('\n');
 8000422:	200a      	movs	r0, #10
 8000424:	f7ff fed4 	bl	80001d0 <ITM_SendChar>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	for(;;)
	{
	  osSemaphoreRelease(myCountingSem01Handle);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <StartTask1+0x24>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f001 ffb1 	bl	80023a4 <osSemaphoreRelease>
	  task_action('1');
 8000442:	2031      	movs	r0, #49	; 0x31
 8000444:	f7ff ffe4 	bl	8000410 <task_action>
	  osDelay(2000);
 8000448:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800044c:	f001 feb4 	bl	80021b8 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 8000450:	e7f2      	b.n	8000438 <StartTask1+0x8>
 8000452:	bf00      	nop
 8000454:	2000008c 	.word	0x2000008c

08000458 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <StartTask2+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f001 ff9d 	bl	80023a4 <osSemaphoreRelease>
	  task_action('2');
 800046a:	2032      	movs	r0, #50	; 0x32
 800046c:	f7ff ffd0 	bl	8000410 <task_action>
	  osDelay(2000);
 8000470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000474:	f001 fea0 	bl	80021b8 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 8000478:	e7f2      	b.n	8000460 <StartTask2+0x8>
 800047a:	bf00      	nop
 800047c:	2000008c 	.word	0x2000008c

08000480 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <StartTask3+0x2c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000490:	4618      	mov	r0, r3
 8000492:	f001 ff35 	bl	8002300 <osSemaphoreAcquire>
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <StartTask3+0x2c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 ff2e 	bl	8002300 <osSemaphoreAcquire>
	task_action('3');
 80004a4:	2033      	movs	r0, #51	; 0x33
 80004a6:	f7ff ffb3 	bl	8000410 <task_action>
    osSemaphoreAcquire(myCountingSem01Handle, 4000);
 80004aa:	e7ed      	b.n	8000488 <StartTask3+0x8>
 80004ac:	2000008c 	.word	0x2000008c

080004b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d101      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004c2:	f000 f93d 	bl	8000740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40001000 	.word	0x40001000

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_MspInit+0x70>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_MspInit+0x70>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6613      	str	r3, [r2, #96]	; 0x60
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_MspInit+0x70>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_MspInit+0x70>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_MspInit+0x70>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	6593      	str	r3, [r2, #88]	; 0x58
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_MspInit+0x70>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2105      	movs	r1, #5
 800051a:	f06f 000b 	mvn.w	r0, #11
 800051e:	f000 f9e7 	bl	80008f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	f06f 0004 	mvn.w	r0, #4
 800052a:	f000 f9e1 	bl	80008f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2105      	movs	r1, #5
 8000532:	f06f 0003 	mvn.w	r0, #3
 8000536:	f000 f9db 	bl	80008f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	210f      	movs	r1, #15
 800053e:	f06f 0001 	mvn.w	r0, #1
 8000542:	f000 f9d5 	bl	80008f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08e      	sub	sp, #56	; 0x38
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000562:	4b34      	ldr	r3, [pc, #208]	; (8000634 <HAL_InitTick+0xe0>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	4a33      	ldr	r2, [pc, #204]	; (8000634 <HAL_InitTick+0xe0>)
 8000568:	f043 0310 	orr.w	r3, r3, #16
 800056c:	6593      	str	r3, [r2, #88]	; 0x58
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <HAL_InitTick+0xe0>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	f003 0310 	and.w	r3, r3, #16
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800057a:	f107 0210 	add.w	r2, r7, #16
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f9b1 	bl	80018ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000594:	f001 f994 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8000598:	6378      	str	r0, [r7, #52]	; 0x34
 800059a:	e004      	b.n	80005a6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800059c:	f001 f990 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 80005a0:	4603      	mov	r3, r0
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a8:	4a23      	ldr	r2, [pc, #140]	; (8000638 <HAL_InitTick+0xe4>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	0c9b      	lsrs	r3, r3, #18
 80005b0:	3b01      	subs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <HAL_InitTick+0xe8>)
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <HAL_InitTick+0xec>)
 80005b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <HAL_InitTick+0xe8>)
 80005bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <HAL_InitTick+0xe8>)
 80005c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_InitTick+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_InitTick+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_InitTick+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005da:	4818      	ldr	r0, [pc, #96]	; (800063c <HAL_InitTick+0xe8>)
 80005dc:	f001 fa18 	bl	8001a10 <HAL_TIM_Base_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d11b      	bne.n	8000626 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <HAL_InitTick+0xe8>)
 80005f0:	f001 fa70 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d111      	bne.n	8000626 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000602:	2036      	movs	r0, #54	; 0x36
 8000604:	f000 f990 	bl	8000928 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d808      	bhi.n	8000620 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800060e:	2200      	movs	r2, #0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	2036      	movs	r0, #54	; 0x36
 8000614:	f000 f96c 	bl	80008f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_InitTick+0xf0>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e002      	b.n	8000626 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000626:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800062a:	4618      	mov	r0, r3
 800062c:	3738      	adds	r7, #56	; 0x38
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	431bde83 	.word	0x431bde83
 800063c:	20000090 	.word	0x20000090
 8000640:	40001000 	.word	0x40001000
 8000644:	20000004 	.word	0x20000004

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800067c:	f000 fb24 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <TIM6_DAC_IRQHandler+0x10>)
 800068a:	f001 fa93 	bl	8001bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000090 	.word	0x20000090

08000698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <SystemInit+0x20>)
 800069e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <SystemInit+0x20>)
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c0:	f7ff ffea 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ea:	f004 ff9d 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ee:	f7ff fd97 	bl	8000220 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000700:	08005884 	.word	0x08005884
  ldr r2, =_sbss
 8000704:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000708:	20001fa8 	.word	0x20001fa8

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>

0800070e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f8de 	bl	80008da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071e:	200f      	movs	r0, #15
 8000720:	f7ff ff18 	bl	8000554 <HAL_InitTick>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e001      	b.n	8000734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000730:	f7ff fed6 	bl	80004e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000734:	79fb      	ldrb	r3, [r7, #7]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	200000dc 	.word	0x200000dc

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	200000dc 	.word	0x200000dc

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4907      	ldr	r1, [pc, #28]	; (800081c <__NVIC_EnableIRQ+0x38>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db0a      	blt.n	800084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	490c      	ldr	r1, [pc, #48]	; (800086c <__NVIC_SetPriority+0x4c>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	440b      	add	r3, r1
 8000844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000848:	e00a      	b.n	8000860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <__NVIC_SetPriority+0x50>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	3b04      	subs	r3, #4
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	440b      	add	r3, r1
 800085e:	761a      	strb	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43da      	mvns	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43d9      	mvns	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	4313      	orrs	r3, r2
         );
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	; 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff4c 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000902:	f7ff ff61 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000906:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	68b9      	ldr	r1, [r7, #8]
 800090c:	6978      	ldr	r0, [r7, #20]
 800090e:	f7ff ffb1 	bl	8000874 <NVIC_EncodePriority>
 8000912:	4602      	mov	r2, r0
 8000914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff80 	bl	8000820 <__NVIC_SetPriority>
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff54 	bl	80007e4 <__NVIC_EnableIRQ>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e17f      	b.n	8000c54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 8171 	beq.w	8000c4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b01      	cmp	r3, #1
 8000976:	d005      	beq.n	8000984 <HAL_GPIO_Init+0x40>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	2b02      	cmp	r3, #2
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d118      	bne.n	8000a24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009f8:	2201      	movs	r2, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	f003 0201 	and.w	r2, r3, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d017      	beq.n	8000a60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d123      	bne.n	8000ab4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	220f      	movs	r2, #15
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	08da      	lsrs	r2, r3, #3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3208      	adds	r2, #8
 8000aae:	6939      	ldr	r1, [r7, #16]
 8000ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0203 	and.w	r2, r3, #3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 80ac 	beq.w	8000c4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <HAL_GPIO_Init+0x330>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <HAL_GPIO_Init+0x330>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <HAL_GPIO_Init+0x330>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b0e:	4a5a      	ldr	r2, [pc, #360]	; (8000c78 <HAL_GPIO_Init+0x334>)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3302      	adds	r3, #2
 8000b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b38:	d025      	beq.n	8000b86 <HAL_GPIO_Init+0x242>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4f      	ldr	r2, [pc, #316]	; (8000c7c <HAL_GPIO_Init+0x338>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d01f      	beq.n	8000b82 <HAL_GPIO_Init+0x23e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <HAL_GPIO_Init+0x33c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d019      	beq.n	8000b7e <HAL_GPIO_Init+0x23a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4d      	ldr	r2, [pc, #308]	; (8000c84 <HAL_GPIO_Init+0x340>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0x236>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4c      	ldr	r2, [pc, #304]	; (8000c88 <HAL_GPIO_Init+0x344>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00d      	beq.n	8000b76 <HAL_GPIO_Init+0x232>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <HAL_GPIO_Init+0x348>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x22e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <HAL_GPIO_Init+0x34c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_GPIO_Init+0x22a>
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	e00c      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b6e:	2307      	movs	r3, #7
 8000b70:	e00a      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e008      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b76:	2304      	movs	r3, #4
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e004      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_Init+0x244>
 8000b86:	2300      	movs	r3, #0
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	f002 0203 	and.w	r2, r2, #3
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4093      	lsls	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b98:	4937      	ldr	r1, [pc, #220]	; (8000c78 <HAL_GPIO_Init+0x334>)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bca:	4a32      	ldr	r2, [pc, #200]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <HAL_GPIO_Init+0x350>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f47f ae78 	bne.w	8000954 <HAL_GPIO_Init+0x10>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48000800 	.word	0x48000800
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48001000 	.word	0x48001000
 8000c8c:	48001400 	.word	0x48001400
 8000c90:	48001800 	.word	0x48001800
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f806 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40007000 	.word	0x40007000

08000d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d3a:	d130      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d48:	d038      	beq.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2232      	movs	r2, #50	; 0x32
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d70:	e002      	b.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d84:	d102      	bne.n	8000d8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f2      	bne.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d98:	d110      	bne.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e00f      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000daa:	d007      	beq.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e3ca      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dea:	4b97      	ldr	r3, [pc, #604]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df4:	4b94      	ldr	r3, [pc, #592]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80e4 	beq.w	8000fd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <HAL_RCC_OscConfig+0x4a>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	f040 808b 	bne.w	8000f30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f040 8087 	bne.w	8000f30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x62>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e3a2      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1a      	ldr	r2, [r3, #32]
 8000e3e:	4b82      	ldr	r3, [pc, #520]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <HAL_RCC_OscConfig+0x7c>
 8000e4a:	4b7f      	ldr	r3, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e52:	e005      	b.n	8000e60 <HAL_RCC_OscConfig+0x88>
 8000e54:	4b7c      	ldr	r3, [pc, #496]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d223      	bcs.n	8000eac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fd71 	bl	8001950 <RCC_SetFlashLatencyFromMSIRange>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e383      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e78:	4b73      	ldr	r3, [pc, #460]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a72      	ldr	r2, [pc, #456]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b70      	ldr	r3, [pc, #448]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	496d      	ldr	r1, [pc, #436]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e96:	4b6c      	ldr	r3, [pc, #432]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	4968      	ldr	r1, [pc, #416]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
 8000eaa:	e025      	b.n	8000ef8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eac:	4b66      	ldr	r3, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a65      	ldr	r2, [pc, #404]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b63      	ldr	r3, [pc, #396]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4960      	ldr	r1, [pc, #384]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	495b      	ldr	r1, [pc, #364]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd31 	bl	8001950 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e343      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ef8:	f000 fc4a 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b52      	ldr	r3, [pc, #328]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4950      	ldr	r1, [pc, #320]	; (800104c <HAL_RCC_OscConfig+0x274>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_RCC_OscConfig+0x278>)
 8000f16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f18:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fb19 	bl	8000554 <HAL_InitTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d052      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	e327      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d032      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a42      	ldr	r2, [pc, #264]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fc10 	bl	8000768 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc0c 	bl	8000768 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e310      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f0      	beq.n	8000f4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a36      	ldr	r2, [pc, #216]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4931      	ldr	r1, [pc, #196]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	492c      	ldr	r1, [pc, #176]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	e01a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fbdd 	bl	8000768 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fbd9 	bl	8000768 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e2dd      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x1da>
 8000fd0:	e000      	b.n	8000fd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d074      	beq.n	80010ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x21a>
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	d10e      	bne.n	800100a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d10b      	bne.n	800100a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d064      	beq.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d160      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e2ba      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x24a>
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 800101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	e026      	b.n	8001070 <HAL_RCC_OscConfig+0x298>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102a:	d115      	bne.n	8001058 <HAL_RCC_OscConfig+0x280>
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8001032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a02      	ldr	r2, [pc, #8]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 800103e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e014      	b.n	8001070 <HAL_RCC_OscConfig+0x298>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	08005834 	.word	0x08005834
 8001050:	20000000 	.word	0x20000000
 8001054:	20000004 	.word	0x20000004
 8001058:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a9f      	ldr	r2, [pc, #636]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a9c      	ldr	r2, [pc, #624]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fb76 	bl	8000768 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fb72 	bl	8000768 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e276      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001092:	4b92      	ldr	r3, [pc, #584]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x2a8>
 800109e:	e014      	b.n	80010ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb62 	bl	8000768 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fb5e 	bl	8000768 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e262      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2d0>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d060      	beq.n	8001198 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_OscConfig+0x310>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d119      	bne.n	8001116 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d116      	bne.n	8001116 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_OscConfig+0x328>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e23f      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	061b      	lsls	r3, r3, #24
 800110e:	4973      	ldr	r1, [pc, #460]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001114:	e040      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d023      	beq.n	8001166 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fb1d 	bl	8000768 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fb19 	bl	8000768 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e21d      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001144:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b62      	ldr	r3, [pc, #392]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	061b      	lsls	r3, r3, #24
 800115e:	495f      	ldr	r1, [pc, #380]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e018      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800116c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001172:	f7ff faf9 	bl	8000768 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff faf5 	bl	8000768 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1f9      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03c      	beq.n	800121e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80011ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b2:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fad4 	bl	8000768 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fad0 	bl	8000768 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e1d4      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0ef      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3ec>
 80011e4:	e01b      	b.n	800121e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ec:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fab7 	bl	8000768 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fab3 	bl	8000768 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1b7      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ef      	bne.n	80011fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80a6 	beq.w	8001378 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10d      	bne.n	8001258 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001254:	2301      	movs	r3, #1
 8001256:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_RCC_OscConfig+0x508>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d118      	bne.n	8001296 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_RCC_OscConfig+0x508>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_RCC_OscConfig+0x508>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001270:	f7ff fa7a 	bl	8000768 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff fa76 	bl	8000768 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e17a      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_RCC_OscConfig+0x508>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_RCC_OscConfig+0x4d8>
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ae:	e029      	b.n	8001304 <HAL_RCC_OscConfig+0x52c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d115      	bne.n	80012e4 <HAL_RCC_OscConfig+0x50c>
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_RCC_OscConfig+0x504>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d8:	e014      	b.n	8001304 <HAL_RCC_OscConfig+0x52c>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	4b9c      	ldr	r3, [pc, #624]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a9b      	ldr	r2, [pc, #620]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f4:	4b98      	ldr	r3, [pc, #608]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a97      	ldr	r2, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d016      	beq.n	800133a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fa2c 	bl	8000768 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fa28 	bl	8000768 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e12a      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132a:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ed      	beq.n	8001314 <HAL_RCC_OscConfig+0x53c>
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fa15 	bl	8000768 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fa11 	bl	8000768 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e113      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001358:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ed      	bne.n	8001342 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136c:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001376:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80fe 	beq.w	800157e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	2b02      	cmp	r3, #2
 8001388:	f040 80d0 	bne.w	800152c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800138c:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	429a      	cmp	r2, r3
 800139e:	d130      	bne.n	8001402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	3b01      	subs	r3, #1
 80013ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d127      	bne.n	8001402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013be:	429a      	cmp	r2, r3
 80013c0:	d11f      	bne.n	8001402 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013cc:	2a07      	cmp	r2, #7
 80013ce:	bf14      	ite	ne
 80013d0:	2201      	movne	r2, #1
 80013d2:	2200      	moveq	r2, #0
 80013d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d113      	bne.n	8001402 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	3b01      	subs	r3, #1
 80013e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d109      	bne.n	8001402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d06e      	beq.n	80014e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d069      	beq.n	80014dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0ad      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800142a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001430:	f7ff f99a 	bl	8000768 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff f996 	bl	8000768 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e09a      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_RCC_OscConfig+0x784>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001466:	3a01      	subs	r2, #1
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001470:	0212      	lsls	r2, r2, #8
 8001472:	4311      	orrs	r1, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001478:	0852      	lsrs	r2, r2, #1
 800147a:	3a01      	subs	r2, #1
 800147c:	0552      	lsls	r2, r2, #21
 800147e:	4311      	orrs	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001484:	0852      	lsrs	r2, r2, #1
 8001486:	3a01      	subs	r2, #1
 8001488:	0652      	lsls	r2, r2, #25
 800148a:	4311      	orrs	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001490:	0912      	lsrs	r2, r2, #4
 8001492:	0452      	lsls	r2, r2, #17
 8001494:	430a      	orrs	r2, r1
 8001496:	4930      	ldr	r1, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b4:	f7ff f958 	bl	8000768 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f954 	bl	8000768 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e058      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014da:	e050      	b.n	800157e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e04f      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d148      	bne.n	800157e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001504:	f7ff f930 	bl	8000768 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff f92c 	bl	8000768 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e030      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x734>
 800152a:	e028      	b.n	800157e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d023      	beq.n	800157a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x780>)
 8001538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff f913 	bl	8000768 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001544:	e00c      	b.n	8001560 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff f90f 	bl	8000768 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d905      	bls.n	8001560 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e013      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
 8001558:	40021000 	.word	0x40021000
 800155c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_OscConfig+0x7b0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ec      	bne.n	8001546 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_RCC_OscConfig+0x7b0>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4905      	ldr	r1, [pc, #20]	; (8001588 <HAL_RCC_OscConfig+0x7b0>)
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_RCC_OscConfig+0x7b4>)
 8001574:	4013      	ands	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
 8001578:	e001      	b.n	800157e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	feeefffc 	.word	0xfeeefffc

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0e7      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b75      	ldr	r3, [pc, #468]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d910      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	4970      	ldr	r1, [pc, #448]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b6e      	ldr	r3, [pc, #440]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0cf      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d010      	beq.n	8001602 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d908      	bls.n	8001602 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4960      	ldr	r1, [pc, #384]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04c      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d121      	bne.n	8001666 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0a6      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d115      	bne.n	8001666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e09a      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e08e      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e086      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4943      	ldr	r1, [pc, #268]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001678:	f7ff f876 	bl	8000768 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff f872 	bl	8000768 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e06e      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d010      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d208      	bcs.n	80016d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d210      	bcs.n	8001706 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 0207 	bic.w	r2, r3, #7
 80016ec:	4923      	ldr	r1, [pc, #140]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_ClockConfig+0x1ec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e036      	b.n	8001774 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4918      	ldr	r1, [pc, #96]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d009      	beq.n	8001744 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4910      	ldr	r1, [pc, #64]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001744:	f000 f824 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 8001748:	4602      	mov	r2, r0
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	490b      	ldr	r1, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1f4>)
 8001756:	5ccb      	ldrb	r3, [r1, r3]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1f8>)
 8001762:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1fc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef3 	bl	8000554 <HAL_InitTick>
 800176e:	4603      	mov	r3, r0
 8001770:	72fb      	strb	r3, [r7, #11]

  return status;
 8001772:	7afb      	ldrb	r3, [r7, #11]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40022000 	.word	0x40022000
 8001780:	40021000 	.word	0x40021000
 8001784:	08005834 	.word	0x08005834
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a8:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x34>
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d121      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d11e      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e005      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_RCC_GetSysClockFreq+0x10c>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d102      	bne.n	800180e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	e004      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d101      	bne.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d134      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0xa6>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d003      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0xac>
 8001834:	e005      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	e005      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800183e:	617b      	str	r3, [r7, #20]
      break;
 8001840:	e002      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	617b      	str	r3, [r7, #20]
      break;
 8001846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	3301      	adds	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	fb03 f202 	mul.w	r2, r3, r2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_GetSysClockFreq+0x108>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	0e5b      	lsrs	r3, r3, #25
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	3301      	adds	r3, #1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001888:	69bb      	ldr	r3, [r7, #24]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	0800584c 	.word	0x0800584c
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	007a1200 	.word	0x007a1200

080018a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4904      	ldr	r1, [pc, #16]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08005844 	.word	0x08005844

080018ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	220f      	movs	r2, #15
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCC_GetClockConfig+0x60>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0207 	and.w	r2, r3, #7
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40022000 	.word	0x40022000

08001950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001968:	f7ff f9d2 	bl	8000d10 <HAL_PWREx_GetVoltageRange>
 800196c:	6178      	str	r0, [r7, #20]
 800196e:	e014      	b.n	800199a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001988:	f7ff f9c2 	bl	8000d10 <HAL_PWREx_GetVoltageRange>
 800198c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a0:	d10b      	bne.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d919      	bls.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2ba0      	cmp	r3, #160	; 0xa0
 80019ac:	d902      	bls.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ae:	2302      	movs	r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e013      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e010      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d902      	bls.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e00a      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d102      	bne.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019cc:	2302      	movs	r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	e004      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b70      	cmp	r3, #112	; 0x70
 80019d6:	d101      	bne.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 0207 	bic.w	r2, r3, #7
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40022000 	.word	0x40022000

08001a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e049      	b.n	8001ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f841 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f000 f9da 	bl	8001e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e04f      	b.n	8001b8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01d      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d018      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00e      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d009      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <HAL_TIM_Base_Start_IT+0x76>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_TIM_Base_Start_IT+0xd8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d115      	bne.n	8001b76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d015      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0xb4>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b62:	d011      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b74:	e008      	b.n	8001b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	40000c00 	.word	0x40000c00
 8001ba8:	40013400 	.word	0x40013400
 8001bac:	40014000 	.word	0x40014000
 8001bb0:	00010007 	.word	0x00010007

08001bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d020      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0202 	mvn.w	r2, #2
 8001be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8e4 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8d6 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8e7 	bl	8001de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0204 	mvn.w	r2, #4
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8be 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8b0 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8c1 	bl	8001de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d020      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f898 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f88a 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f89b 	bl	8001de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f872 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f864 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f875 	bl	8001de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0201 	mvn.w	r2, #1
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fbc8 	bl	80004b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f906 	bl	8001f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8fe 	bl	8001f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f834 	bl	8001df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0220 	mvn.w	r2, #32
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8c6 	bl	8001f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e26:	d00f      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00b      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d108      	bne.n	8001e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d01b      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <TIM_Base_SetConfig+0x128>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <TIM_Base_SetConfig+0x12c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0x9a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <TIM_Base_SetConfig+0x130>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00f      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <TIM_Base_SetConfig+0x128>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <TIM_Base_SetConfig+0x12c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <TIM_Base_SetConfig+0x130>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d103      	bne.n	8001f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40013400 	.word	0x40013400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800

08001f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <__NVIC_SetPriority>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Handler+0x1c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fd4:	f002 f968 	bl	80042a8 <xTaskGetSchedulerState>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fde:	f003 f84b 	bl	8005078 <xPortSysTickHandler>
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f06f 0004 	mvn.w	r0, #4
 8001ff6:	f7ff ffbf 	bl	8001f78 <__NVIC_SetPriority>
#endif
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002006:	f3ef 8305 	mrs	r3, IPSR
 800200a:	603b      	str	r3, [r7, #0]
  return(result);
 800200c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002012:	f06f 0305 	mvn.w	r3, #5
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e00c      	b.n	8002034 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <osKernelInitialize+0x44>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <osKernelInitialize+0x44>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	e002      	b.n	8002034 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200000e0 	.word	0x200000e0

08002048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800204e:	f3ef 8305 	mrs	r3, IPSR
 8002052:	603b      	str	r3, [r7, #0]
  return(result);
 8002054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <osKernelStart+0x1a>
    stat = osErrorISR;
 800205a:	f06f 0305 	mvn.w	r3, #5
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	e010      	b.n	8002084 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <osKernelStart+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d109      	bne.n	800207e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800206a:	f7ff ffbf 	bl	8001fec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <osKernelStart+0x48>)
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002074:	f001 fcbc 	bl	80039f0 <vTaskStartScheduler>
      stat = osOK;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	e002      	b.n	8002084 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000e0 	.word	0x200000e0

08002094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af04      	add	r7, sp, #16
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020a4:	f3ef 8305 	mrs	r3, IPSR
 80020a8:	617b      	str	r3, [r7, #20]
  return(result);
 80020aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d17e      	bne.n	80021ae <osThreadNew+0x11a>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07b      	beq.n	80021ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020ba:	2318      	movs	r3, #24
 80020bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d045      	beq.n	800215a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <osThreadNew+0x48>
        name = attr->name;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <osThreadNew+0x6e>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b38      	cmp	r3, #56	; 0x38
 80020f4:	d805      	bhi.n	8002102 <osThreadNew+0x6e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <osThreadNew+0x72>
        return (NULL);
 8002102:	2300      	movs	r3, #0
 8002104:	e054      	b.n	80021b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00e      	beq.n	800213c <osThreadNew+0xa8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2ba7      	cmp	r3, #167	; 0xa7
 8002124:	d90a      	bls.n	800213c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <osThreadNew+0xa8>
        mem = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e010      	b.n	800215e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10c      	bne.n	800215e <osThreadNew+0xca>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <osThreadNew+0xca>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <osThreadNew+0xca>
          mem = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e001      	b.n	800215e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d110      	bne.n	8002186 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800216c:	9202      	str	r2, [sp, #8]
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6a3a      	ldr	r2, [r7, #32]
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f001 fa4c 	bl	8003618 <xTaskCreateStatic>
 8002180:	4603      	mov	r3, r0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e013      	b.n	80021ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d110      	bne.n	80021ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	b29a      	uxth	r2, r3
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f001 fa97 	bl	80036d2 <xTaskCreate>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <osThreadNew+0x11a>
            hTask = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021ae:	693b      	ldr	r3, [r7, #16]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021c0:	f3ef 8305 	mrs	r3, IPSR
 80021c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80021c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <osDelay+0x1c>
    stat = osErrorISR;
 80021cc:	f06f 0305 	mvn.w	r3, #5
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e007      	b.n	80021e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 fbd2 	bl	8003988 <vTaskDelay>
    }
  }

  return (stat);
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021fe:	f3ef 8305 	mrs	r3, IPSR
 8002202:	613b      	str	r3, [r7, #16]
  return(result);
 8002204:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002206:	2b00      	cmp	r3, #0
 8002208:	d175      	bne.n	80022f6 <osSemaphoreNew+0x108>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d072      	beq.n	80022f6 <osSemaphoreNew+0x108>
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d86e      	bhi.n	80022f6 <osSemaphoreNew+0x108>
    mem = -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <osSemaphoreNew+0x4c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b4f      	cmp	r3, #79	; 0x4f
 8002232:	d902      	bls.n	800223a <osSemaphoreNew+0x4c>
        mem = 1;
 8002234:	2301      	movs	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e00c      	b.n	8002254 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <osSemaphoreNew+0x66>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <osSemaphoreNew+0x66>
          mem = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	e001      	b.n	8002254 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225a:	d04c      	beq.n	80022f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d128      	bne.n	80022b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10a      	bne.n	800227e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2203      	movs	r2, #3
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fa29 	bl	80026cc <xQueueGenericCreateStatic>
 800227a:	61f8      	str	r0, [r7, #28]
 800227c:	e005      	b.n	800228a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800227e:	2203      	movs	r2, #3
 8002280:	2100      	movs	r1, #0
 8002282:	2001      	movs	r0, #1
 8002284:	f000 fa9a 	bl	80027bc <xQueueGenericCreate>
 8002288:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d022      	beq.n	80022d6 <osSemaphoreNew+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01f      	beq.n	80022d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002296:	2300      	movs	r3, #0
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	69f8      	ldr	r0, [r7, #28]
 800229e:	f000 fb55 	bl	800294c <xQueueGenericSend>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d016      	beq.n	80022d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80022a8:	69f8      	ldr	r0, [r7, #28]
 80022aa:	f000 ffe1 	bl	8003270 <vQueueDelete>
            hSemaphore = NULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e010      	b.n	80022d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	461a      	mov	r2, r3
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fad7 	bl	8002876 <xQueueCreateCountingSemaphoreStatic>
 80022c8:	61f8      	str	r0, [r7, #28]
 80022ca:	e004      	b.n	80022d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fb08 	bl	80028e4 <xQueueCreateCountingSemaphore>
 80022d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00c      	beq.n	80022f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e001      	b.n	80022ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80022ee:	6979      	ldr	r1, [r7, #20]
 80022f0:	69f8      	ldr	r0, [r7, #28]
 80022f2:	f001 f909 	bl	8003508 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80022f6:	69fb      	ldr	r3, [r7, #28]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002318:	f06f 0303 	mvn.w	r3, #3
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e039      	b.n	8002394 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002320:	f3ef 8305 	mrs	r3, IPSR
 8002324:	60fb      	str	r3, [r7, #12]
  return(result);
 8002326:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002332:	f06f 0303 	mvn.w	r3, #3
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e02c      	b.n	8002394 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	461a      	mov	r2, r3
 8002344:	2100      	movs	r1, #0
 8002346:	6938      	ldr	r0, [r7, #16]
 8002348:	f000 ff12 	bl	8003170 <xQueueReceiveFromISR>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002352:	f06f 0302 	mvn.w	r3, #2
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e01c      	b.n	8002394 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <osSemaphoreAcquire+0x94>
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <osSemaphoreAcquire+0xa0>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	e010      	b.n	8002394 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	6938      	ldr	r0, [r7, #16]
 8002376:	f000 fdef 	bl	8002f58 <xQueueSemaphoreTake>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d009      	beq.n	8002394 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002386:	f06f 0301 	mvn.w	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e002      	b.n	8002394 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800238e:	f06f 0302 	mvn.w	r3, #2
 8002392:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002394:	697b      	ldr	r3, [r7, #20]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80023ba:	f06f 0303 	mvn.w	r3, #3
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e02c      	b.n	800241c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023c2:	f3ef 8305 	mrs	r3, IPSR
 80023c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80023c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	4619      	mov	r1, r3
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f000 fc50 	bl	8002c7e <xQueueGiveFromISR>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d003      	beq.n	80023ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80023e4:	f06f 0302 	mvn.w	r3, #2
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e017      	b.n	800241c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <osSemaphoreRelease+0x78>
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <osSemaphoreRelease+0x84>)
 80023f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	e00b      	b.n	800241c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002404:	2300      	movs	r3, #0
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f000 fa9e 	bl	800294c <xQueueGenericSend>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002416:	f06f 0302 	mvn.w	r3, #2
 800241a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800241c:	697b      	ldr	r3, [r7, #20]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <vApplicationGetIdleTaskMemory+0x2c>)
 800243c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <vApplicationGetIdleTaskMemory+0x30>)
 8002442:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200000e4 	.word	0x200000e4
 800245c:	2000018c 	.word	0x2000018c

08002460 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <vApplicationGetTimerTaskMemory+0x2c>)
 8002470:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <vApplicationGetTimerTaskMemory+0x30>)
 8002476:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	2000038c 	.word	0x2000038c
 8002490:	20000434 	.word	0x20000434

08002494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0208 	add.w	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0208 	add.w	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d103      	bne.n	8002556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00c      	b.n	8002570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3308      	adds	r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e002      	b.n	8002564 <vListInsert+0x2e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d2f6      	bcs.n	800255e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6852      	ldr	r2, [r2, #4]
 80025c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002626:	f002 fc95 	bl	8004f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	3b01      	subs	r3, #1
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	441a      	add	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d114      	bne.n	80026a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01a      	beq.n	80026ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fc4b 	bl	8003f24 <xTaskRemoveFromEventList>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <xQueueGenericReset+0xcc>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	e009      	b.n	80026ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3310      	adds	r3, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fef2 	bl	8002494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff feed 	bl	8002494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026ba:	f002 fc7b 	bl	8004fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <xQueueGenericCreateStatic+0x52>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <xQueueGenericCreateStatic+0x56>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericCreateStatic+0x58>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <xQueueGenericCreateStatic+0x7e>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueGenericCreateStatic+0x82>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericCreateStatic+0x84>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fb      	str	r3, [r7, #28]
}
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800276a:	2350      	movs	r3, #80	; 0x50
 800276c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b50      	cmp	r3, #80	; 0x50
 8002772:	d00a      	beq.n	800278a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61bb      	str	r3, [r7, #24]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800278a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800279e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f83f 	bl	8002830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	613b      	str	r3, [r7, #16]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3350      	adds	r3, #80	; 0x50
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fccf 	bl	8005198 <pvPortMalloc>
 80027fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3350      	adds	r3, #80	; 0x50
 800280a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f805 	bl	8002830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002826:	69bb      	ldr	r3, [r7, #24]
	}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e002      	b.n	8002852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800285e:	2101      	movs	r1, #1
 8002860:	69b8      	ldr	r0, [r7, #24]
 8002862:	f7ff fecb 	bl	80025fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08a      	sub	sp, #40	; 0x28
 800287a:	af02      	add	r7, sp, #8
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	61bb      	str	r3, [r7, #24]
}
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d90a      	bls.n	80028bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	617b      	str	r3, [r7, #20]
}
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80028bc:	2302      	movs	r3, #2
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff00 	bl	80026cc <xQueueGenericCreateStatic>
 80028cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80028da:	69fb      	ldr	r3, [r7, #28]
	}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	613b      	str	r3, [r7, #16]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90a      	bls.n	8002928 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	60fb      	str	r3, [r7, #12]
}
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002928:	2202      	movs	r2, #2
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff45 	bl	80027bc <xQueueGenericCreate>
 8002932:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002940:	697b      	ldr	r3, [r7, #20]
	}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	; 0x38
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueGenericSend+0x32>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <xQueueGenericSend+0x40>
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <xQueueGenericSend+0x44>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <xQueueGenericSend+0x46>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <xQueueGenericSend+0x60>
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029a8:	bf00      	nop
 80029aa:	e7fe      	b.n	80029aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d103      	bne.n	80029ba <xQueueGenericSend+0x6e>
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <xQueueGenericSend+0x72>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueGenericSend+0x74>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericSend+0x8e>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	623b      	str	r3, [r7, #32]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029da:	f001 fc65 	bl	80042a8 <xTaskGetSchedulerState>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <xQueueGenericSend+0x9e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueGenericSend+0xa2>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueGenericSend+0xa4>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericSend+0xbe>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61fb      	str	r3, [r7, #28]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a0a:	f002 faa3 	bl	8004f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <xQueueGenericSend+0xd4>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d129      	bne.n	8002a74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a26:	f000 fc5e 	bl	80032e6 <prvCopyDataToQueue>
 8002a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fa73 	bl	8003f24 <xTaskRemoveFromEventList>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <xQueueGenericSend+0x1f8>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	e00a      	b.n	8002a6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <xQueueGenericSend+0x1f8>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a6c:	f002 faa2 	bl	8004fb4 <vPortExitCritical>
				return pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e063      	b.n	8002b3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a7a:	f002 fa9b 	bl	8004fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e05c      	b.n	8002b3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 faad 	bl	8003fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a96:	f002 fa8d 	bl	8004fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a9a:	f001 f819 	bl	8003ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a9e:	f002 fa59 	bl	8004f54 <vPortEnterCritical>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d103      	bne.n	8002ab8 <xQueueGenericSend+0x16c>
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSend+0x182>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ace:	f002 fa71 	bl	8004fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ad2:	1d3a      	adds	r2, r7, #4
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fa9c 	bl	8004018 <xTaskCheckForTimeOut>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d124      	bne.n	8002b30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae8:	f000 fcf5 	bl	80034d6 <prvIsQueueFull>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	3310      	adds	r3, #16
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 f9c2 	bl	8003e84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b02:	f000 fc80 	bl	8003406 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b06:	f000 fff1 	bl	8003aec <xTaskResumeAll>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af7c 	bne.w	8002a0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <xQueueGenericSend+0x1f8>)
 8002b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	e772      	b.n	8002a0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b26:	f000 fc6e 	bl	8003406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b2a:	f000 ffdf 	bl	8003aec <xTaskResumeAll>
 8002b2e:	e76c      	b.n	8002a0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b32:	f000 fc68 	bl	8003406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b36:	f000 ffd9 	bl	8003aec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3738      	adds	r7, #56	; 0x38
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b090      	sub	sp, #64	; 0x40
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <xQueueGenericSendFromISR+0x3c>
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <xQueueGenericSendFromISR+0x40>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <xQueueGenericSendFromISR+0x42>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ba0:	bf00      	nop
 8002ba2:	e7fe      	b.n	8002ba2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <xQueueGenericSendFromISR+0x6a>
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x6e>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <xQueueGenericSendFromISR+0x70>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	623b      	str	r3, [r7, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bd2:	f002 faa1 	bl	8005118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	61fa      	str	r2, [r7, #28]
 8002bec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <xQueueGenericSendFromISR+0xbc>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d12f      	bne.n	8002c64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c1a:	f000 fb64 	bl	80032e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d112      	bne.n	8002c4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d016      	beq.n	8002c5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f975 	bl	8003f24 <xTaskRemoveFromEventList>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	b25a      	sxtb	r2, r3
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c62:	e001      	b.n	8002c68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3740      	adds	r7, #64	; 0x40
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08e      	sub	sp, #56	; 0x38
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	623b      	str	r3, [r7, #32]
}
 8002ca4:	bf00      	nop
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	61fb      	str	r3, [r7, #28]
}
 8002cc2:	bf00      	nop
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <xQueueGiveFromISR+0x58>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <xQueueGiveFromISR+0x5c>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <xQueueGiveFromISR+0x5e>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61bb      	str	r3, [r7, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cf6:	f002 fa0f 	bl	8005118 <vPortValidateInterruptPriority>
	__asm volatile
 8002cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	617a      	str	r2, [r7, #20]
 8002d10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d22b      	bcs.n	8002d7e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d112      	bne.n	8002d68 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	3324      	adds	r3, #36	; 0x24
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f8e8 	bl	8003f24 <xTaskRemoveFromEventList>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e007      	b.n	8002d78 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	b25a      	sxtb	r2, r3
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	e001      	b.n	8002d82 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f383 8811 	msr	BASEPRI, r3
}
 8002d8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3738      	adds	r7, #56	; 0x38
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	; 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <xQueueReceive+0x30>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	623b      	str	r3, [r7, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <xQueueReceive+0x3e>
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueReceive+0x42>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueReceive+0x44>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueReceive+0x5e>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61fb      	str	r3, [r7, #28]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002df6:	f001 fa57 	bl	80042a8 <xTaskGetSchedulerState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueReceive+0x6e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueReceive+0x72>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueReceive+0x74>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueReceive+0x8e>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61bb      	str	r3, [r7, #24]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e26:	f002 f895 	bl	8004f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3a:	f000 fabe 	bl	80033ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	3310      	adds	r3, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 f866 	bl	8003f24 <xTaskRemoveFromEventList>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <xQueueReceive+0x1bc>)
 8002e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e6e:	f002 f8a1 	bl	8004fb4 <vPortExitCritical>
				return pdPASS;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e069      	b.n	8002f4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e7c:	f002 f89a 	bl	8004fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e062      	b.n	8002f4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 f8ac 	bl	8003fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e98:	f002 f88c 	bl	8004fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e9c:	f000 fe18 	bl	8003ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea0:	f002 f858 	bl	8004f54 <vPortEnterCritical>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d103      	bne.n	8002eba <xQueueReceive+0x122>
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0x138>
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed0:	f002 f870 	bl	8004fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ed4:	1d3a      	adds	r2, r7, #4
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 f89b 	bl	8004018 <xTaskCheckForTimeOut>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d123      	bne.n	8002f30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eea:	f000 fade 	bl	80034aa <prvIsQueueEmpty>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	3324      	adds	r3, #36	; 0x24
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ffc1 	bl	8003e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f04:	f000 fa7f 	bl	8003406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f08:	f000 fdf0 	bl	8003aec <xTaskResumeAll>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d189      	bne.n	8002e26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <xQueueReceive+0x1bc>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e780      	b.n	8002e26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f26:	f000 fa6e 	bl	8003406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f2a:	f000 fddf 	bl	8003aec <xTaskResumeAll>
 8002f2e:	e77a      	b.n	8002e26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f32:	f000 fa68 	bl	8003406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f36:	f000 fdd9 	bl	8003aec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3c:	f000 fab5 	bl	80034aa <prvIsQueueEmpty>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f43f af6f 	beq.w	8002e26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3730      	adds	r7, #48	; 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	623b      	str	r3, [r7, #32]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	61fb      	str	r3, [r7, #28]
}
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fa8:	f001 f97e 	bl	80042a8 <xTaskGetSchedulerState>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <xQueueSemaphoreTake+0x60>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <xQueueSemaphoreTake+0x64>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <xQueueSemaphoreTake+0x66>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	61bb      	str	r3, [r7, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fd8:	f001 ffbc 	bl	8004f54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d024      	beq.n	8003032 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	1e5a      	subs	r2, r3, #1
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ff8:	f001 facc 	bl	8004594 <pvTaskIncrementMutexHeldCount>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00f      	beq.n	800302a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	3310      	adds	r3, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ff88 	bl	8003f24 <xTaskRemoveFromEventList>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800301a:	4b54      	ldr	r3, [pc, #336]	; (800316c <xQueueSemaphoreTake+0x214>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800302a:	f001 ffc3 	bl	8004fb4 <vPortExitCritical>
				return pdPASS;
 800302e:	2301      	movs	r3, #1
 8003030:	e097      	b.n	8003162 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d111      	bne.n	800305c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	617b      	str	r3, [r7, #20]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003054:	f001 ffae 	bl	8004fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003058:	2300      	movs	r3, #0
 800305a:	e082      	b.n	8003162 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4618      	mov	r0, r3
 8003068:	f000 ffc0 	bl	8003fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306c:	2301      	movs	r3, #1
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003070:	f001 ffa0 	bl	8004fb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003074:	f000 fd2c 	bl	8003ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003078:	f001 ff6c 	bl	8004f54 <vPortEnterCritical>
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003082:	b25b      	sxtb	r3, r3
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d103      	bne.n	8003092 <xQueueSemaphoreTake+0x13a>
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <xQueueSemaphoreTake+0x150>
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a8:	f001 ff84 	bl	8004fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ac:	463a      	mov	r2, r7
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ffaf 	bl	8004018 <xTaskCheckForTimeOut>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d132      	bne.n	8003126 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030c2:	f000 f9f2 	bl	80034aa <prvIsQueueEmpty>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d026      	beq.n	800311a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80030d4:	f001 ff3e 	bl	8004f54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f901 	bl	80042e4 <xTaskPriorityInherit>
 80030e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80030e4:	f001 ff66 	bl	8004fb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	3324      	adds	r3, #36	; 0x24
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fec7 	bl	8003e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030f8:	f000 f985 	bl	8003406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030fc:	f000 fcf6 	bl	8003aec <xTaskResumeAll>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f47f af68 	bne.w	8002fd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <xQueueSemaphoreTake+0x214>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	e75e      	b.n	8002fd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800311a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800311c:	f000 f973 	bl	8003406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003120:	f000 fce4 	bl	8003aec <xTaskResumeAll>
 8003124:	e758      	b.n	8002fd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003128:	f000 f96d 	bl	8003406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800312c:	f000 fcde 	bl	8003aec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003132:	f000 f9ba 	bl	80034aa <prvIsQueueEmpty>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f43f af4d 	beq.w	8002fd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003144:	f001 ff06 	bl	8004f54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800314a:	f000 f8b4 	bl	80032b6 <prvGetDisinheritPriorityAfterTimeout>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f99a 	bl	8004490 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800315c:	f001 ff2a 	bl	8004fb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003162:	4618      	mov	r0, r3
 8003164:	3738      	adds	r7, #56	; 0x38
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	623b      	str	r3, [r7, #32]
}
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <xQueueReceiveFromISR+0x3a>
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <xQueueReceiveFromISR+0x3e>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueReceiveFromISR+0x40>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	61fb      	str	r3, [r7, #28]
}
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ca:	f001 ffa5 	bl	8005118 <vPortValidateInterruptPriority>
	__asm volatile
 80031ce:	f3ef 8211 	mrs	r2, BASEPRI
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61ba      	str	r2, [r7, #24]
 80031e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80031e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02f      	beq.n	8003256 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003204:	f000 f8d9 	bl	80033ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d112      	bne.n	8003240 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	3310      	adds	r3, #16
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fe7c 	bl	8003f24 <xTaskRemoveFromEventList>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e007      	b.n	8003250 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003244:	3301      	adds	r3, #1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	b25a      	sxtb	r2, r3
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
 8003254:	e001      	b.n	800325a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003256:	2300      	movs	r3, #0
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f383 8811 	msr	BASEPRI, r3
}
 8003264:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003268:	4618      	mov	r0, r3
 800326a:	3738      	adds	r7, #56	; 0x38
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <vQueueDelete+0x28>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60bb      	str	r3, [r7, #8]
}
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f95f 	bl	800355c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f002 f841 	bl	8005330 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e001      	b.n	80032d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032d8:	68fb      	ldr	r3, [r7, #12]
	}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d14d      	bne.n	80033a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f84f 	bl	80043b4 <xTaskPriorityDisinherit>
 8003316:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	e043      	b.n	80033a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d119      	bne.n	800335a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6858      	ldr	r0, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	461a      	mov	r2, r3
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	f002 f99f 	bl	8005674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d32b      	bcc.n	80033a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	e026      	b.n	80033a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68d8      	ldr	r0, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	461a      	mov	r2, r3
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	f002 f985 	bl	8005674 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	425b      	negs	r3, r3
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d207      	bcs.n	8003396 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	425b      	negs	r3, r3
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d105      	bne.n	80033a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033b0:	697b      	ldr	r3, [r7, #20]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d018      	beq.n	80033fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d303      	bcc.n	80033ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	461a      	mov	r2, r3
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	f002 f93b 	bl	8005674 <memcpy>
	}
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800340e:	f001 fda1 	bl	8004f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003418:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800341a:	e011      	b.n	8003440 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fd7b 	bl	8003f24 <xTaskRemoveFromEventList>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003434:	f000 fe52 	bl	80040dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	3b01      	subs	r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dce9      	bgt.n	800341c <prvUnlockQueue+0x16>
 8003448:	e000      	b.n	800344c <prvUnlockQueue+0x46>
					break;
 800344a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003454:	f001 fdae 	bl	8004fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003458:	f001 fd7c 	bl	8004f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003462:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003464:	e011      	b.n	800348a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3310      	adds	r3, #16
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd56 	bl	8003f24 <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800347e:	f000 fe2d 	bl	80040dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	3b01      	subs	r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800348e:	2b00      	cmp	r3, #0
 8003490:	dce9      	bgt.n	8003466 <prvUnlockQueue+0x60>
 8003492:	e000      	b.n	8003496 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003494:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800349e:	f001 fd89 	bl	8004fb4 <vPortExitCritical>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b2:	f001 fd4f 	bl	8004f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e001      	b.n	80034c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c8:	f001 fd74 	bl	8004fb4 <vPortExitCritical>

	return xReturn;
 80034cc:	68fb      	ldr	r3, [r7, #12]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034de:	f001 fd39 	bl	8004f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d102      	bne.n	80034f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e001      	b.n	80034f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f8:	f001 fd5c 	bl	8004fb4 <vPortExitCritical>

	return xReturn;
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e014      	b.n	8003542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <vQueueAddToRegistry+0x50>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <vQueueAddToRegistry+0x50>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <vQueueAddToRegistry+0x50>)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800353a:	e006      	b.n	800354a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b07      	cmp	r3, #7
 8003546:	d9e7      	bls.n	8003518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000834 	.word	0x20000834

0800355c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e016      	b.n	8003598 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <vQueueUnregisterQueue+0x50>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	d10b      	bne.n	8003592 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <vQueueUnregisterQueue+0x50>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2100      	movs	r1, #0
 8003580:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <vQueueUnregisterQueue+0x50>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
				break;
 8003590:	e006      	b.n	80035a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3301      	adds	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d9e5      	bls.n	800356a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000834 	.word	0x20000834

080035b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035c0:	f001 fcc8 	bl	8004f54 <vPortEnterCritical>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d103      	bne.n	80035da <vQueueWaitForMessageRestricted+0x2a>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d103      	bne.n	80035f0 <vQueueWaitForMessageRestricted+0x40>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f0:	f001 fce0 	bl	8004fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fc61 	bl	8003ecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff fefb 	bl	8003406 <prvUnlockQueue>
	}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08e      	sub	sp, #56	; 0x38
 800361c:	af04      	add	r7, sp, #16
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xTaskCreateStatic+0x2a>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	623b      	str	r3, [r7, #32]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xTaskCreateStatic+0x46>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	61fb      	str	r3, [r7, #28]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800365e:	23a8      	movs	r3, #168	; 0xa8
 8003660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2ba8      	cmp	r3, #168	; 0xa8
 8003666:	d00a      	beq.n	800367e <xTaskCreateStatic+0x66>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61bb      	str	r3, [r7, #24]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800367e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <xTaskCreateStatic+0xac>
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2202      	movs	r2, #2
 800369a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800369e:	2300      	movs	r3, #0
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f850 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036be:	f000 f8f3 	bl	80038a8 <prvAddNewTaskToReadyList>
 80036c2:	e001      	b.n	80036c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c8:	697b      	ldr	r3, [r7, #20]
	}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	; 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08c      	sub	sp, #48	; 0x30
 80036d6:	af04      	add	r7, sp, #16
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fd56 	bl	8005198 <pvPortMalloc>
 80036ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f4:	20a8      	movs	r0, #168	; 0xa8
 80036f6:	f001 fd4f 	bl	8005198 <pvPortMalloc>
 80036fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
 8003708:	e005      	b.n	8003716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f001 fe10 	bl	8005330 <vPortFree>
 8003710:	e001      	b.n	8003716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f80e 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003740:	69f8      	ldr	r0, [r7, #28]
 8003742:	f000 f8b1 	bl	80038a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e002      	b.n	8003752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003752:	69bb      	ldr	r3, [r7, #24]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	21a5      	movs	r1, #165	; 0xa5
 8003776:	f001 fef9 	bl	800556c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003784:	3b01      	subs	r3, #1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	617b      	str	r3, [r7, #20]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e012      	b.n	80037e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	3334      	adds	r3, #52	; 0x34
 80037d0:	460a      	mov	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d9e9      	bls.n	80037c0 <prvInitialiseNewTask+0x64>
 80037ec:	e000      	b.n	80037f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80037ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f8:	e003      	b.n	8003802 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	2b37      	cmp	r3, #55	; 0x37
 8003806:	d901      	bls.n	800380c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003808:	2337      	movs	r3, #55	; 0x37
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003816:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fe56 	bl	80024d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3318      	adds	r3, #24
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fe51 	bl	80024d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	3354      	adds	r3, #84	; 0x54
 800385c:	224c      	movs	r2, #76	; 0x4c
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fe83 	bl	800556c <memset>
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	4a0c      	ldr	r2, [pc, #48]	; (800389c <prvInitialiseNewTask+0x140>)
 800386a:	659a      	str	r2, [r3, #88]	; 0x58
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <prvInitialiseNewTask+0x144>)
 8003870:	65da      	str	r2, [r3, #92]	; 0x5c
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <prvInitialiseNewTask+0x148>)
 8003876:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	69b8      	ldr	r0, [r7, #24]
 800387e:	f001 fa3f 	bl	8004d00 <pxPortInitialiseStack>
 8003882:	4602      	mov	r2, r0
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003892:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003894:	bf00      	nop
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20001e68 	.word	0x20001e68
 80038a0:	20001ed0 	.word	0x20001ed0
 80038a4:	20001f38 	.word	0x20001f38

080038a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038b0:	f001 fb50 	bl	8004f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a2c      	ldr	r2, [pc, #176]	; (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d110      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038d4:	f000 fc26 	bl	8004124 <prvInitialiseTaskLists>
 80038d8:	e00d      	b.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <prvAddNewTaskToReadyList+0xcc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d802      	bhi.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <prvAddNewTaskToReadyList+0xd0>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <prvAddNewTaskToReadyList+0xd4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <prvAddNewTaskToReadyList+0x74>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <prvAddNewTaskToReadyList+0xd4>)
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <prvAddNewTaskToReadyList+0xd8>)
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f7fe fddb 	bl	80024ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003938:	f001 fb3c 	bl	8004fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <prvAddNewTaskToReadyList+0xcc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <prvAddNewTaskToReadyList+0xc8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	429a      	cmp	r2, r3
 8003950:	d207      	bcs.n	8003962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <prvAddNewTaskToReadyList+0xdc>)
 8003954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000d48 	.word	0x20000d48
 8003970:	20000874 	.word	0x20000874
 8003974:	20000d54 	.word	0x20000d54
 8003978:	20000d64 	.word	0x20000d64
 800397c:	20000d50 	.word	0x20000d50
 8003980:	20000878 	.word	0x20000878
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d017      	beq.n	80039ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <vTaskDelay+0x60>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <vTaskDelay+0x30>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039b8:	f000 f88a 	bl	8003ad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039bc:	2100      	movs	r1, #0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fdfc 	bl	80045bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c4:	f000 f892 	bl	8003aec <xTaskResumeAll>
 80039c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <vTaskDelay+0x64>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000d70 	.word	0x20000d70
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039fe:	463a      	mov	r2, r7
 8003a00:	1d39      	adds	r1, r7, #4
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fd10 	bl	800242c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	9202      	str	r2, [sp, #8]
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	4924      	ldr	r1, [pc, #144]	; (8003ab0 <vTaskStartScheduler+0xc0>)
 8003a20:	4824      	ldr	r0, [pc, #144]	; (8003ab4 <vTaskStartScheduler+0xc4>)
 8003a22:	f7ff fdf9 	bl	8003618 <xTaskCreateStatic>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <vTaskStartScheduler+0xc8>)
 8003a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <vTaskStartScheduler+0xc8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e001      	b.n	8003a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a44:	f000 fe0e 	bl	8004664 <xTimerCreateTimerTask>
 8003a48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d11b      	bne.n	8003a88 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
}
 8003a62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <vTaskStartScheduler+0xcc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3354      	adds	r3, #84	; 0x54
 8003a6a:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <vTaskStartScheduler+0xd0>)
 8003a6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <vTaskStartScheduler+0xd4>)
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <vTaskStartScheduler+0xd8>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <vTaskStartScheduler+0xdc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a82:	f001 f9c5 	bl	8004e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a86:	e00e      	b.n	8003aa6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d10a      	bne.n	8003aa6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskStartScheduler+0xb4>
}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	08005790 	.word	0x08005790
 8003ab4:	080040f5 	.word	0x080040f5
 8003ab8:	20000d6c 	.word	0x20000d6c
 8003abc:	20000874 	.word	0x20000874
 8003ac0:	2000005c 	.word	0x2000005c
 8003ac4:	20000d68 	.word	0x20000d68
 8003ac8:	20000d54 	.word	0x20000d54
 8003acc:	20000d4c 	.word	0x20000d4c

08003ad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <vTaskSuspendAll+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <vTaskSuspendAll+0x18>)
 8003adc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20000d70 	.word	0x20000d70

08003aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003afa:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <xTaskResumeAll+0x118>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	603b      	str	r3, [r7, #0]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b18:	f001 fa1c 	bl	8004f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <xTaskResumeAll+0x118>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <xTaskResumeAll+0x118>)
 8003b24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <xTaskResumeAll+0x118>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d162      	bne.n	8003bf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <xTaskResumeAll+0x11c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d05e      	beq.n	8003bf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b36:	e02f      	b.n	8003b98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <xTaskResumeAll+0x120>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3318      	adds	r3, #24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd2f 	bl	80025a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fd2a 	bl	80025a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <xTaskResumeAll+0x124>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d903      	bls.n	8003b68 <xTaskResumeAll+0x7c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <xTaskResumeAll+0x124>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <xTaskResumeAll+0x128>)
 8003b76:	441a      	add	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7fe fcb5 	bl	80024ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <xTaskResumeAll+0x12c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <xTaskResumeAll+0x130>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b98:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <xTaskResumeAll+0x120>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1cb      	bne.n	8003b38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ba6:	f000 fb5f 	bl	8004268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <xTaskResumeAll+0x134>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d010      	beq.n	8003bd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bb6:	f000 f847 	bl	8003c48 <xTaskIncrementTick>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <xTaskResumeAll+0x130>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f1      	bne.n	8003bb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <xTaskResumeAll+0x134>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <xTaskResumeAll+0x130>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <xTaskResumeAll+0x138>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bf4:	f001 f9de 	bl	8004fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000d70 	.word	0x20000d70
 8003c08:	20000d48 	.word	0x20000d48
 8003c0c:	20000d08 	.word	0x20000d08
 8003c10:	20000d50 	.word	0x20000d50
 8003c14:	20000878 	.word	0x20000878
 8003c18:	20000874 	.word	0x20000874
 8003c1c:	20000d5c 	.word	0x20000d5c
 8003c20:	20000d58 	.word	0x20000d58
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <xTaskGetTickCount+0x1c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000d4c 	.word	0x20000d4c

08003c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <xTaskIncrementTick+0x148>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 808f 	bne.w	8003d7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c64:	4a4b      	ldr	r2, [pc, #300]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d120      	bne.n	8003cb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c70:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <xTaskIncrementTick+0x46>
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	4a3d      	ldr	r2, [pc, #244]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f000 fadb 	bl	8004268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cb2:	4b3c      	ldr	r3, [pc, #240]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d349      	bcc.n	8003d50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cbc:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc6:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	601a      	str	r2, [r3, #0]
					break;
 8003cce:	e03f      	b.n	8003d50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d203      	bcs.n	8003cf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cee:	e02f      	b.n	8003d50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fc57 	bl	80025a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3318      	adds	r3, #24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fc4e 	bl	80025a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <xTaskIncrementTick+0xd8>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fbd9 	bl	80024ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <xTaskIncrementTick+0x168>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d3b8      	bcc.n	8003cbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d4e:	e7b5      	b.n	8003cbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <xTaskIncrementTick+0x168>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	4915      	ldr	r1, [pc, #84]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d901      	bls.n	8003d6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <xTaskIncrementTick+0x16c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e004      	b.n	8003d84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <xTaskIncrementTick+0x170>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <xTaskIncrementTick+0x170>)
 8003d82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d84:	697b      	ldr	r3, [r7, #20]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000d70 	.word	0x20000d70
 8003d94:	20000d4c 	.word	0x20000d4c
 8003d98:	20000d00 	.word	0x20000d00
 8003d9c:	20000d04 	.word	0x20000d04
 8003da0:	20000d60 	.word	0x20000d60
 8003da4:	20000d68 	.word	0x20000d68
 8003da8:	20000d50 	.word	0x20000d50
 8003dac:	20000878 	.word	0x20000878
 8003db0:	20000874 	.word	0x20000874
 8003db4:	20000d5c 	.word	0x20000d5c
 8003db8:	20000d58 	.word	0x20000d58

08003dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <vTaskSwitchContext+0xb0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dca:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <vTaskSwitchContext+0xb4>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dd0:	e046      	b.n	8003e60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <vTaskSwitchContext+0xb4>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <vTaskSwitchContext+0xb8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e010      	b.n	8003e02 <vTaskSwitchContext+0x46>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <vTaskSwitchContext+0x40>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	607b      	str	r3, [r7, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <vTaskSwitchContext+0x3e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	491d      	ldr	r1, [pc, #116]	; (8003e78 <vTaskSwitchContext+0xbc>)
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0e4      	beq.n	8003de0 <vTaskSwitchContext+0x24>
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <vTaskSwitchContext+0xbc>)
 8003e22:	4413      	add	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3308      	adds	r3, #8
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d104      	bne.n	8003e46 <vTaskSwitchContext+0x8a>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <vTaskSwitchContext+0xc0>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <vTaskSwitchContext+0xb8>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <vTaskSwitchContext+0xc0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3354      	adds	r3, #84	; 0x54
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <vTaskSwitchContext+0xc4>)
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20000d70 	.word	0x20000d70
 8003e70:	20000d5c 	.word	0x20000d5c
 8003e74:	20000d50 	.word	0x20000d50
 8003e78:	20000878 	.word	0x20000878
 8003e7c:	20000874 	.word	0x20000874
 8003e80:	2000005c 	.word	0x2000005c

08003e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <vTaskPlaceOnEventList+0x44>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe fb3f 	bl	8002536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eb8:	2101      	movs	r1, #1
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f000 fb7e 	bl	80045bc <prvAddCurrentTaskToDelayedList>
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000874 	.word	0x20000874

08003ecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	617b      	str	r3, [r7, #20]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3318      	adds	r3, #24
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7fe faf6 	bl	80024ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f000 fb53 	bl	80045bc <prvAddCurrentTaskToDelayedList>
	}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000874 	.word	0x20000874

08003f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3318      	adds	r3, #24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fb27 	bl	80025a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <xTaskRemoveFromEventList+0xb0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11d      	bne.n	8003f9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fb1e 	bl	80025a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <xTaskRemoveFromEventList+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d903      	bls.n	8003f80 <xTaskRemoveFromEventList+0x5c>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <xTaskRemoveFromEventList+0xb4>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <xTaskRemoveFromEventList+0xb8>)
 8003f8e:	441a      	add	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fe faa9 	bl	80024ee <vListInsertEnd>
 8003f9c:	e005      	b.n	8003faa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <xTaskRemoveFromEventList+0xbc>)
 8003fa6:	f7fe faa2 	bl	80024ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <xTaskRemoveFromEventList+0xc0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d905      	bls.n	8003fc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <xTaskRemoveFromEventList+0xc4>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e001      	b.n	8003fc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fc8:	697b      	ldr	r3, [r7, #20]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000d70 	.word	0x20000d70
 8003fd8:	20000d50 	.word	0x20000d50
 8003fdc:	20000878 	.word	0x20000878
 8003fe0:	20000d08 	.word	0x20000d08
 8003fe4:	20000874 	.word	0x20000874
 8003fe8:	20000d5c 	.word	0x20000d5c

08003fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <vTaskInternalSetTimeOutState+0x24>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <vTaskInternalSetTimeOutState+0x28>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	605a      	str	r2, [r3, #4]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	20000d60 	.word	0x20000d60
 8004014:	20000d4c 	.word	0x20000d4c

08004018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	613b      	str	r3, [r7, #16]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800405a:	f000 ff7b 	bl	8004f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <xTaskCheckForTimeOut+0xbc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e023      	b.n	80040c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <xTaskCheckForTimeOut+0xc0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d007      	beq.n	800409a <xTaskCheckForTimeOut+0x82>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e015      	b.n	80040c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d20b      	bcs.n	80040bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff9b 	bl	8003fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	e004      	b.n	80040c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f000 ff75 	bl	8004fb4 <vPortExitCritical>

	return xReturn;
 80040ca:	69fb      	ldr	r3, [r7, #28]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000d4c 	.word	0x20000d4c
 80040d8:	20000d60 	.word	0x20000d60

080040dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <vTaskMissedYield+0x14>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000d5c 	.word	0x20000d5c

080040f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040fc:	f000 f852 	bl	80041a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <prvIdleTask+0x28>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d9f9      	bls.n	80040fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <prvIdleTask+0x2c>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004118:	e7f0      	b.n	80040fc <prvIdleTask+0x8>
 800411a:	bf00      	nop
 800411c:	20000878 	.word	0x20000878
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	e00c      	b.n	800414a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <prvInitialiseTaskLists+0x60>)
 800413c:	4413      	add	r3, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe f9a8 	bl	8002494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3301      	adds	r3, #1
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b37      	cmp	r3, #55	; 0x37
 800414e:	d9ef      	bls.n	8004130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004150:	480d      	ldr	r0, [pc, #52]	; (8004188 <prvInitialiseTaskLists+0x64>)
 8004152:	f7fe f99f 	bl	8002494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004156:	480d      	ldr	r0, [pc, #52]	; (800418c <prvInitialiseTaskLists+0x68>)
 8004158:	f7fe f99c 	bl	8002494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800415c:	480c      	ldr	r0, [pc, #48]	; (8004190 <prvInitialiseTaskLists+0x6c>)
 800415e:	f7fe f999 	bl	8002494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <prvInitialiseTaskLists+0x70>)
 8004164:	f7fe f996 	bl	8002494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <prvInitialiseTaskLists+0x74>)
 800416a:	f7fe f993 	bl	8002494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvInitialiseTaskLists+0x78>)
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <prvInitialiseTaskLists+0x64>)
 8004172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvInitialiseTaskLists+0x7c>)
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <prvInitialiseTaskLists+0x68>)
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000878 	.word	0x20000878
 8004188:	20000cd8 	.word	0x20000cd8
 800418c:	20000cec 	.word	0x20000cec
 8004190:	20000d08 	.word	0x20000d08
 8004194:	20000d1c 	.word	0x20000d1c
 8004198:	20000d34 	.word	0x20000d34
 800419c:	20000d00 	.word	0x20000d00
 80041a0:	20000d04 	.word	0x20000d04

080041a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041aa:	e019      	b.n	80041e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041ac:	f000 fed2 	bl	8004f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b0:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <prvCheckTasksWaitingTermination+0x50>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f9f3 	bl	80025a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <prvCheckTasksWaitingTermination+0x54>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <prvCheckTasksWaitingTermination+0x54>)
 80041ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d6:	f000 feed 	bl	8004fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f810 	bl	8004200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e1      	bne.n	80041ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000d1c 	.word	0x20000d1c
 80041f8:	20000d48 	.word	0x20000d48
 80041fc:	20000d30 	.word	0x20000d30

08004200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3354      	adds	r3, #84	; 0x54
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f9b5 	bl	800557c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004218:	2b00      	cmp	r3, #0
 800421a:	d108      	bne.n	800422e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f885 	bl	8005330 <vPortFree>
				vPortFree( pxTCB );
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f001 f882 	bl	8005330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800422c:	e018      	b.n	8004260 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004234:	2b01      	cmp	r3, #1
 8004236:	d103      	bne.n	8004240 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f001 f879 	bl	8005330 <vPortFree>
	}
 800423e:	e00f      	b.n	8004260 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004246:	2b02      	cmp	r3, #2
 8004248:	d00a      	beq.n	8004260 <prvDeleteTCB+0x60>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <prvDeleteTCB+0x5e>
	}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426e:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <prvResetNextTaskUnblockTime+0x38>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <prvResetNextTaskUnblockTime+0x3c>)
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004280:	e008      	b.n	8004294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <prvResetNextTaskUnblockTime+0x38>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004292:	6013      	str	r3, [r2, #0]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	20000d00 	.word	0x20000d00
 80042a4:	20000d68 	.word	0x20000d68

080042a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <xTaskGetSchedulerState+0x34>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042b6:	2301      	movs	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e008      	b.n	80042ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <xTaskGetSchedulerState+0x38>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c4:	2302      	movs	r3, #2
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e001      	b.n	80042ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ce:	687b      	ldr	r3, [r7, #4]
	}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000d54 	.word	0x20000d54
 80042e0:	20000d70 	.word	0x20000d70

080042e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d051      	beq.n	800439e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <xTaskPriorityInherit+0xc4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d241      	bcs.n	800438c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db06      	blt.n	800431e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <xTaskPriorityInherit+0xc4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <xTaskPriorityInherit+0xc8>)
 8004330:	4413      	add	r3, r2
 8004332:	4299      	cmp	r1, r3
 8004334:	d122      	bne.n	800437c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe f934 	bl	80025a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <xTaskPriorityInherit+0xc4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <xTaskPriorityInherit+0xcc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d903      	bls.n	800435e <xTaskPriorityInherit+0x7a>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <xTaskPriorityInherit+0xcc>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <xTaskPriorityInherit+0xc8>)
 800436c:	441a      	add	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fe f8ba 	bl	80024ee <vListInsertEnd>
 800437a:	e004      	b.n	8004386 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <xTaskPriorityInherit+0xc4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e008      	b.n	800439e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <xTaskPriorityInherit+0xc4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	429a      	cmp	r2, r3
 8004398:	d201      	bcs.n	800439e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800439a:	2301      	movs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800439e:	68fb      	ldr	r3, [r7, #12]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000874 	.word	0x20000874
 80043ac:	20000878 	.word	0x20000878
 80043b0:	20000d50 	.word	0x20000d50

080043b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d056      	beq.n	8004478 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ca:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <xTaskPriorityDisinherit+0xd0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d00a      	beq.n	80043ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	1e5a      	subs	r2, r3, #1
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	429a      	cmp	r2, r3
 800441c:	d02c      	beq.n	8004478 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	2b00      	cmp	r3, #0
 8004424:	d128      	bne.n	8004478 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe f8bc 	bl	80025a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <xTaskPriorityDisinherit+0xd4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d903      	bls.n	8004458 <xTaskPriorityDisinherit+0xa4>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <xTaskPriorityDisinherit+0xd4>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4a09      	ldr	r2, [pc, #36]	; (800448c <xTaskPriorityDisinherit+0xd8>)
 8004466:	441a      	add	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7fe f83d 	bl	80024ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
	}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000874 	.word	0x20000874
 8004488:	20000d50 	.word	0x20000d50
 800448c:	20000878 	.word	0x20000878

08004490 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d06a      	beq.n	800457e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d902      	bls.n	80044d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e002      	b.n	80044dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d04b      	beq.n	800457e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d146      	bne.n	800457e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10a      	bne.n	8004510 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	60bb      	str	r3, [r7, #8]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db04      	blt.n	800452e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6959      	ldr	r1, [r3, #20]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800453e:	4413      	add	r3, r2
 8004540:	4299      	cmp	r1, r3
 8004542:	d11c      	bne.n	800457e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe f82d 	bl	80025a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d903      	bls.n	8004562 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004570:	441a      	add	r2, r3
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f7fd ffb8 	bl	80024ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800457e:	bf00      	nop
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000874 	.word	0x20000874
 800458c:	20000878 	.word	0x20000878
 8004590:	20000d50 	.word	0x20000d50

08004594 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a6:	3201      	adds	r2, #1
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80045ac:	681b      	ldr	r3, [r3, #0]
	}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000874 	.word	0x20000874

080045bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <prvAddCurrentTaskToDelayedList+0x90>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd ffe8 	bl	80025a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d10a      	bne.n	80045f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4819      	ldr	r0, [pc, #100]	; (8004654 <prvAddCurrentTaskToDelayedList+0x98>)
 80045f0:	f7fd ff7d 	bl	80024ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045f4:	e026      	b.n	8004644 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <prvAddCurrentTaskToDelayedList+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	429a      	cmp	r2, r3
 800460c:	d209      	bcs.n	8004622 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvAddCurrentTaskToDelayedList+0x94>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fd ff8b 	bl	8002536 <vListInsert>
}
 8004620:	e010      	b.n	8004644 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvAddCurrentTaskToDelayedList+0x94>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f7fd ff81 	bl	8002536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d202      	bcs.n	8004644 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000d4c 	.word	0x20000d4c
 8004650:	20000874 	.word	0x20000874
 8004654:	20000d34 	.word	0x20000d34
 8004658:	20000d04 	.word	0x20000d04
 800465c:	20000d00 	.word	0x20000d00
 8004660:	20000d68 	.word	0x20000d68

08004664 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800466e:	f000 fb07 	bl	8004c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <xTimerCreateTimerTask+0x80>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d021      	beq.n	80046be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004682:	1d3a      	adds	r2, r7, #4
 8004684:	f107 0108 	add.w	r1, r7, #8
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	4618      	mov	r0, r3
 800468e:	f7fd fee7 	bl	8002460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	9202      	str	r2, [sp, #8]
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	2302      	movs	r3, #2
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	460a      	mov	r2, r1
 80046a4:	4910      	ldr	r1, [pc, #64]	; (80046e8 <xTimerCreateTimerTask+0x84>)
 80046a6:	4811      	ldr	r0, [pc, #68]	; (80046ec <xTimerCreateTimerTask+0x88>)
 80046a8:	f7fe ffb6 	bl	8003618 <xTaskCreateStatic>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <xTimerCreateTimerTask+0x8c>)
 80046b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <xTimerCreateTimerTask+0x8c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046ba:	2301      	movs	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	613b      	str	r3, [r7, #16]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000da4 	.word	0x20000da4
 80046e8:	08005798 	.word	0x08005798
 80046ec:	08004829 	.word	0x08004829
 80046f0:	20000da8 	.word	0x20000da8

080046f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xTimerGenericCommand+0x2e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	623b      	str	r3, [r7, #32]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <xTimerGenericCommand+0x98>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02a      	beq.n	8004780 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b05      	cmp	r3, #5
 800473a:	dc18      	bgt.n	800476e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800473c:	f7ff fdb4 	bl	80042a8 <xTaskGetSchedulerState>
 8004740:	4603      	mov	r3, r0
 8004742:	2b02      	cmp	r3, #2
 8004744:	d109      	bne.n	800475a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <xTimerGenericCommand+0x98>)
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	2300      	movs	r3, #0
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	f7fe f8fb 	bl	800294c <xQueueGenericSend>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
 8004758:	e012      	b.n	8004780 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <xTimerGenericCommand+0x98>)
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f107 0110 	add.w	r1, r7, #16
 8004762:	2300      	movs	r3, #0
 8004764:	2200      	movs	r2, #0
 8004766:	f7fe f8f1 	bl	800294c <xQueueGenericSend>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
 800476c:	e008      	b.n	8004780 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <xTimerGenericCommand+0x98>)
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	f107 0110 	add.w	r1, r7, #16
 8004776:	2300      	movs	r3, #0
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	f7fe f9e5 	bl	8002b48 <xQueueGenericSendFromISR>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004782:	4618      	mov	r0, r3
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000da4 	.word	0x20000da4

08004790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479a:	4b22      	ldr	r3, [pc, #136]	; (8004824 <prvProcessExpiredTimer+0x94>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fefd 	bl	80025a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	18d1      	adds	r1, r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	6978      	ldr	r0, [r7, #20]
 80047ca:	f000 f8d1 	bl	8004970 <prvInsertTimerInActiveList>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01f      	beq.n	8004814 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	2100      	movs	r1, #0
 80047de:	6978      	ldr	r0, [r7, #20]
 80047e0:	f7ff ff88 	bl	80046f4 <xTimerGenericCommand>
 80047e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d113      	bne.n	8004814 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60fb      	str	r3, [r7, #12]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	b2da      	uxtb	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	6978      	ldr	r0, [r7, #20]
 800481a:	4798      	blx	r3
}
 800481c:	bf00      	nop
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000d9c 	.word	0x20000d9c

08004828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f857 	bl	80048e8 <prvGetNextExpireTime>
 800483a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4619      	mov	r1, r3
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f803 	bl	800484c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004846:	f000 f8d5 	bl	80049f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800484a:	e7f1      	b.n	8004830 <prvTimerTask+0x8>

0800484c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004856:	f7ff f93b 	bl	8003ad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f866 	bl	8004930 <prvSampleTimeNow>
 8004864:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d130      	bne.n	80048ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <prvProcessTimerOrBlockTask+0x3c>
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d806      	bhi.n	8004888 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800487a:	f7ff f937 	bl	8003aec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff85 	bl	8004790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004886:	e024      	b.n	80048d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <prvProcessTimerOrBlockTask+0x90>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <prvProcessTimerOrBlockTask+0x50>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <prvProcessTimerOrBlockTask+0x52>
 800489c:	2300      	movs	r3, #0
 800489e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <prvProcessTimerOrBlockTask+0x94>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	f7fe fe7f 	bl	80035b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048b2:	f7ff f91b 	bl	8003aec <xTaskResumeAll>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <prvProcessTimerOrBlockTask+0x98>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
}
 80048cc:	e001      	b.n	80048d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ce:	f7ff f90d 	bl	8003aec <xTaskResumeAll>
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000da0 	.word	0x20000da0
 80048e0:	20000da4 	.word	0x20000da4
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <prvGetNextExpireTime+0x44>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <prvGetNextExpireTime+0x16>
 80048fa:	2201      	movs	r2, #1
 80048fc:	e000      	b.n	8004900 <prvGetNextExpireTime+0x18>
 80048fe:	2200      	movs	r2, #0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <prvGetNextExpireTime+0x44>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e001      	b.n	800491c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000d9c 	.word	0x20000d9c

08004930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004938:	f7ff f976 	bl	8003c28 <xTaskGetTickCount>
 800493c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <prvSampleTimeNow+0x3c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d205      	bcs.n	8004954 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004948:	f000 f936 	bl	8004bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e002      	b.n	800495a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <prvSampleTimeNow+0x3c>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004960:	68fb      	ldr	r3, [r7, #12]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000dac 	.word	0x20000dac

08004970 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d812      	bhi.n	80049bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e01b      	b.n	80049e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <prvInsertTimerInActiveList+0x7c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7fd fdbe 	bl	8002536 <vListInsert>
 80049ba:	e012      	b.n	80049e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d206      	bcs.n	80049d2 <prvInsertTimerInActiveList+0x62>
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d302      	bcc.n	80049d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e007      	b.n	80049e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <prvInsertTimerInActiveList+0x80>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f7fd fdaa 	bl	8002536 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049e2:	697b      	ldr	r3, [r7, #20]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000da0 	.word	0x20000da0
 80049f0:	20000d9c 	.word	0x20000d9c

080049f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	; 0x38
 80049f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049fa:	e0ca      	b.n	8004b92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da18      	bge.n	8004a34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	3304      	adds	r3, #4
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	61fb      	str	r3, [r7, #28]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2a:	6850      	ldr	r0, [r2, #4]
 8004a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f2c0 80ab 	blt.w	8004b92 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fdab 	bl	80025a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a52:	463b      	mov	r3, r7
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff6b 	bl	8004930 <prvSampleTimeNow>
 8004a5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b09      	cmp	r3, #9
 8004a60:	f200 8096 	bhi.w	8004b90 <prvProcessReceivedCommands+0x19c>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <prvProcessReceivedCommands+0x78>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a95 	.word	0x08004a95
 8004a78:	08004b09 	.word	0x08004b09
 8004a7c:	08004b1d 	.word	0x08004b1d
 8004a80:	08004b67 	.word	0x08004b67
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004a95 	.word	0x08004a95
 8004a8c:	08004b09 	.word	0x08004b09
 8004a90:	08004b1d 	.word	0x08004b1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	18d1      	adds	r1, r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab4:	f7ff ff5c 	bl	8004970 <prvInsertTimerInActiveList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d069      	beq.n	8004b92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05e      	beq.n	8004b92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	441a      	add	r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae6:	f7ff fe05 	bl	80046f4 <xTimerGenericCommand>
 8004aea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d14f      	bne.n	8004b92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	61bb      	str	r3, [r7, #24]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b1a:	e03a      	b.n	8004b92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	617b      	str	r3, [r7, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	18d1      	adds	r1, r2, r3
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b60:	f7ff ff06 	bl	8004970 <prvInsertTimerInActiveList>
					break;
 8004b64:	e015      	b.n	8004b92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b76:	f000 fbdb 	bl	8005330 <vPortFree>
 8004b7a:	e00a      	b.n	8004b92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b8e:	e000      	b.n	8004b92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <prvProcessReceivedCommands+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1d39      	adds	r1, r7, #4
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe f8fc 	bl	8002d98 <xQueueReceive>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f47f af2a 	bne.w	80049fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3730      	adds	r7, #48	; 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000da4 	.word	0x20000da4

08004bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bbe:	e048      	b.n	8004c52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bca:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fce5 	bl	80025a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02e      	beq.n	8004c52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90e      	bls.n	8004c24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fd fc8a 	bl	8002536 <vListInsert>
 8004c22:	e016      	b.n	8004c52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c24:	2300      	movs	r3, #0
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fd60 	bl	80046f4 <xTimerGenericCommand>
 8004c34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	603b      	str	r3, [r7, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1b1      	bne.n	8004bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <prvSwitchTimerLists+0xc4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <prvSwitchTimerLists+0xc0>)
 8004c68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c6a:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <prvSwitchTimerLists+0xc4>)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6013      	str	r3, [r2, #0]
}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000d9c 	.word	0x20000d9c
 8004c7c:	20000da0 	.word	0x20000da0

08004c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c86:	f000 f965 	bl	8004f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c8a:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <prvCheckForValidListAndQueue+0x60>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d120      	bne.n	8004cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c92:	4814      	ldr	r0, [pc, #80]	; (8004ce4 <prvCheckForValidListAndQueue+0x64>)
 8004c94:	f7fd fbfe 	bl	8002494 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c98:	4813      	ldr	r0, [pc, #76]	; (8004ce8 <prvCheckForValidListAndQueue+0x68>)
 8004c9a:	f7fd fbfb 	bl	8002494 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <prvCheckForValidListAndQueue+0x6c>)
 8004ca0:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <prvCheckForValidListAndQueue+0x64>)
 8004ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <prvCheckForValidListAndQueue+0x70>)
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <prvCheckForValidListAndQueue+0x68>)
 8004ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <prvCheckForValidListAndQueue+0x74>)
 8004cb0:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <prvCheckForValidListAndQueue+0x78>)
 8004cb2:	2110      	movs	r1, #16
 8004cb4:	200a      	movs	r0, #10
 8004cb6:	f7fd fd09 	bl	80026cc <xQueueGenericCreateStatic>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <prvCheckForValidListAndQueue+0x60>)
 8004cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <prvCheckForValidListAndQueue+0x60>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <prvCheckForValidListAndQueue+0x60>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	490b      	ldr	r1, [pc, #44]	; (8004cfc <prvCheckForValidListAndQueue+0x7c>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fc1a 	bl	8003508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cd4:	f000 f96e 	bl	8004fb4 <vPortExitCritical>
}
 8004cd8:	bf00      	nop
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000da4 	.word	0x20000da4
 8004ce4:	20000d74 	.word	0x20000d74
 8004ce8:	20000d88 	.word	0x20000d88
 8004cec:	20000d9c 	.word	0x20000d9c
 8004cf0:	20000da0 	.word	0x20000da0
 8004cf4:	20000e50 	.word	0x20000e50
 8004cf8:	20000db0 	.word	0x20000db0
 8004cfc:	080057a0 	.word	0x080057a0

08004d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <pxPortInitialiseStack+0x64>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3b14      	subs	r3, #20
 8004d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f06f 0202 	mvn.w	r2, #2
 8004d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3b20      	subs	r3, #32
 8004d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	08004d69 	.word	0x08004d69

08004d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <prvTaskExitError+0x54>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d00a      	beq.n	8004d92 <prvTaskExitError+0x2a>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <prvTaskExitError+0x28>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60bb      	str	r3, [r7, #8]
}
 8004da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004da6:	bf00      	nop
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0fc      	beq.n	8004da8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <pxCurrentTCBConst2>)
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	6808      	ldr	r0, [r1, #0]
 8004dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	f380 8809 	msr	PSP, r0
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8811 	msr	BASEPRI, r0
 8004dda:	4770      	bx	lr
 8004ddc:	f3af 8000 	nop.w

08004de0 <pxCurrentTCBConst2>:
 8004de0:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004de8:	4808      	ldr	r0, [pc, #32]	; (8004e0c <prvPortStartFirstTask+0x24>)
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	6800      	ldr	r0, [r0, #0]
 8004dee:	f380 8808 	msr	MSP, r0
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f380 8814 	msr	CONTROL, r0
 8004dfa:	b662      	cpsie	i
 8004dfc:	b661      	cpsie	f
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	df00      	svc	0
 8004e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e0a:	bf00      	nop
 8004e0c:	e000ed08 	.word	0xe000ed08

08004e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e16:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <xPortStartScheduler+0x120>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a46      	ldr	r2, [pc, #280]	; (8004f34 <xPortStartScheduler+0x124>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10a      	bne.n	8004e36 <xPortStartScheduler+0x26>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e36:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <xPortStartScheduler+0x120>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <xPortStartScheduler+0x128>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10a      	bne.n	8004e56 <xPortStartScheduler+0x46>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e56:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <xPortStartScheduler+0x130>)
 8004e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <xPortStartScheduler+0x134>)
 8004e80:	2207      	movs	r2, #7
 8004e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e84:	e009      	b.n	8004e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e86:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <xPortStartScheduler+0x134>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <xPortStartScheduler+0x134>)
 8004e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d0ef      	beq.n	8004e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <xPortStartScheduler+0x134>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1c3 0307 	rsb	r3, r3, #7
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d00a      	beq.n	8004ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60bb      	str	r3, [r7, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <xPortStartScheduler+0x134>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <xPortStartScheduler+0x134>)
 8004ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <xPortStartScheduler+0x134>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <xPortStartScheduler+0x134>)
 8004edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <xPortStartScheduler+0x138>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <xPortStartScheduler+0x138>)
 8004eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <xPortStartScheduler+0x138>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <xPortStartScheduler+0x138>)
 8004ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004efe:	f000 f8dd 	bl	80050bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <xPortStartScheduler+0x13c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f08:	f000 f8fc 	bl	8005104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <xPortStartScheduler+0x140>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <xPortStartScheduler+0x140>)
 8004f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f18:	f7ff ff66 	bl	8004de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f1c:	f7fe ff4e 	bl	8003dbc <vTaskSwitchContext>
	prvTaskExitError();
 8004f20:	f7ff ff22 	bl	8004d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	e000ed00 	.word	0xe000ed00
 8004f34:	410fc271 	.word	0x410fc271
 8004f38:	410fc270 	.word	0x410fc270
 8004f3c:	e000e400 	.word	0xe000e400
 8004f40:	20000ea0 	.word	0x20000ea0
 8004f44:	20000ea4 	.word	0x20000ea4
 8004f48:	e000ed20 	.word	0xe000ed20
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	e000ef34 	.word	0xe000ef34

08004f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	607b      	str	r3, [r7, #4]
}
 8004f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <vPortEnterCritical+0x58>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <vPortEnterCritical+0x58>)
 8004f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <vPortEnterCritical+0x58>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10f      	bne.n	8004fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <vPortEnterCritical+0x5c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	603b      	str	r3, [r7, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vPortEnterCritical+0x4a>
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	2000000c 	.word	0x2000000c
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <vPortExitCritical+0x50>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <vPortExitCritical+0x24>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	607b      	str	r3, [r7, #4]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <vPortExitCritical+0x50>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <vPortExitCritical+0x50>)
 8004fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <vPortExitCritical+0x50>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <vPortExitCritical+0x42>
 8004fea:	2300      	movs	r3, #0
 8004fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f383 8811 	msr	BASEPRI, r3
}
 8004ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
	...

08005010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005010:	f3ef 8009 	mrs	r0, PSP
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <pxCurrentTCBConst>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f01e 0f10 	tst.w	lr, #16
 8005020:	bf08      	it	eq
 8005022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005034:	f380 8811 	msr	BASEPRI, r0
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f7fe febc 	bl	8003dbc <vTaskSwitchContext>
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f380 8811 	msr	BASEPRI, r0
 800504c:	bc09      	pop	{r0, r3}
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	6808      	ldr	r0, [r1, #0]
 8005052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005056:	f01e 0f10 	tst.w	lr, #16
 800505a:	bf08      	it	eq
 800505c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005060:	f380 8809 	msr	PSP, r0
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w

08005070 <pxCurrentTCBConst>:
 8005070:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005092:	f7fe fdd9 	bl	8003c48 <xTaskIncrementTick>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <xPortSysTickHandler+0x40>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f383 8811 	msr	BASEPRI, r3
}
 80050ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <vPortSetupTimerInterrupt+0x34>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <vPortSetupTimerInterrupt+0x38>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <vPortSetupTimerInterrupt+0x3c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <vPortSetupTimerInterrupt+0x40>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	4a09      	ldr	r2, [pc, #36]	; (8005100 <vPortSetupTimerInterrupt+0x44>)
 80050da:	3b01      	subs	r3, #1
 80050dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <vPortSetupTimerInterrupt+0x34>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000e010 	.word	0xe000e010
 80050f4:	e000e018 	.word	0xe000e018
 80050f8:	20000000 	.word	0x20000000
 80050fc:	10624dd3 	.word	0x10624dd3
 8005100:	e000e014 	.word	0xe000e014

08005104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005114 <vPortEnableVFP+0x10>
 8005108:	6801      	ldr	r1, [r0, #0]
 800510a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800510e:	6001      	str	r1, [r0, #0]
 8005110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005112:	bf00      	nop
 8005114:	e000ed88 	.word	0xe000ed88

08005118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800511e:	f3ef 8305 	mrs	r3, IPSR
 8005122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	d914      	bls.n	8005154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <vPortValidateInterruptPriority+0x70>)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005134:	4b15      	ldr	r3, [pc, #84]	; (800518c <vPortValidateInterruptPriority+0x74>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	7afa      	ldrb	r2, [r7, #11]
 800513a:	429a      	cmp	r2, r3
 800513c:	d20a      	bcs.n	8005154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <vPortValidateInterruptPriority+0x78>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <vPortValidateInterruptPriority+0x7c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d90a      	bls.n	800517a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	603b      	str	r3, [r7, #0]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <vPortValidateInterruptPriority+0x60>
	}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	e000e3f0 	.word	0xe000e3f0
 800518c:	20000ea0 	.word	0x20000ea0
 8005190:	e000ed0c 	.word	0xe000ed0c
 8005194:	20000ea4 	.word	0x20000ea4

08005198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051a4:	f7fe fc94 	bl	8003ad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a8:	4b5b      	ldr	r3, [pc, #364]	; (8005318 <pvPortMalloc+0x180>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b0:	f000 f920 	bl	80053f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051b4:	4b59      	ldr	r3, [pc, #356]	; (800531c <pvPortMalloc+0x184>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8093 	bne.w	80052e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01d      	beq.n	8005204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051c8:	2208      	movs	r2, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	3308      	adds	r3, #8
 80051e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <pvPortMalloc+0x6c>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d06e      	beq.n	80052e8 <pvPortMalloc+0x150>
 800520a:	4b45      	ldr	r3, [pc, #276]	; (8005320 <pvPortMalloc+0x188>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d869      	bhi.n	80052e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005214:	4b43      	ldr	r3, [pc, #268]	; (8005324 <pvPortMalloc+0x18c>)
 8005216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005218:	4b42      	ldr	r3, [pc, #264]	; (8005324 <pvPortMalloc+0x18c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521e:	e004      	b.n	800522a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d903      	bls.n	800523c <pvPortMalloc+0xa4>
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f1      	bne.n	8005220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <pvPortMalloc+0x180>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005242:	429a      	cmp	r2, r3
 8005244:	d050      	beq.n	80052e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2208      	movs	r2, #8
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	2308      	movs	r3, #8
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	429a      	cmp	r2, r3
 8005266:	d91f      	bls.n	80052a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <pvPortMalloc+0xf8>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	613b      	str	r3, [r7, #16]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a2:	69b8      	ldr	r0, [r7, #24]
 80052a4:	f000 f908 	bl	80054b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <pvPortMalloc+0x188>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <pvPortMalloc+0x188>)
 80052b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <pvPortMalloc+0x188>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <pvPortMalloc+0x190>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d203      	bcs.n	80052ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <pvPortMalloc+0x188>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a18      	ldr	r2, [pc, #96]	; (8005328 <pvPortMalloc+0x190>)
 80052c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x184>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <pvPortMalloc+0x194>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <pvPortMalloc+0x194>)
 80052e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052e8:	f7fe fc00 	bl	8003aec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <pvPortMalloc+0x174>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <pvPortMalloc+0x172>
	return pvReturn;
 800530c:	69fb      	ldr	r3, [r7, #28]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20001e50 	.word	0x20001e50
 800531c:	20001e64 	.word	0x20001e64
 8005320:	20001e54 	.word	0x20001e54
 8005324:	20001e48 	.word	0x20001e48
 8005328:	20001e58 	.word	0x20001e58
 800532c:	20001e5c 	.word	0x20001e5c

08005330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04d      	beq.n	80053de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005342:	2308      	movs	r3, #8
 8005344:	425b      	negs	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <vPortFree+0xb8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <vPortFree+0x44>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60fb      	str	r3, [r7, #12]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <vPortFree+0x62>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60bb      	str	r3, [r7, #8]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <vPortFree+0xb8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11a      	bne.n	80053de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <vPortFree+0xb8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053b8:	f7fe fb8a 	bl	8003ad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <vPortFree+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <vPortFree+0xbc>)
 80053c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ca:	6938      	ldr	r0, [r7, #16]
 80053cc:	f000 f874 	bl	80054b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <vPortFree+0xc0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a06      	ldr	r2, [pc, #24]	; (80053f0 <vPortFree+0xc0>)
 80053d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053da:	f7fe fb87 	bl	8003aec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20001e64 	.word	0x20001e64
 80053ec:	20001e54 	.word	0x20001e54
 80053f0:	20001e60 	.word	0x20001e60

080053f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053fa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80053fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005400:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <prvHeapInit+0xac>)
 8005402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3307      	adds	r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <prvHeapInit+0xac>)
 8005424:	4413      	add	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <prvHeapInit+0xb0>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <prvHeapInit+0xb0>)
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005440:	2208      	movs	r2, #8
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <prvHeapInit+0xb4>)
 8005454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <prvHeapInit+0xb4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <prvHeapInit+0xb4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <prvHeapInit+0xb4>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <prvHeapInit+0xb8>)
 8005482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvHeapInit+0xbc>)
 800548a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <prvHeapInit+0xc0>)
 800548e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000ea8 	.word	0x20000ea8
 80054a4:	20001e48 	.word	0x20001e48
 80054a8:	20001e50 	.word	0x20001e50
 80054ac:	20001e58 	.word	0x20001e58
 80054b0:	20001e54 	.word	0x20001e54
 80054b4:	20001e64 	.word	0x20001e64

080054b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c0:	4b28      	ldr	r3, [pc, #160]	; (8005564 <prvInsertBlockIntoFreeList+0xac>)
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <prvInsertBlockIntoFreeList+0x14>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d8f7      	bhi.n	80054c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4413      	add	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d108      	bne.n	80054fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d118      	bne.n	8005540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <prvInsertBlockIntoFreeList+0xb0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d00d      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e008      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvInsertBlockIntoFreeList+0xb0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e003      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d002      	beq.n	8005556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20001e48 	.word	0x20001e48
 8005568:	20001e50 	.word	0x20001e50

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <_reclaim_reent>:
 800557c:	4b29      	ldr	r3, [pc, #164]	; (8005624 <_reclaim_reent+0xa8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4283      	cmp	r3, r0
 8005582:	b570      	push	{r4, r5, r6, lr}
 8005584:	4604      	mov	r4, r0
 8005586:	d04b      	beq.n	8005620 <_reclaim_reent+0xa4>
 8005588:	69c3      	ldr	r3, [r0, #28]
 800558a:	b143      	cbz	r3, 800559e <_reclaim_reent+0x22>
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d144      	bne.n	800561c <_reclaim_reent+0xa0>
 8005592:	69e3      	ldr	r3, [r4, #28]
 8005594:	6819      	ldr	r1, [r3, #0]
 8005596:	b111      	cbz	r1, 800559e <_reclaim_reent+0x22>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f879 	bl	8005690 <_free_r>
 800559e:	6961      	ldr	r1, [r4, #20]
 80055a0:	b111      	cbz	r1, 80055a8 <_reclaim_reent+0x2c>
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f874 	bl	8005690 <_free_r>
 80055a8:	69e1      	ldr	r1, [r4, #28]
 80055aa:	b111      	cbz	r1, 80055b2 <_reclaim_reent+0x36>
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f86f 	bl	8005690 <_free_r>
 80055b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055b4:	b111      	cbz	r1, 80055bc <_reclaim_reent+0x40>
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f86a 	bl	8005690 <_free_r>
 80055bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055be:	b111      	cbz	r1, 80055c6 <_reclaim_reent+0x4a>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 f865 	bl	8005690 <_free_r>
 80055c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055c8:	b111      	cbz	r1, 80055d0 <_reclaim_reent+0x54>
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f860 	bl	8005690 <_free_r>
 80055d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055d2:	b111      	cbz	r1, 80055da <_reclaim_reent+0x5e>
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 f85b 	bl	8005690 <_free_r>
 80055da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80055dc:	b111      	cbz	r1, 80055e4 <_reclaim_reent+0x68>
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 f856 	bl	8005690 <_free_r>
 80055e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80055e6:	b111      	cbz	r1, 80055ee <_reclaim_reent+0x72>
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f851 	bl	8005690 <_free_r>
 80055ee:	6a23      	ldr	r3, [r4, #32]
 80055f0:	b1b3      	cbz	r3, 8005620 <_reclaim_reent+0xa4>
 80055f2:	4620      	mov	r0, r4
 80055f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055f8:	4718      	bx	r3
 80055fa:	5949      	ldr	r1, [r1, r5]
 80055fc:	b941      	cbnz	r1, 8005610 <_reclaim_reent+0x94>
 80055fe:	3504      	adds	r5, #4
 8005600:	69e3      	ldr	r3, [r4, #28]
 8005602:	2d80      	cmp	r5, #128	; 0x80
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	d1f8      	bne.n	80055fa <_reclaim_reent+0x7e>
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f841 	bl	8005690 <_free_r>
 800560e:	e7c0      	b.n	8005592 <_reclaim_reent+0x16>
 8005610:	680e      	ldr	r6, [r1, #0]
 8005612:	4620      	mov	r0, r4
 8005614:	f000 f83c 	bl	8005690 <_free_r>
 8005618:	4631      	mov	r1, r6
 800561a:	e7ef      	b.n	80055fc <_reclaim_reent+0x80>
 800561c:	2500      	movs	r5, #0
 800561e:	e7ef      	b.n	8005600 <_reclaim_reent+0x84>
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	bf00      	nop
 8005624:	2000005c 	.word	0x2000005c

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d0d      	ldr	r5, [pc, #52]	; (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2600      	movs	r6, #0
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4d0b      	ldr	r5, [pc, #44]	; (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	; (800566c <__libc_init_array+0x44>)
 800563c:	f000 f880 	bl	8005740 <_init>
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2600      	movs	r6, #0
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f855 3b04 	ldr.w	r3, [r5], #4
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	0800587c 	.word	0x0800587c
 8005664:	0800587c 	.word	0x0800587c
 8005668:	0800587c 	.word	0x0800587c
 800566c:	08005880 	.word	0x08005880

08005670 <__retarget_lock_acquire_recursive>:
 8005670:	4770      	bx	lr

08005672 <__retarget_lock_release_recursive>:
 8005672:	4770      	bx	lr

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568a:	4291      	cmp	r1, r2
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <_free_r>:
 8005690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005692:	2900      	cmp	r1, #0
 8005694:	d044      	beq.n	8005720 <_free_r+0x90>
 8005696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569a:	9001      	str	r0, [sp, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f1a1 0404 	sub.w	r4, r1, #4
 80056a2:	bfb8      	it	lt
 80056a4:	18e4      	addlt	r4, r4, r3
 80056a6:	f000 f83f 	bl	8005728 <__malloc_lock>
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <_free_r+0x94>)
 80056ac:	9801      	ldr	r0, [sp, #4]
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	b933      	cbnz	r3, 80056c0 <_free_r+0x30>
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6014      	str	r4, [r2, #0]
 80056b6:	b003      	add	sp, #12
 80056b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056bc:	f000 b83a 	b.w	8005734 <__malloc_unlock>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d908      	bls.n	80056d6 <_free_r+0x46>
 80056c4:	6825      	ldr	r5, [r4, #0]
 80056c6:	1961      	adds	r1, r4, r5
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1949      	addeq	r1, r1, r5
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	e7ed      	b.n	80056b2 <_free_r+0x22>
 80056d6:	461a      	mov	r2, r3
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b10b      	cbz	r3, 80056e0 <_free_r+0x50>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d9fa      	bls.n	80056d6 <_free_r+0x46>
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	1855      	adds	r5, r2, r1
 80056e4:	42a5      	cmp	r5, r4
 80056e6:	d10b      	bne.n	8005700 <_free_r+0x70>
 80056e8:	6824      	ldr	r4, [r4, #0]
 80056ea:	4421      	add	r1, r4
 80056ec:	1854      	adds	r4, r2, r1
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	d1e0      	bne.n	80056b6 <_free_r+0x26>
 80056f4:	681c      	ldr	r4, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6053      	str	r3, [r2, #4]
 80056fa:	440c      	add	r4, r1
 80056fc:	6014      	str	r4, [r2, #0]
 80056fe:	e7da      	b.n	80056b6 <_free_r+0x26>
 8005700:	d902      	bls.n	8005708 <_free_r+0x78>
 8005702:	230c      	movs	r3, #12
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	e7d6      	b.n	80056b6 <_free_r+0x26>
 8005708:	6825      	ldr	r5, [r4, #0]
 800570a:	1961      	adds	r1, r4, r5
 800570c:	428b      	cmp	r3, r1
 800570e:	bf04      	itt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	bf04      	itt	eq
 8005718:	1949      	addeq	r1, r1, r5
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	6054      	str	r4, [r2, #4]
 800571e:	e7ca      	b.n	80056b6 <_free_r+0x26>
 8005720:	b003      	add	sp, #12
 8005722:	bd30      	pop	{r4, r5, pc}
 8005724:	20001fa4 	.word	0x20001fa4

08005728 <__malloc_lock>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__malloc_lock+0x8>)
 800572a:	f7ff bfa1 	b.w	8005670 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	20001fa0 	.word	0x20001fa0

08005734 <__malloc_unlock>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__malloc_unlock+0x8>)
 8005736:	f7ff bf9c 	b.w	8005672 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	20001fa0 	.word	0x20001fa0

08005740 <_init>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr

0800574c <_fini>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr
